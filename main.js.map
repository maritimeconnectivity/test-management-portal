{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.config.ts","./src/app/app.module.ts","./src/app/auth/auth.guard.ts","./src/app/auth/auth.init.ts","./src/app/auth/auth.interceptor.ts","./src/app/auth/auth.permission.ts","./src/app/auth/auth.service.ts","./src/app/backend-api/identity-registry/api.module.ts","./src/app/backend-api/identity-registry/api/agentController.service.ts","./src/app/backend-api/identity-registry/api/api.ts","./src/app/backend-api/identity-registry/api/certificateController.service.ts","./src/app/backend-api/identity-registry/api/deviceController.service.ts","./src/app/backend-api/identity-registry/api/logoController.service.ts","./src/app/backend-api/identity-registry/api/mmsController.service.ts","./src/app/backend-api/identity-registry/api/organizationController.service.ts","./src/app/backend-api/identity-registry/api/roleController.service.ts","./src/app/backend-api/identity-registry/api/serviceController.service.ts","./src/app/backend-api/identity-registry/api/userController.service.ts","./src/app/backend-api/identity-registry/api/vesselController.service.ts","./src/app/backend-api/identity-registry/api/vesselImageController.service.ts","./src/app/backend-api/identity-registry/configuration.ts","./src/app/backend-api/identity-registry/encoder.ts","./src/app/backend-api/identity-registry/index.ts","./src/app/backend-api/identity-registry/model/allowedAgentRole.ts","./src/app/backend-api/identity-registry/model/certificate.ts","./src/app/backend-api/identity-registry/model/certificateRevocation.ts","./src/app/backend-api/identity-registry/model/identityProviderAttribute.ts","./src/app/backend-api/identity-registry/model/models.ts","./src/app/backend-api/identity-registry/model/orgMrnLogoBody.ts","./src/app/backend-api/identity-registry/model/orgMrnLogoBody1.ts","./src/app/backend-api/identity-registry/model/organization.ts","./src/app/backend-api/identity-registry/model/pageable.ts","./src/app/backend-api/identity-registry/model/role.ts","./src/app/backend-api/identity-registry/model/service.ts","./src/app/backend-api/identity-registry/model/servicePatch.ts","./src/app/backend-api/identity-registry/model/sortObject.ts","./src/app/backend-api/identity-registry/model/vesselAttribute.ts","./src/app/backend-api/identity-registry/model/vesselMrnVesselImageBody.ts","./src/app/backend-api/identity-registry/model/vesselMrnVesselImageBody1.ts","./src/app/backend-api/identity-registry/variables.ts","./src/app/backend-api/secom/api.module.ts","./src/app/backend-api/secom/api/api.ts","./src/app/backend-api/secom/api/sECOM.service.ts","./src/app/backend-api/secom/configuration.ts","./src/app/backend-api/secom/encoder.ts","./src/app/backend-api/secom/index.ts","./src/app/backend-api/secom/model/models.ts","./src/app/backend-api/secom/model/searchObjectResult.ts","./src/app/backend-api/secom/model/searchParameters.ts","./src/app/backend-api/secom/variables.ts","./src/app/backend-api/service-registry/api.module.ts","./src/app/backend-api/service-registry/api/api.ts","./src/app/backend-api/service-registry/api/docController.service.ts","./src/app/backend-api/service-registry/api/instanceController.service.ts","./src/app/backend-api/service-registry/api/ledgerRequestController.service.ts","./src/app/backend-api/service-registry/api/xmlController.service.ts","./src/app/backend-api/service-registry/configuration.ts","./src/app/backend-api/service-registry/encoder.ts","./src/app/backend-api/service-registry/index.ts","./src/app/backend-api/service-registry/model/coordinate.ts","./src/app/backend-api/service-registry/model/coordinateSequence.ts","./src/app/backend-api/service-registry/model/coordinateSequenceFactory.ts","./src/app/backend-api/service-registry/model/docDto.ts","./src/app/backend-api/service-registry/model/envelope.ts","./src/app/backend-api/service-registry/model/instanceDto.ts","./src/app/backend-api/service-registry/model/ledgerRequestDto.ts","./src/app/backend-api/service-registry/model/models.ts","./src/app/backend-api/service-registry/model/type.ts","./src/app/backend-api/service-registry/model/xmlDto.ts","./src/app/backend-api/service-registry/variables.ts","./src/app/common/menuType.ts","./src/environments/environment.test.ts","./src/main.ts","ignored|/Users/dmc/Documents/GitHub/management-portal-clr/node_modules/.pnpm/js-sha256@0.11.0/node_modules/js-sha256/src|buffer","ignored|/Users/dmc/Documents/GitHub/management-portal-clr/node_modules/.pnpm/js-sha256@0.11.0/node_modules/js-sha256/src|crypto"],"sourcesContent":["/*\n * Copyright (c) 2024 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExtraOptions, RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { authGuard } from './auth/auth.guard';\n\nexport const routes: Routes = [\n  {\n    path: 'pages',\n    loadChildren: () => import('./pages/pages.module')\n      .then(m => m.PagesModule),\n    canActivateChild: [authGuard],\n  },\n  {\n    path: '',\n    loadChildren: () => import('./landing/landing.module')\n      .then(m => m.LandingModule),\n  },\n  //*\n  //{ path: '', redirectTo: 'pages', pathMatch: 'full' },\n  //{ path: '**', redirectTo: 'pages' },\n  //*/\n];\n\nconst config: ExtraOptions = {\n  useHash: false,\n};\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, config)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet><notifier-container></notifier-container>',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'management-portal-clr';\n}\n","/*\n * Copyright (c) 2024 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ndeclare const fetch: Function\nimport {environment} from '../environments/environment';\n\nexport class AppConfig {\n    static OIDC_BASE_PATH: string;\n    static ENDORSEMENT_BASE_PATH: string;\n    static IR_BASE_PATH: string;\n    static HAS_SERVICE_REGISTRY: boolean;\n    static SR_BASE_PATH: string;\n    static ENVIRONMENT_TITLE: string;\n    static IDP_NAMESPACE: string;\n    static ENVIRONMENT_NAME: string;\n    static IR_PROVIDER: string;\n    static IR_CONTACT: string;\n    static SR_PROVIDER: string;\n    static SR_CONTACT: string;\n    static HAS_MSR_LEDGER: boolean;\n    static LEDGER_PATH: string;\n    static MP_PROVIDER: string;\n    static TERMS_OF_USE: string;\n    static MP_CONTACT: string;\n    static MP_VERSION: string;\n    static MP_NAME: string;\n    static FOOTER_NAME: string;\n    static FOOTER_LINK: string;\n    static LOGO_IMG: string;\n\n    public static _initialize() {\n        AppConfig.IR_BASE_PATH = environment.irBasePath.replace(/\\/$/, '');\n        AppConfig.SR_BASE_PATH = environment.hasServiceRegistry ? environment.srBasePath.replace(/\\/$/, '') : '';\n        AppConfig.ENVIRONMENT_TITLE = environment.environmentTitle;\n        AppConfig.IDP_NAMESPACE = environment.idpNamespace;\n        AppConfig.HAS_SERVICE_REGISTRY = environment.hasServiceRegistry;\n        AppConfig.OIDC_BASE_PATH = environment.oidcBasePath.replace(/\\/$/, '');\n        AppConfig.ENVIRONMENT_NAME = environment.environmentName;\n        AppConfig.IR_PROVIDER = environment.irProvider;\n        AppConfig.IR_CONTACT = environment.irContact;\n        AppConfig.SR_PROVIDER = environment.srProvider;\n        AppConfig.SR_CONTACT = environment.srContact;\n        AppConfig.HAS_MSR_LEDGER = environment.hasMSRLedger;\n        AppConfig.LEDGER_PATH = environment.hasMSRLedger ? environment.ledgerPath : '';\n        AppConfig.MP_PROVIDER = environment.mpProvider;\n        AppConfig.MP_NAME = environment.mpName;\n        AppConfig.TERMS_OF_USE = environment.termsOfUse;\n        AppConfig.MP_CONTACT = environment.mpContact;\n        AppConfig.MP_VERSION = \"test\";\n        AppConfig.FOOTER_NAME = environment.footerName;\n        AppConfig.FOOTER_LINK = environment.footerLink;\n        AppConfig.LOGO_IMG = environment.logoImg;\n    }\n}\n\nAppConfig._initialize();\n","import {APP_INITIALIZER, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ClarityModule} from \"@clr/angular\";\nimport {BASE_PATH as IR_BASE_PATH, ApiModule as MIRApiModule} from './backend-api/identity-registry';\nimport {BASE_PATH as SR_BASE_PATH, ApiModule as MSRApiModule} from './backend-api/service-registry';\nimport {BASE_PATH as SECOM_BASE_PATH, ApiModule as SECOMApiModule} from './backend-api/secom';\nimport {initializeKeycloak} from './auth/auth.init';\nimport {KeycloakAngularModule, KeycloakService} from 'keycloak-angular';\nimport {HTTP_INTERCEPTORS, HttpClient, provideHttpClient, withInterceptorsFromDi} from \"@angular/common/http\";\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { NotifierModule } from 'gramli-angular-notifier';\nimport { AppConfig } from './app.config';\nimport { AuthInterceptor } from './auth/auth.interceptor';\n\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: HttpClient) {\n    return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        NotifierModule,\n        ClarityModule,\n        MIRApiModule,\n        MSRApiModule,\n        SECOMApiModule,\n        KeycloakAngularModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient]\n            }\n        })\n    ],\n    providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initializeKeycloak,\n            multi: true,\n            deps: [KeycloakService]\n        },\n        {   provide: IR_BASE_PATH, useValue: AppConfig.IR_BASE_PATH },\n        {   provide: SR_BASE_PATH, useValue: AppConfig.SR_BASE_PATH },\n        {   provide: SECOM_BASE_PATH, useValue: AppConfig.SR_BASE_PATH },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: AuthInterceptor,\n            multi: true\n        },\n        provideHttpClient(withInterceptorsFromDi())\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {inject} from '@angular/core';\nimport {CanActivateFn, Router} from '@angular/router';\nimport {AuthService} from './auth.service';\n\nexport const authGuard: CanActivateFn = async (route, state) => {\n    const authService = inject(AuthService);\n    const router = inject(Router);\n    const authenticated = await authService.isAuthenticated();\n    if (!authenticated) {\n        await router.navigate(['/login']);\n        return false;\n    }\n\n    return authenticated;\n};\n","/*\n * Copyright (c) 2024 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AppConfig} from '../app.config';\nimport {KeycloakService} from 'keycloak-angular';\n\n\nexport const initializeKeycloak = (keycloak: KeycloakService) => {\n    return () =>\n        keycloak.init({\n            config: {\n                url: AppConfig.OIDC_BASE_PATH + '/auth/',\n                realm: 'MCP',\n                clientId: 'MCP-Portal',\n            },\n            enableBearerInterceptor: true,\n            bearerPrefix: 'Bearer',\n            initOptions: {\n                onLoad: 'check-sso',\n                silentCheckSsoRedirectUri: window.location.origin + '/assets/silent-check-sso.html',\n                checkLoginIframe: false,\n            }\n        });\n}","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          // Redirect to the login page\n          this.router.navigate(['/login']);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}","/*\n * Copyright (c) 2023 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Role } from \"../backend-api/identity-registry/model/role\";\n\nimport RoleNameEnum = Role.RoleNameEnum;\n\nexport enum AuthPermission {\n    User = 1 << 0,\n    OrgAdmin = 1 << 1,\n    SiteAdmin = 1 << 2,\n    UserAdmin = 1 << 3,\n    VesselAdmin = 1 << 4,\n    ServiceAdmin = 1 << 5,\n    DeviceAdmin = 1 << 6,\n    MMSAdmin = 1 << 7,\n    ApproveOrg = 1 << 8,\n    EntityAdmin = 1 << 9,\n}\n\nexport enum AuthPermissionForMSR {\n  User = 1 << 0,\n  OrgServiceAdmin = 1 << 1,\n  LedgerAdmin = 1 << 2,\n  MSRAdmin = 1 << 3,\n}\n\nexport const rolesToPermission = (roles: RoleNameEnum[]): AuthPermission => {\n    let permission = AuthPermission.User;\n    if (!roles) {\n      return permission;\n    }\n    for (const roleString of roles) {\n      switch (roleString as RoleNameEnum) {\n        case RoleNameEnum.ORGADMIN: {\n          permission = permission | AuthPermission.OrgAdmin;\n          break;\n        }\n        case RoleNameEnum.SITEADMIN: {\n            permission = permission | AuthPermission.SiteAdmin;\n          break;\n        }\n        case RoleNameEnum.USERADMIN: {\n            permission = permission | AuthPermission.UserAdmin;\n          break;\n        }\n        case RoleNameEnum.DEVICEADMIN: {\n            permission = permission | AuthPermission.DeviceAdmin;\n          break;\n        }\n        case RoleNameEnum.VESSELADMIN: {\n            permission = permission | AuthPermission.VesselAdmin;\n          break;\n        }\n        case RoleNameEnum.SERVICEADMIN: {\n            permission = permission | AuthPermission.ServiceAdmin;\n          break;\n        }\n        case RoleNameEnum.ENTITYADMIN: {\n            permission = permission | AuthPermission.EntityAdmin;\n          break;\n        }\n        case RoleNameEnum.MMSADMIN: {\n            permission = permission | AuthPermission.MMSAdmin;\n          break;\n        }\n        case RoleNameEnum.APPROVEORG: {\n            permission = permission | AuthPermission.ApproveOrg;\n          break;\n        }\n        default:\n          permission = permission | AuthPermission.User;\n      }\n    }\n    return permission;\n}\n\nexport class PermissionResolver {\n    static isSiteAdmin(permission: AuthPermission) {\n      return (permission & AuthPermission.SiteAdmin) > 0;\n    }\n  \n    static isOrgAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.OrgAdmin) > 0 || this.isSiteAdmin(permission)\n      );\n    }\n  \n    static isEntityAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.EntityAdmin) > 0 ||\n        this.isOrgAdmin(permission)\n      );\n    }\n  \n    static isUserAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.UserAdmin) > 0 ||\n        this.isEntityAdmin(permission)\n      );\n    }\n  \n    static isVesselAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.VesselAdmin) > 0 ||\n        this.isEntityAdmin(permission)\n      );\n    }\n  \n    static isDeviceAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.DeviceAdmin) > 0 ||\n        this.isEntityAdmin(permission)\n      );\n    }\n  \n    static isServiceAdmin(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.ServiceAdmin) > 0 ||\n        this.isEntityAdmin(permission)\n      );\n    }\n  \n    static canApproveOrg(permission: AuthPermission) {\n      return (\n        (permission & AuthPermission.ApproveOrg) > 0 ||\n        this.isSiteAdmin(permission)\n      );\n    }\n\n    static isMSRAdmin(roles: string[]) {\n      return roles && roles.length > 0 && roles.includes('admin');\n    }\n\n    static isLedgerAdmin(roles: string[]) {\n      return roles && roles.length > 0 && roles.includes('ledger_admin');\n    }\n\n    static isOrgServiceAdmin(roles: string[]) {\n      return roles && roles.length > 0 && roles.includes('service_admin');\n    }\n  }\n\n  export const hasAdminPermissionInMIR = (myPermission: AuthPermission, permissionRole: AuthPermission): boolean => {\n    switch (permissionRole) {\n      case AuthPermission.User:\n        return true;\n      case AuthPermission.SiteAdmin:\n        return PermissionResolver.isSiteAdmin(myPermission);\n      case AuthPermission.OrgAdmin:\n        return PermissionResolver.isOrgAdmin(myPermission);\n      case AuthPermission.ApproveOrg:\n        return PermissionResolver.canApproveOrg(myPermission);\n      case AuthPermission.EntityAdmin:\n        return PermissionResolver.isEntityAdmin(myPermission);\n      case AuthPermission.ServiceAdmin:\n        return PermissionResolver.isServiceAdmin(myPermission);\n      case AuthPermission.DeviceAdmin:\n        return PermissionResolver.isDeviceAdmin(myPermission);\n      case AuthPermission.VesselAdmin:\n        return PermissionResolver.isVesselAdmin(myPermission);\n      case AuthPermission.UserAdmin:\n        return PermissionResolver.isUserAdmin(myPermission);\n      default:\n        return false;\n          }\n  };","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { KeycloakService } from 'keycloak-angular';\nimport { AuthPermission, hasAdminPermissionInMIR, rolesToPermission } from './auth.permission';\nimport { ItemType } from '../common/menuType';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticatedSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isAuthenticated$: Observable<boolean> = this.isAuthenticatedSubject.asObservable();\n  \n  constructor(private keycloakService: KeycloakService, private router: Router) {}\n\n  public async login() {\n    const url = window.location;\n    await this.keycloakService.login({\n        redirectUri: url.protocol + '//' + url.host + '/pages'\n    });\n\n    // Check authentication status after login\n    //this.isAuthenticated();\n  }\n\n  public setAuthenticated(isAuthenticated: boolean) {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  public async logout() {\n    const url = window.location;\n    await this.keycloakService.logout(url.protocol + '//' + url.host + '/login');\n  }\n\n  public async isAuthenticated(): Promise<boolean> {\n    const authenticated = await this.keycloakService.isLoggedIn();\n    this.setAuthenticated(authenticated);\n    return Promise.resolve(authenticated);\n  }\n\n  public async getToken(): Promise<string> {\n    this.protectFromEmptyToken();\n    return this.keycloakService.getToken();\n  }\n\n  public async getOrgMrn(): Promise<string> {\n    this.protectFromEmptyToken();\n    return this.keycloakService.getKeycloakInstance().tokenParsed![\"org\"];\n  }\n\n  public async getUserName(): Promise<string> {\n    this.protectFromEmptyToken();\n    return this.keycloakService.getKeycloakInstance().tokenParsed![\"name\"];\n  }\n\n  public async getUserMrn(): Promise<string> {\n    this.protectFromEmptyToken();\n    return this.keycloakService.getKeycloakInstance().tokenParsed![\"mrn\"];\n  }\n\n  public async getUserRoles(): Promise<string[]> {\n    this.protectFromEmptyToken();\n    return this.keycloakService.getKeycloakInstance().tokenParsed![\"roles\"];\n  }\n\n  public async getUserPermission(): Promise<AuthPermission> {\n    this.protectFromEmptyToken();\n    return new Promise<AuthPermission>(async (resolve, reject) => {\n      const roles = await this.keycloakService.getKeycloakInstance().tokenParsed![\"roles\"];\n      if (!roles) {\n        resolve(AuthPermission.User);\n      }\n      resolve(rolesToPermission(roles));\n    });\n  }\n\n  public async hasPermission(context: ItemType, forMyOrg: boolean = false): Promise<boolean> {\n    this.protectFromEmptyToken();\n    return new Promise<boolean>(async (resolve, reject) => {\n      if (!this.keycloakService.isLoggedIn())\n        resolve(false);\n      this.getUserPermission().then((permission) => {\n        if (!permission) {\n          resolve(false);\n        }\n        if (hasAdminPermissionInMIR(permission, AuthPermission.SiteAdmin)) { // super admin\n          resolve(true);\n        } else if (context === ItemType.User) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.UserAdmin));\n        } else if (context === ItemType.Device) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.DeviceAdmin));\n        } else if (context === ItemType.Vessel) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.VesselAdmin));\n        } else if (context === ItemType.MMS) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.MMSAdmin));\n        } else if (context === ItemType.Service) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.ServiceAdmin));\n        } else if (forMyOrg && context === ItemType.Organization || context === ItemType.Role) {\n          // for my own organization management\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.OrgAdmin));\n        } else if (context === ItemType.Organization) {\n          resolve(hasAdminPermissionInMIR(permission, AuthPermission.SiteAdmin));\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  private protectFromEmptyToken = () => {\n    const tokenParsed = this.keycloakService.getKeycloakInstance().tokenParsed;\n    if (!tokenParsed) {\n      this.router.navigate(['/login']);\n      throw new Error('User is not authenticated');\n    }\n  }\n}","import {ModuleWithProviders, NgModule, Optional, SkipSelf} from '@angular/core';\nimport {Configuration} from './configuration';\nimport {HttpClient} from '@angular/common/http';\n\n\nimport {AgentControllerService} from './api/agentController.service';\nimport {CertificateControllerService} from './api/certificateController.service';\nimport {DeviceControllerService} from './api/deviceController.service';\nimport {LogoControllerService} from './api/logoController.service';\nimport {MmsControllerService} from './api/mmsController.service';\nimport {OrganizationControllerService} from './api/organizationController.service';\nimport {RoleControllerService} from './api/roleController.service';\nimport {ServiceControllerService} from './api/serviceController.service';\nimport {UserControllerService} from './api/userController.service';\nimport {VesselControllerService} from './api/vesselController.service';\nimport {VesselImageControllerService} from './api/vesselImageController.service';\nimport {AppConfig} from \"../../app.config\";\n\n@NgModule({\n    imports: [],\n    declarations: [],\n    exports: [],\n    providers: [\n        AgentControllerService,\n        CertificateControllerService,\n        DeviceControllerService,\n        LogoControllerService,\n        MmsControllerService,\n        {\n            provide: OrganizationControllerService,\n            useFactory: (http: HttpClient) => {\n                return new OrganizationControllerService(http, AppConfig.IR_BASE_PATH, new Configuration());\n            },\n            deps: [HttpClient]\n        },\n        RoleControllerService,\n        ServiceControllerService,\n        UserControllerService,\n        VesselControllerService,\n        VesselImageControllerService]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [{provide: Configuration, useFactory: configurationFactory}]\n        };\n    }\n\n    constructor(@Optional() @SkipSelf() parentModule: ApiModule,\n                @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Agent } from '../model/agent';\nimport { PageAgent } from '../model/pageAgent';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AgentControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Creates a new agent\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createAgent(body: Agent, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Agent>;\n    public createAgent(body: Agent, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Agent>>;\n    public createAgent(body: Agent, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Agent>>;\n    public createAgent(body: Agent, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createAgent.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createAgent.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Agent>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Deletes a given agent\n     * @param orgMrn \n     * @param agentId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteAgent(orgMrn: string, agentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteAgent(orgMrn: string, agentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteAgent(orgMrn: string, agentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteAgent(orgMrn: string, agentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteAgent.');\n        }\n\n        if (agentId === null || agentId === undefined) {\n            throw new Error('Required parameter agentId was null or undefined when calling deleteAgent.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns the list of all organization that can be acted on behalf of\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageAgent>;\n    public getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageAgent>>;\n    public getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageAgent>>;\n    public getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getActingOnBehalfOf.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageAgent>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/acting-on-behalf-of`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific agent\n     * @param orgMrn \n     * @param agentId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAgent(orgMrn: string, agentId: number, observe?: 'body', reportProgress?: boolean): Observable<Agent>;\n    public getAgent(orgMrn: string, agentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Agent>>;\n    public getAgent(orgMrn: string, agentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Agent>>;\n    public getAgent(orgMrn: string, agentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getAgent.');\n        }\n\n        if (agentId === null || agentId === undefined) {\n            throw new Error('Required parameter agentId was null or undefined when calling getAgent.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Agent>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Returns a page of agents for the given organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageAgent>;\n    public getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageAgent>>;\n    public getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageAgent>>;\n    public getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getAgents.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageAgent>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agents`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update an existing agent\n     * @param body \n     * @param orgMrn \n     * @param agentId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateAgent(body: Agent, orgMrn: string, agentId: number, observe?: 'body', reportProgress?: boolean): Observable<Agent>;\n    public updateAgent(body: Agent, orgMrn: string, agentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Agent>>;\n    public updateAgent(body: Agent, orgMrn: string, agentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Agent>>;\n    public updateAgent(body: Agent, orgMrn: string, agentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateAgent.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateAgent.');\n        }\n\n        if (agentId === null || agentId === undefined) {\n            throw new Error('Required parameter agentId was null or undefined when calling updateAgent.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Agent>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/agent/${encodeURIComponent(String(agentId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './agentController.service';\nimport { AgentControllerService } from './agentController.service';\nexport * from './certificateController.service';\nimport { CertificateControllerService } from './certificateController.service';\nexport * from './deviceController.service';\nimport { DeviceControllerService } from './deviceController.service';\nexport * from './logoController.service';\nimport { LogoControllerService } from './logoController.service';\nexport * from './mmsController.service';\nimport { MmsControllerService } from './mmsController.service';\nexport * from './organizationController.service';\nimport { OrganizationControllerService } from './organizationController.service';\nexport * from './roleController.service';\nimport { RoleControllerService } from './roleController.service';\nexport * from './serviceController.service';\nimport { ServiceControllerService } from './serviceController.service';\nexport * from './userController.service';\nimport { UserControllerService } from './userController.service';\nexport * from './vesselController.service';\nimport { VesselControllerService } from './vesselController.service';\nexport * from './vesselImageController.service';\nimport { VesselImageControllerService } from './vesselImageController.service';\nexport const APIS = [AgentControllerService, CertificateControllerService, DeviceControllerService, LogoControllerService, MmsControllerService, OrganizationControllerService, RoleControllerService, ServiceControllerService, UserControllerService, VesselControllerService, VesselImageControllerService];\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CertificateControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Get the CRL of the specified CA\n     * @param caAlias \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCRL(caAlias: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getCRL(caAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getCRL(caAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getCRL(caAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caAlias === null || caAlias === undefined) {\n            throw new Error('Required parameter caAlias was null or undefined when calling getCRL.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/x-pem-file'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/certificates/crl/${encodeURIComponent(String(caAlias))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * GET mapping for OCSP\n     * @param caAlias \n     * @param ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOCSP(caAlias: string, ocspRequest: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getOCSP(caAlias: string, ocspRequest: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getOCSP(caAlias: string, ocspRequest: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getOCSP(caAlias: string, ocspRequest: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caAlias === null || caAlias === undefined) {\n            throw new Error('Required parameter caAlias was null or undefined when calling getOCSP.');\n        }\n\n        if (ocspRequest === null || ocspRequest === undefined) {\n            throw new Error('Required parameter ocspRequest was null or undefined when calling getOCSP.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/ocsp-response'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/certificates/ocsp/${encodeURIComponent(String(caAlias))}/${encodeURIComponent(String(ocspRequest))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * POST mapping for OCSP\n     * @param body OCSP request that is encoded as defined in RFC 6960 Appendix A.1\n     * @param caAlias \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postOCSP(body: string, caAlias: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public postOCSP(body: string, caAlias: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public postOCSP(body: string, caAlias: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public postOCSP(body: string, caAlias: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling postOCSP.');\n        }\n\n        if (caAlias === null || caAlias === undefined) {\n            throw new Error('Required parameter caAlias was null or undefined when calling postOCSP.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/ocsp-response'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/ocsp-request'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/certificates/ocsp/${encodeURIComponent(String(caAlias))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { Device } from '../model/device';\nimport { PageDevice } from '../model/pageDevice';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DeviceControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new device identity\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createDevice(body: Device, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Device>;\n    public createDevice(body: Device, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Device>>;\n    public createDevice(body: Device, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Device>>;\n    public createDevice(body: Device, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createDevice.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createDevice.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Device>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a device identity\n     * @param orgMrn \n     * @param deviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteDevice(orgMrn: string, deviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteDevice(orgMrn: string, deviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteDevice(orgMrn: string, deviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteDevice(orgMrn: string, deviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteDevice.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling deleteDevice.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific device identity\n     * @param orgMrn \n     * @param deviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDevice(orgMrn: string, deviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Device>;\n    public getDevice(orgMrn: string, deviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Device>>;\n    public getDevice(orgMrn: string, deviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Device>>;\n    public getDevice(orgMrn: string, deviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getDevice.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling getDevice.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Device>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the certificate of the specified device with the specified serial number\n     * @param orgMrn \n     * @param deviceMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getDeviceCert.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling getDeviceCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of device identities of the specified organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageDevice>;\n    public getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageDevice>>;\n    public getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageDevice>>;\n    public getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationDevices.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageDevice>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/devices`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new device certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param deviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newDeviceCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newDeviceCertFromCsr.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling newDeviceCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the device certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param deviceMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeDeviceCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeDeviceCert.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling revokeDeviceCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeDeviceCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update an existing device identity\n     * @param body \n     * @param orgMrn \n     * @param deviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateDevice(body: Device, orgMrn: string, deviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateDevice(body: Device, orgMrn: string, deviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateDevice(body: Device, orgMrn: string, deviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateDevice(body: Device, orgMrn: string, deviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateDevice.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateDevice.');\n        }\n\n        if (deviceMrn === null || deviceMrn === undefined) {\n            throw new Error('Required parameter deviceMrn was null or undefined when calling updateDevice.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/device/${encodeURIComponent(String(deviceMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { OrgMrnLogoBody } from '../model/orgMrnLogoBody';\nimport { OrgMrnLogoBody1 } from '../model/orgMrnLogoBody1';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LogoControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new organization logo using POST\n     * @param orgMrn \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createLogoPost(orgMrn: string, body?: OrgMrnLogoBody, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createLogoPost(orgMrn: string, body?: OrgMrnLogoBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createLogoPost(orgMrn: string, body?: OrgMrnLogoBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createLogoPost(orgMrn: string, body?: OrgMrnLogoBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createLogoPost.');\n        }\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'image/png',\n            'image/jpeg'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/logo`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete an organization logo\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteLogo(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteLogo(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteLogo(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteLogo(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteLogo.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/logo`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the logo of the given organization\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLogo(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getLogo(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getLogo(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getLogo(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getLogo.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'image/png',\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/logo`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update an existing organization logo or create it if none already exists\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateLogoPut(body: string, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateLogoPut(body: string, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateLogoPut(body: string, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateLogoPut(body: string, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateLogoPut.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateLogoPut.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'image/png',\n            'image/jpeg'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/logo`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { MMS } from '../model/mMS';\nimport { PageMMS } from '../model/pageMMS';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class MmsControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Creates a new MMS\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createMMS(body: MMS, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<MMS>;\n    public createMMS(body: MMS, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MMS>>;\n    public createMMS(body: MMS, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MMS>>;\n    public createMMS(body: MMS, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createMMS.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createMMS.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<MMS>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete an MMS identity\n     * @param orgMrn \n     * @param mmsMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteMMS(orgMrn: string, mmsMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteMMS(orgMrn: string, mmsMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteMMS(orgMrn: string, mmsMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteMMS(orgMrn: string, mmsMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteMMS.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling deleteMMS.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific MMS identity\n     * @param orgMrn \n     * @param mmsMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMMS(orgMrn: string, mmsMrn: string, observe?: 'body', reportProgress?: boolean): Observable<MMS>;\n    public getMMS(orgMrn: string, mmsMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MMS>>;\n    public getMMS(orgMrn: string, mmsMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MMS>>;\n    public getMMS(orgMrn: string, mmsMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getMMS.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling getMMS.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<MMS>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the certificate of the specified MMS with the specified serial number\n     * @param orgMrn \n     * @param mmsMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMMSCert(orgMrn: string, mmsMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getMMSCert(orgMrn: string, mmsMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getMMSCert(orgMrn: string, mmsMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getMMSCert(orgMrn: string, mmsMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getMMSCert.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling getMMSCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getMMSCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of MMS identities belonging to the given organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationMMSes(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageMMS>;\n    public getOrganizationMMSes(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageMMS>>;\n    public getOrganizationMMSes(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageMMS>>;\n    public getOrganizationMMSes(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationMMSes.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageMMS>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mmses`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new MMS certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param mmsMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newMMSCertFromCsr(body: string, orgMrn: string, mmsMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newMMSCertFromCsr(body: string, orgMrn: string, mmsMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newMMSCertFromCsr(body: string, orgMrn: string, mmsMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newMMSCertFromCsr(body: string, orgMrn: string, mmsMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newMMSCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newMMSCertFromCsr.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling newMMSCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the MMS certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param mmsMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeMMSCert(body: CertificateRevocation, orgMrn: string, mmsMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeMMSCert(body: CertificateRevocation, orgMrn: string, mmsMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeMMSCert(body: CertificateRevocation, orgMrn: string, mmsMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeMMSCert(body: CertificateRevocation, orgMrn: string, mmsMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeMMSCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeMMSCert.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling revokeMMSCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeMMSCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update an existing MMS identity\n     * @param body \n     * @param orgMrn \n     * @param mmsMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateMMS(body: MMS, orgMrn: string, mmsMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateMMS(body: MMS, orgMrn: string, mmsMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateMMS(body: MMS, orgMrn: string, mmsMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateMMS(body: MMS, orgMrn: string, mmsMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateMMS.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateMMS.');\n        }\n\n        if (mmsMrn === null || mmsMrn === undefined) {\n            throw new Error('Required parameter mmsMrn was null or undefined when calling updateMMS.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/mms/${encodeURIComponent(String(mmsMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { Organization } from '../model/organization';\nimport { PageOrganization } from '../model/pageOrganization';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrganizationControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Apply for getting your organization registered\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public applyOrganization(body: Organization, observe?: 'body', reportProgress?: boolean): Observable<Organization>;\n    public applyOrganization(body: Organization, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organization>>;\n    public applyOrganization(body: Organization, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organization>>;\n    public applyOrganization(body: Organization, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling applyOrganization.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Organization>('post',`${this.basePath}/oidc/api/org/apply`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Approve the given applying organization\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public approveOrganization(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Organization>;\n    public approveOrganization(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organization>>;\n    public approveOrganization(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organization>>;\n    public approveOrganization(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling approveOrganization.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Organization>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/approve`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific organization\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrg(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteOrg(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteOrg(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteOrg(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteOrg.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the organization certificate with the given serial number\n     * @param orgMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgCert(orgMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getOrgCert(orgMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getOrgCert(orgMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getOrgCert(orgMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrgCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getOrgCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of registered organizations\n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganization(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageOrganization>;\n    public getOrganization(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrganization>>;\n    public getOrganization(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrganization>>;\n    public getOrganization(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageOrganization>('get',`${this.basePath}/oidc/api/orgs`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific organization based on MRN\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganization1(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Organization>;\n    public getOrganization1(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organization>>;\n    public getOrganization1(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organization>>;\n    public getOrganization1(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganization1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Organization>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific organization based on ID\n     * @param orgId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationById(orgId: number, observe?: 'body', reportProgress?: boolean): Observable<Organization>;\n    public getOrganizationById(orgId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organization>>;\n    public getOrganizationById(orgId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organization>>;\n    public getOrganizationById(orgId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgId === null || orgId === undefined) {\n            throw new Error('Required parameter orgId was null or undefined when calling getOrganizationById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Organization>('get',`${this.basePath}/oidc/api/org/id/${encodeURIComponent(String(orgId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of organizations that have not yet been approved\n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUnapprovedOrganizations(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageOrganization>;\n    public getUnapprovedOrganizations(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrganization>>;\n    public getUnapprovedOrganizations(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrganization>>;\n    public getUnapprovedOrganizations(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageOrganization>('get',`${this.basePath}/oidc/api/org/unapprovedorgs`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new organization certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newOrgCertFromCsr(body: string, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newOrgCertFromCsr(body: string, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newOrgCertFromCsr(body: string, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newOrgCertFromCsr(body: string, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newOrgCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newOrgCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the organization certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeOrgCert(body: CertificateRevocation, orgMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeOrgCert(body: CertificateRevocation, orgMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeOrgCert(body: CertificateRevocation, orgMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeOrgCert(body: CertificateRevocation, orgMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeOrgCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeOrgCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeOrgCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a specific organization\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOrganization(body: Organization, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateOrganization(body: Organization, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateOrganization(body: Organization, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateOrganization(body: Organization, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateOrganization.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateOrganization.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Role } from '../model/role';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class RoleControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new role mapping\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createRole(body: Role, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Role>;\n    public createRole(body: Role, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Role>>;\n    public createRole(body: Role, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Role>>;\n    public createRole(body: Role, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createRole.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createRole.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Role>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific role mapping\n     * @param orgMrn \n     * @param roleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteRole(orgMrn: string, roleId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteRole(orgMrn: string, roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteRole(orgMrn: string, roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteRole(orgMrn: string, roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteRole.');\n        }\n\n        if (roleId === null || roleId === undefined) {\n            throw new Error('Required parameter roleId was null or undefined when calling deleteRole.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role/${encodeURIComponent(String(roleId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of available roles\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAvailableRoles(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;\n    public getAvailableRoles(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;\n    public getAvailableRoles(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;\n    public getAvailableRoles(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getAvailableRoles.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<string>>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role/available-roles`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of roles of the requesting user\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMyRole(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;\n    public getMyRole(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;\n    public getMyRole(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;\n    public getMyRole(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getMyRole.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<string>>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role/myroles`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific role mapping\n     * @param orgMrn \n     * @param roleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRole(orgMrn: string, roleId: number, observe?: 'body', reportProgress?: boolean): Observable<Role>;\n    public getRole(orgMrn: string, roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Role>>;\n    public getRole(orgMrn: string, roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Role>>;\n    public getRole(orgMrn: string, roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getRole.');\n        }\n\n        if (roleId === null || roleId === undefined) {\n            throw new Error('Required parameter roleId was null or undefined when calling getRole.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Role>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role/${encodeURIComponent(String(roleId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the list of role mappings for the specified organization\n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRoles(orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Role>>;\n    public getRoles(orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Role>>>;\n    public getRoles(orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Role>>>;\n    public getRoles(orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getRoles.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Role>>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/roles`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a specific role mapping\n     * @param body \n     * @param orgMrn \n     * @param roleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateRole(body: Role, orgMrn: string, roleId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateRole(body: Role, orgMrn: string, roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateRole(body: Role, orgMrn: string, roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateRole(body: Role, orgMrn: string, roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateRole.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateRole.');\n        }\n\n        if (roleId === null || roleId === undefined) {\n            throw new Error('Required parameter roleId was null or undefined when calling updateRole.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/role/${encodeURIComponent(String(roleId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { PageService } from '../model/pageService';\nimport { Pageable } from '../model/pageable';\nimport { Service } from '../model/service';\nimport { ServicePatch } from '../model/servicePatch';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ServiceControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new service identity\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createService(body: Service, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Service>;\n    public createService(body: Service, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Service>>;\n    public createService(body: Service, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Service>>;\n    public createService(body: Service, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createService.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createService.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Service>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific service identity\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteService(orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteService(orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteService(orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteService(orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteService.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteService.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling deleteService.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific service identity\n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteService1(orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteService1(orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteService1(orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteService1(orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteService1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling deleteService1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of service identities of the specified organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageService>;\n    public getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageService>>;\n    public getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageService>>;\n    public getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationServices.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageService>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/services`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the service identity with the given MRN. If a direct match cannot be found, the service that was last created and has the given MRN as a prefix of its MRN followed by an additional namespace will be returned.\n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getService(orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Service>;\n    public getService(orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Service>>;\n    public getService(orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Service>>;\n    public getService(orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getService.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getService.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Service>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the service identity certificate with the given serial number\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceCert.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceCert.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getServiceCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getServiceCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the service identity certificate with the given serial number\n     * @param orgMrn \n     * @param serviceMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceCert1(orgMrn: string, serviceMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getServiceCert1(orgMrn: string, serviceMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getServiceCert1(orgMrn: string, serviceMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getServiceCert1(orgMrn: string, serviceMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceCert1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceCert1.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getServiceCert1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the Keycloak JBoss XML configuration for the specified service if it exists\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXml.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXml.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getServiceJbossXml.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/jbossxml`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the Keycloak JBoss XML configuration for the specified service if it exists\n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceJbossXml1(orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getServiceJbossXml1(orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getServiceJbossXml1(orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getServiceJbossXml1(orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceJbossXml1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceJbossXml1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/jbossxml`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the Keycloak JSON configuration for the specified service if it exists\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJson.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJson.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getServiceKeycloakJson.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/keycloakjson`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the Keycloak JSON configuration for the specified service if it exists\n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceKeycloakJson1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJson1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/keycloakjson`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the service identity with the given MRN and version\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceVersion(orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<Service>;\n    public getServiceVersion(orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Service>>;\n    public getServiceVersion(orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Service>>;\n    public getServiceVersion(orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServiceVersion.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServiceVersion.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getServiceVersion.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Service>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of service identities with a given MRN prefix\n     * @param orgMrn \n     * @param serviceMrn \n     * @param pageable \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServices(orgMrn: string, serviceMrn: string, pageable: Pageable, observe?: 'body', reportProgress?: boolean): Observable<PageService>;\n    public getServices(orgMrn: string, serviceMrn: string, pageable: Pageable, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageService>>;\n    public getServices(orgMrn: string, serviceMrn: string, pageable: Pageable, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageService>>;\n    public getServices(orgMrn: string, serviceMrn: string, pageable: Pageable, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getServices.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling getServices.');\n        }\n\n        if (pageable === null || pageable === undefined) {\n            throw new Error('Required parameter pageable was null or undefined when calling getServices.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (pageable !== undefined && pageable !== null) {\n            queryParameters = queryParameters.set('pageable', <any>pageable);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageService>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/services/${encodeURIComponent(String(serviceMrn))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update the MRN of a Service entity that currently has an instance version registered and delete the instance version entirely. Note that if the new MRN is different from the current MRN of the Service this operation will revoke all certificates that are currently associated with the Service entity. Also note that the result of performing this operation cannot be reverted.\n     * @param body \n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public migrateServiceMrn(body: ServicePatch, orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public migrateServiceMrn(body: ServicePatch, orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public migrateServiceMrn(body: ServicePatch, orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public migrateServiceMrn(body: ServicePatch, orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling migrateServiceMrn.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling migrateServiceMrn.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling migrateServiceMrn.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling migrateServiceMrn.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('patch',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/migrate`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * DEPRECATED: Certificates cannot be issued for a service with a version until it has been migrated using the the endpoint at /api/org/{orgMrn}/service/{serviceMrn}/{version}/migrate. This endpoint will return an error if called.\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newServiceCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertFromCsr.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertFromCsr.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling newServiceCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new service identity certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newServiceCertFromCsr1.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newServiceCertFromCsr1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling newServiceCertFromCsr1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the service identity certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeServiceCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCert.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCert.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling revokeServiceCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the service identity certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param serviceMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeServiceCert1.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeServiceCert1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling revokeServiceCert1.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeServiceCert1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * DEPRECATED: A service with a version cannot be updated until it has been migrated using the endpoint at /api/org/{orgMrn}/service/{serviceMrn}/{version}/migrate. This endpoint will return an error if called.\n     * @param body \n     * @param orgMrn \n     * @param serviceMrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateService.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateService.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling updateService.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling updateService.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}/${encodeURIComponent(String(version))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a specific service identity\n     * @param body \n     * @param orgMrn \n     * @param serviceMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateService1(body: Service, orgMrn: string, serviceMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateService1(body: Service, orgMrn: string, serviceMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateService1(body: Service, orgMrn: string, serviceMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateService1(body: Service, orgMrn: string, serviceMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateService1.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateService1.');\n        }\n\n        if (serviceMrn === null || serviceMrn === undefined) {\n            throw new Error('Required parameter serviceMrn was null or undefined when calling updateService1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/service/${encodeURIComponent(String(serviceMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { PageUser } from '../model/pageUser';\nimport { User } from '../model/user';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new user identity\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUser(body: User, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<User>;\n    public createUser(body: User, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;\n    public createUser(body: User, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;\n    public createUser(body: User, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createUser.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<User>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific user identity\n     * @param orgMrn \n     * @param userMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUser(orgMrn: string, userMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUser(orgMrn: string, userMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUser(orgMrn: string, userMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUser(orgMrn: string, userMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteUser.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling deleteUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of user identities of the specified organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageUser>;\n    public getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageUser>>;\n    public getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageUser>>;\n    public getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationUsers.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageUser>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/users`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific user identity\n     * @param orgMrn \n     * @param userMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUser(orgMrn: string, userMrn: string, observe?: 'body', reportProgress?: boolean): Observable<User>;\n    public getUser(orgMrn: string, userMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;\n    public getUser(orgMrn: string, userMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;\n    public getUser(orgMrn: string, userMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getUser.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling getUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<User>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the user identity certificate with the given serial number\n     * @param orgMrn \n     * @param userMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserCert(orgMrn: string, userMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getUserCert(orgMrn: string, userMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getUserCert(orgMrn: string, userMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getUserCert(orgMrn: string, userMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getUserCert.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling getUserCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getUserCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new user identity certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param userMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newUserCertFromCsr(body: string, orgMrn: string, userMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newUserCertFromCsr(body: string, orgMrn: string, userMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newUserCertFromCsr(body: string, orgMrn: string, userMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newUserCertFromCsr(body: string, orgMrn: string, userMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newUserCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newUserCertFromCsr.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling newUserCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the service identity certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param userMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeUserCert(body: CertificateRevocation, orgMrn: string, userMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeUserCert(body: CertificateRevocation, orgMrn: string, userMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeUserCert(body: CertificateRevocation, orgMrn: string, userMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeUserCert(body: CertificateRevocation, orgMrn: string, userMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeUserCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeUserCert.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling revokeUserCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeUserCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a specific user identity\n     * @param body \n     * @param orgMrn \n     * @param userMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUser(body: User, orgMrn: string, userMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateUser(body: User, orgMrn: string, userMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateUser(body: User, orgMrn: string, userMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateUser(body: User, orgMrn: string, userMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUser.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateUser.');\n        }\n\n        if (userMrn === null || userMrn === undefined) {\n            throw new Error('Required parameter userMrn was null or undefined when calling updateUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/user/${encodeURIComponent(String(userMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Certificate } from '../model/certificate';\nimport { CertificateRevocation } from '../model/certificateRevocation';\nimport { PageVessel } from '../model/pageVessel';\nimport { Service } from '../model/service';\nimport { Vessel } from '../model/vessel';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class VesselControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new vessel identity\n     * @param body \n     * @param orgMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createVessel(body: Vessel, orgMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Vessel>;\n    public createVessel(body: Vessel, orgMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vessel>>;\n    public createVessel(body: Vessel, orgMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vessel>>;\n    public createVessel(body: Vessel, orgMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createVessel.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createVessel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Vessel>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete a specific vessel identity\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVessel(orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVessel(orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVessel(orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVessel(orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVessel.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVessel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a page of vessel identities of the specified organization\n     * @param orgMrn \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrganizationVessels(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageVessel>;\n    public getOrganizationVessels(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageVessel>>;\n    public getOrganizationVessels(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageVessel>>;\n    public getOrganizationVessels(orgMrn: string, page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getOrganizationVessels.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<PageVessel>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessels`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get a specific vessel identity\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVessel(orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Vessel>;\n    public getVessel(orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vessel>>;\n    public getVessel(orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vessel>>;\n    public getVessel(orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getVessel.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling getVessel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Vessel>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the vessel identity certificate with the given serial number\n     * @param orgMrn \n     * @param vesselMrn \n     * @param serialNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVesselCert(orgMrn: string, vesselMrn: string, serialNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Certificate>;\n    public getVesselCert(orgMrn: string, vesselMrn: string, serialNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Certificate>>;\n    public getVesselCert(orgMrn: string, vesselMrn: string, serialNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Certificate>>;\n    public getVesselCert(orgMrn: string, vesselMrn: string, serialNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselCert.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselCert.');\n        }\n\n        if (serialNumber === null || serialNumber === undefined) {\n            throw new Error('Required parameter serialNumber was null or undefined when calling getVesselCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Certificate>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/certificate/${encodeURIComponent(String(serialNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the set of service identities that are linked to the specified vessel identity\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVesselServices(orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Service>>;\n    public getVesselServices(orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Service>>>;\n    public getVesselServices(orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Service>>>;\n    public getVesselServices(orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselServices.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselServices.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Service>>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/services`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create a new vessel identity certificate using CSR\n     * @param body A PEM encoded PKCS#10 CSR\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newVesselCertFromCsr(body: string, orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public newVesselCertFromCsr(body: string, orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public newVesselCertFromCsr(body: string, orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public newVesselCertFromCsr(body: string, orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling newVesselCertFromCsr.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling newVesselCertFromCsr.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling newVesselCertFromCsr.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/pem-certificate-chain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-pem-file',\n            'text/plain'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<string>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/certificate/issue-new/csr`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Revoke the vessel identity certificate with the given serial number\n     * @param body \n     * @param orgMrn \n     * @param vesselMrn \n     * @param certId The serial number of the certificate given in decimal\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public revokeVesselCert(body: CertificateRevocation, orgMrn: string, vesselMrn: string, certId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public revokeVesselCert(body: CertificateRevocation, orgMrn: string, vesselMrn: string, certId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public revokeVesselCert(body: CertificateRevocation, orgMrn: string, vesselMrn: string, certId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public revokeVesselCert(body: CertificateRevocation, orgMrn: string, vesselMrn: string, certId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling revokeVesselCert.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling revokeVesselCert.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling revokeVesselCert.');\n        }\n\n        if (certId === null || certId === undefined) {\n            throw new Error('Required parameter certId was null or undefined when calling revokeVesselCert.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/certificate/${encodeURIComponent(String(certId))}/revoke`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Update a specific vessel identity\n     * @param body \n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateVessel(body: Vessel, orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateVessel(body: Vessel, orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateVessel(body: Vessel, orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateVessel(body: Vessel, orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateVessel.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateVessel.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling updateVessel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { VesselMrnVesselImageBody } from '../model/vesselMrnVesselImageBody';\nimport { VesselMrnVesselImageBody1 } from '../model/vesselMrnVesselImageBody1';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class VesselImageControllerService {\n\n    protected basePath = 'https://test-api.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * Create a new vessel image using POST\n     * @param orgMrn \n     * @param vesselMrn \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselImagePost.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling createVesselImagePost.');\n        }\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'image/png',\n            'image/jpeg'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/vesselImage`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Delete the image of a specified vessel\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVesselImage(orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVesselImage(orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVesselImage(orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVesselImage(orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVesselImage.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVesselImage.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/vesselImage`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Get the image of a specified vessel\n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVesselImage(orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getVesselImage(orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getVesselImage(orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getVesselImage(orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselImage.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselImage.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'image/png',\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/vesselImage`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * Create or update a vessel image using PUT\n     * @param body \n     * @param orgMrn \n     * @param vesselMrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateVesselImagePut(body: string, orgMrn: string, vesselMrn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateVesselImagePut(body: string, orgMrn: string, vesselMrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateVesselImagePut(body: string, orgMrn: string, vesselMrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateVesselImagePut(body: string, orgMrn: string, vesselMrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateVesselImagePut.');\n        }\n\n        if (orgMrn === null || orgMrn === undefined) {\n            throw new Error('Required parameter orgMrn was null or undefined when calling updateVesselImagePut.');\n        }\n\n        if (vesselMrn === null || vesselMrn === undefined) {\n            throw new Error('Required parameter vesselMrn was null or undefined when calling updateVesselImagePut.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'image/png',\n            'image/jpeg'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/oidc/api/org/${encodeURIComponent(String(orgMrn))}/vessel/${encodeURIComponent(String(vesselMrn))}/vesselImage`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    override encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n\n    override encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object for representing a role that an agent is allowed to have\n */\nexport interface AllowedAgentRole { \n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * The role that you want the agent to be allowed to have\n     */\n    roleName: AllowedAgentRole.RoleNameEnum;\n}\nexport namespace AllowedAgentRole {\n    export type RoleNameEnum = 'ROLE_ORG_ADMIN' | 'ROLE_ENTITY_ADMIN' | 'ROLE_USER_ADMIN' | 'ROLE_VESSEL_ADMIN' | 'ROLE_SERVICE_ADMIN' | 'ROLE_DEVICE_ADMIN' | 'ROLE_MMS_ADMIN' | 'ROLE_USER';\n    export const RoleNameEnum = {\n        ORGADMIN: 'ROLE_ORG_ADMIN' as RoleNameEnum,\n        ENTITYADMIN: 'ROLE_ENTITY_ADMIN' as RoleNameEnum,\n        USERADMIN: 'ROLE_USER_ADMIN' as RoleNameEnum,\n        VESSELADMIN: 'ROLE_VESSEL_ADMIN' as RoleNameEnum,\n        SERVICEADMIN: 'ROLE_SERVICE_ADMIN' as RoleNameEnum,\n        DEVICEADMIN: 'ROLE_DEVICE_ADMIN' as RoleNameEnum,\n        MMSADMIN: 'ROLE_MMS_ADMIN' as RoleNameEnum,\n        USER: 'ROLE_USER' as RoleNameEnum\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object representing a certificate\n */\nexport interface Certificate { \n    /**\n     * The ID of the entity in the form of a sequential integer\n     */\n    readonly id?: number;\n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * The certificate in PEM format\n     */\n    readonly certificate?: string;\n    /**\n     * When the certificate is valid from\n     */\n    readonly start?: Date;\n    /**\n     * When the certificate is valid until\n     */\n    readonly end?: Date;\n    /**\n     * The serial number of the certificate\n     */\n    readonly serialNumber?: number;\n    /**\n     * The base64 encoded SHA-256 thumbprint of the certificate\n     */\n    readonly thumbprint?: string;\n    /**\n     * Whether the certificate has been revoked\n     */\n    readonly revoked?: boolean;\n    /**\n     * The time of revocation of the certificate\n     */\n    readonly revokedAt?: Date;\n    /**\n     * The revocation reason\n     */\n    readonly revokeReason?: string;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object representing a certificate revocation\n */\nexport interface CertificateRevocation { \n    /**\n     * The date the certificate revocation should be activated.\n     */\n    revokedAt: Date;\n    /**\n     * The reason the certificates has been revoked\n     */\n    revocationReason: CertificateRevocation.RevocationReasonEnum;\n}\nexport namespace CertificateRevocation {\n    export type RevocationReasonEnum = 'unspecified' | 'keycompromise' | 'cacompromise' | 'affiliationchanged' | 'superseded' | 'cessationofoperation' | 'certificatehold' | 'removefromcrl' | 'privilegewithdrawn' | 'aacompromise';\n    export const RevocationReasonEnum = {\n        Unspecified: 'unspecified' as RevocationReasonEnum,\n        Keycompromise: 'keycompromise' as RevocationReasonEnum,\n        Cacompromise: 'cacompromise' as RevocationReasonEnum,\n        Affiliationchanged: 'affiliationchanged' as RevocationReasonEnum,\n        Superseded: 'superseded' as RevocationReasonEnum,\n        Cessationofoperation: 'cessationofoperation' as RevocationReasonEnum,\n        Certificatehold: 'certificatehold' as RevocationReasonEnum,\n        Removefromcrl: 'removefromcrl' as RevocationReasonEnum,\n        Privilegewithdrawn: 'privilegewithdrawn' as RevocationReasonEnum,\n        Aacompromise: 'aacompromise' as RevocationReasonEnum\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object representing an identity provider attribute\n */\nexport interface IdentityProviderAttribute { \n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * OpenId Connect or SAML2 attribute name\n     */\n    attributeName: IdentityProviderAttribute.AttributeNameEnum;\n    /**\n     * OpenId Connect or SAML2 attribute value\n     */\n    attributeValue: string;\n}\nexport namespace IdentityProviderAttribute {\n    export type AttributeNameEnum = 'importUrl, validateSignature, signingCertificate, singleLogoutServiceUrl, postBindingResponse, postBindingAuthnRequest, singleSignOnServiceUrl, wantAuthnRequestsSigned, userInfoUrl, tokenUrl, authorizationUrl, logoutUrl, issuer, publicKeySignatureVerifier, clientId, clientSecret,providerType, firstNameAttr, lastNameAttr, emailAttr, usernameAttr, permissionsAttr';\n    export const AttributeNameEnum = {\n        ImportUrlValidateSignatureSigningCertificateSingleLogoutServiceUrlPostBindingResponsePostBindingAuthnRequestSingleSignOnServiceUrlWantAuthnRequestsSignedUserInfoUrlTokenUrlAuthorizationUrlLogoutUrlIssuerPublicKeySignatureVerifierClientIdClientSecretproviderTypeFirstNameAttrLastNameAttrEmailAttrUsernameAttrPermissionsAttr: 'importUrl, validateSignature, signingCertificate, singleLogoutServiceUrl, postBindingResponse, postBindingAuthnRequest, singleSignOnServiceUrl, wantAuthnRequestsSigned, userInfoUrl, tokenUrl, authorizationUrl, logoutUrl, issuer, publicKeySignatureVerifier, clientId, clientSecret,providerType, firstNameAttr, lastNameAttr, emailAttr, usernameAttr, permissionsAttr' as AttributeNameEnum\n    };\n}","export * from './agent';\nexport * from './allowedAgentRole';\nexport * from './certificate';\nexport * from './certificateRevocation';\nexport * from './device';\nexport * from './identityProviderAttribute';\nexport * from './mMS';\nexport * from './orgMrnLogoBody';\nexport * from './orgMrnLogoBody1';\nexport * from './organization';\nexport * from './pageAgent';\nexport * from './pageDevice';\nexport * from './pageMMS';\nexport * from './pageOrganization';\nexport * from './pageService';\nexport * from './pageUser';\nexport * from './pageVessel';\nexport * from './pageable';\nexport * from './pageableObject';\nexport * from './role';\nexport * from './service';\nexport * from './servicePatch';\nexport * from './sortObject';\nexport * from './user';\nexport * from './vessel';\nexport * from './vesselAttribute';\nexport * from './vesselMrnVesselImageBody';\nexport * from './vesselMrnVesselImageBody1';\n","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface OrgMrnLogoBody { \n    logo: Blob;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface OrgMrnLogoBody1 { \n    logo: Blob;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Certificate } from './certificate';\nimport { IdentityProviderAttribute } from './identityProviderAttribute';\n\n/**\n * Model object representing an organization\n */\nexport interface Organization { \n    /**\n     * The ID of the entity in the form of a sequential integer\n     */\n    readonly id?: number;\n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * The name of the organization\n     */\n    name: string;\n    /**\n     * Maritime Connectivity Platform Maritime Resource Name\n     */\n    mrn: string;\n    /**\n     * Subsidiary Maritime Resource Name\n     */\n    mrnSubsidiary?: string;\n    /**\n     * URL of the MMS that the organization is registered with\n     */\n    homeMMSUrl?: string;\n    /**\n     * The email of the organization\n     */\n    email: string;\n    /**\n     * The URL of the organization's website\n     */\n    url: string;\n    /**\n     * The address of the organization\n     */\n    address: string;\n    /**\n     * The country that the organization is located in\n     */\n    country: string;\n    /**\n     * Type of identity federation used by organization\n     */\n    federationType?: Organization.FederationTypeEnum;\n    /**\n     * The set of certificates of the organization. Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\n     */\n    readonly certificates?: Array<Certificate>;\n    /**\n     * The identity provider attributes of the organization\n     */\n    identityProviderAttributes?: Array<IdentityProviderAttribute>;\n}\nexport namespace Organization {\n    export type FederationTypeEnum = 'test-idp' | 'own-idp' | 'external-idp';\n    export const FederationTypeEnum = {\n        TestIdp: 'test-idp' as FederationTypeEnum,\n        OwnIdp: 'own-idp' as FederationTypeEnum,\n        ExternalIdp: 'external-idp' as FederationTypeEnum\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface Pageable { \n    page?: number;\n    size?: number;\n    sort?: Array<string>;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object representing a role\n */\nexport interface Role { \n    /**\n     * The ID of the entity in the form of a sequential integer\n     */\n    readonly id?: number;\n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * The role that should be mapped to the permission\n     */\n    roleName: Role.RoleNameEnum;\n    /**\n     * The permission that should be mapped to the role\n     */\n    permission: string;\n    idOrganization?: number;\n}\nexport namespace Role {\n    export enum RoleNameEnum {\n        SITEADMIN = 'ROLE_SITE_ADMIN',\n        ORGADMIN = 'ROLE_ORG_ADMIN',\n        USER = 'ROLE_USER',\n        ENTITYADMIN = 'ROLE_ENTITY_ADMIN',\n        USERADMIN = 'ROLE_USER_ADMIN',\n        VESSELADMIN = 'ROLE_VESSEL_ADMIN',\n        SERVICEADMIN = 'ROLE_SERVICE_ADMIN',\n        APPROVEORG = 'ROLE_APPROVE_ORG',\n        DEVICEADMIN = 'ROLE_DEVICE_ADMIN',\n        MMSADMIN = 'ROLE_MMS_ADMIN',\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Certificate } from './certificate';\nimport { Vessel } from './vessel';\n\n/**\n * Model object representing a service\n */\nexport interface Service { \n    /**\n     * The ID of the entity in the form of a sequential integer\n     */\n    readonly id?: number;\n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * The ID of the organization that the entity belongs to\n     */\n    idOrganization?: number;\n    /**\n     * Maritime Connectivity Platform Maritime Resource Name\n     */\n    mrn: string;\n    /**\n     * Subsidiary Maritime Resource Name\n     */\n    mrnSubsidiary?: string;\n    /**\n     * DEPRECATED: URL of MMS that the identity is registered. Note that this is not part of the official specification and will be deleted in the future.\n     */\n    homeMMSUrl?: string;\n    /**\n     * Permissions as assigned from the organization\n     */\n    permissions?: string;\n    /**\n     * The name of the entity\n     */\n    name: string;\n    /**\n     * Access type of the OpenId Connect client\n     */\n    oidcAccessType?: Service.OidcAccessTypeEnum;\n    /**\n     * The client id of the service in MCP. Will be generated.\n     */\n    readonly oidcClientId?: string;\n    /**\n     * The client secret of the service in MCP. Will be generated.\n     */\n    readonly oidcClientSecret?: string;\n    /**\n     * The OpenId Connect redirect URI of service.\n     */\n    oidcRedirectUri?: string;\n    /**\n     * The domain name the service will be available on. Used in the issued certificates for the service.\n     */\n    certDomainName?: string;\n    /**\n     * DEPRECATED: The version of the service should no longer be set separately from the MRN, but should instead be appended to the MRN, if needed. This change has been made to ensure uniqueness of MRNs.\n     */\n    readonly instanceVersion?: string;\n    /**\n     * The set of certificates of the service. Cannot be created/updated by editing in the model. Use the dedicated create and revoke calls.\n     */\n    readonly certificates?: Array<Certificate>;\n    vessel?: Vessel;\n}\nexport namespace Service {\n    export type OidcAccessTypeEnum = 'public, bearer-only, confidential';\n    export const OidcAccessTypeEnum = {\n        PublicBearerOnlyConfidential: 'public, bearer-only, confidential' as OidcAccessTypeEnum\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object containing the patch content for migrating a Service entity\n */\nexport interface ServicePatch { \n    /**\n     * The new MCP MRN that you want to give the service\n     */\n    mrn: string;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SortObject { \n    direction?: string;\n    nullHandling?: string;\n    ascending?: boolean;\n    property?: string;\n    ignoreCase?: boolean;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Model object representing a vessel attribute\n */\nexport interface VesselAttribute { \n    /**\n     * The time that the entity was created\n     */\n    readonly createdAt?: Date;\n    /**\n     * The time that the entity was last updated\n     */\n    readonly updatedAt?: Date;\n    /**\n     * Vessel attribute name\n     */\n    attributeName: VesselAttribute.AttributeNameEnum;\n    /**\n     * Vessel attribute value\n     */\n    attributeValue: string;\n    /**\n     * When the attribute is valid from\n     */\n    start?: Date;\n    /**\n     * When the attribute is valid until\n     */\n    end?: Date;\n}\nexport namespace VesselAttribute {\n    export type AttributeNameEnum = 'imo-number' | 'mmsi-number' | 'callsign' | 'flagstate' | 'ais-class' | 'port-of-register';\n    export const AttributeNameEnum = {\n        ImoNumber: 'imo-number' as AttributeNameEnum,\n        MmsiNumber: 'mmsi-number' as AttributeNameEnum,\n        Callsign: 'callsign' as AttributeNameEnum,\n        Flagstate: 'flagstate' as AttributeNameEnum,\n        AisClass: 'ais-class' as AttributeNameEnum,\n        PortOfRegister: 'port-of-register' as AttributeNameEnum\n    };\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface VesselMrnVesselImageBody { \n    image: Blob;\n}","/**\n * Maritime Connectivity Platform Identity Registry API\n * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-oidc\\\">here</a> and <a href=\\\"https://test-api-x509.maritimeconnectivity.net/v3/api-docs/mcp-idreg-x509\\\">here</a>.<br>Additionally, a SECOM based API is also available for which the OpenAPI description can be found <a href=\\\"https://test-api.maritimeconnectivity.net/v3/api-docs/mcp-idreg-secom\\\">here</a>.\n *\n * OpenAPI spec version: 1.3.0\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface VesselMrnVesselImageBody1 { \n    image: Blob;\n}","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { SECOMService } from './api/sECOM.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    SECOMService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './sECOM.service';\nimport { SECOMService } from './sECOM.service';\nexport const APIS = [SECOMService];\n","/**\n * MCP Service Registry (MSR) - SECOM Interfaces\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 1.0\n * Contact: Nikolaos.Vastardis@gla-rad.org\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { SearchFilterObject } from '../model/searchFilterObject';\nimport { ResponseSearchObject } from '../model/responseSearchObject';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport { AppConfig } from '../../../app.config';\n\n\n@Injectable()\nexport class SECOMService {\n\n    protected basePath = AppConfig.SR_BASE_PATH;\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * \n     * @param body \n     * @param page \n     * @param pageSize \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public search(body?: SearchFilterObject, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseSearchObject>;\n    public search(body?: SearchFilterObject, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseSearchObject>>;\n    public search(body?: SearchFilterObject, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseSearchObject>>;\n    public search(body?: SearchFilterObject, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (pageSize !== undefined && pageSize !== null) {\n            queryParameters = queryParameters.set('pageSize', <any>pageSize);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<ResponseSearchObject>('post',`${this.basePath}/api/secom/v1/searchService`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    override encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n\n    override encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","export * from './searchFilterObject';\nexport * from './searchObjectResult';\nexport * from './searchParameters';\n","/**\n * MCP Service Registry (MSR) - SECOM Interfaces\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 1.0\n * Contact: Nikolaos.Vastardis@gla-rad.org\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SearchObjectResult { \n    instanceId: string;\n    version: string;\n    name: string;\n    status: string;\n    description: string;\n    dataProductType?: SearchObjectResult.DataProductTypeEnum;\n    organizationId: string;\n    endpointUri: string;\n    endpointType: string;\n    keywords?: Array<string>;\n    unlocode?: Array<string>;\n    instanceAsXml?: string;\n    publishedAt?: Date;\n    lastUpdatedAt?: Date;\n    comment?: string;\n    mmsi?: string;\n    imo?: string;\n    geometry?: any;\n}\nexport namespace SearchObjectResult {\n    export type DataProductTypeEnum = 'OTHER' | 'S57' | 'S101' | 'S102' | 'S104' | 'S111' | 'S122' | 'S123' | 'S124' | 'S125' | 'S126' | 'S127' | 'S128' | 'S129' | 'S131' | 'S210' | 'S211' | 'S212' | 'S401' | 'S402' | 'S411' | 'S412' | 'S413' | 'S414' | 'S421' | 'RTZ' | 'EPC';\n    export const DataProductTypeEnum = {\n        OTHER: 'OTHER' as DataProductTypeEnum,\n        S57: 'S57' as DataProductTypeEnum,\n        S101: 'S101' as DataProductTypeEnum,\n        S102: 'S102' as DataProductTypeEnum,\n        S104: 'S104' as DataProductTypeEnum,\n        S111: 'S111' as DataProductTypeEnum,\n        S122: 'S122' as DataProductTypeEnum,\n        S123: 'S123' as DataProductTypeEnum,\n        S124: 'S124' as DataProductTypeEnum,\n        S125: 'S125' as DataProductTypeEnum,\n        S126: 'S126' as DataProductTypeEnum,\n        S127: 'S127' as DataProductTypeEnum,\n        S128: 'S128' as DataProductTypeEnum,\n        S129: 'S129' as DataProductTypeEnum,\n        S131: 'S131' as DataProductTypeEnum,\n        S210: 'S210' as DataProductTypeEnum,\n        S211: 'S211' as DataProductTypeEnum,\n        S212: 'S212' as DataProductTypeEnum,\n        S401: 'S401' as DataProductTypeEnum,\n        S402: 'S402' as DataProductTypeEnum,\n        S411: 'S411' as DataProductTypeEnum,\n        S412: 'S412' as DataProductTypeEnum,\n        S413: 'S413' as DataProductTypeEnum,\n        S414: 'S414' as DataProductTypeEnum,\n        S421: 'S421' as DataProductTypeEnum,\n        RTZ: 'RTZ' as DataProductTypeEnum,\n        EPC: 'EPC' as DataProductTypeEnum\n    };\n}","/**\n * MCP Service Registry (MSR) - SECOM Interfaces\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 1.0\n * Contact: Nikolaos.Vastardis@gla-rad.org\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SearchParameters { \n    name?: string;\n    status?: string;\n    version?: string;\n    keywords?: string;\n    description?: string;\n    dataProductType?: SearchParameters.DataProductTypeEnum;\n    specificationId?: string;\n    designId?: string;\n    instanceId?: string;\n    mmsi?: string;\n    imo?: string;\n    serviceType?: string;\n    unlocode?: string;\n    endpointUri?: string;\n    page?: number;\n    pageSize?: number;\n}\nexport namespace SearchParameters {\n    export type DataProductTypeEnum = 'OTHER' | 'S57' | 'S101' | 'S102' | 'S104' | 'S111' | 'S122' | 'S123' | 'S124' | 'S125' | 'S126' | 'S127' | 'S128' | 'S129' | 'S131' | 'S210' | 'S211' | 'S212' | 'S401' | 'S402' | 'S411' | 'S412' | 'S413' | 'S414' | 'S421' | 'RTZ' | 'EPC';\n    export const DataProductTypeEnum = {\n        OTHER: 'OTHER' as DataProductTypeEnum,\n        S57: 'S57' as DataProductTypeEnum,\n        S101: 'S101' as DataProductTypeEnum,\n        S102: 'S102' as DataProductTypeEnum,\n        S104: 'S104' as DataProductTypeEnum,\n        S111: 'S111' as DataProductTypeEnum,\n        S122: 'S122' as DataProductTypeEnum,\n        S123: 'S123' as DataProductTypeEnum,\n        S124: 'S124' as DataProductTypeEnum,\n        S125: 'S125' as DataProductTypeEnum,\n        S126: 'S126' as DataProductTypeEnum,\n        S127: 'S127' as DataProductTypeEnum,\n        S128: 'S128' as DataProductTypeEnum,\n        S129: 'S129' as DataProductTypeEnum,\n        S131: 'S131' as DataProductTypeEnum,\n        S210: 'S210' as DataProductTypeEnum,\n        S211: 'S211' as DataProductTypeEnum,\n        S212: 'S212' as DataProductTypeEnum,\n        S401: 'S401' as DataProductTypeEnum,\n        S402: 'S402' as DataProductTypeEnum,\n        S411: 'S411' as DataProductTypeEnum,\n        S412: 'S412' as DataProductTypeEnum,\n        S413: 'S413' as DataProductTypeEnum,\n        S414: 'S414' as DataProductTypeEnum,\n        S421: 'S421' as DataProductTypeEnum,\n        RTZ: 'RTZ' as DataProductTypeEnum,\n        EPC: 'EPC' as DataProductTypeEnum\n    };\n}","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DocControllerService } from './api/docController.service';\nimport { InstanceControllerService } from './api/instanceController.service';\nimport { LedgerRequestControllerService } from './api/ledgerRequestController.service';\nimport { XmlControllerService } from './api/xmlController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DocControllerService,\n    InstanceControllerService,\n    LedgerRequestControllerService,\n    XmlControllerService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './docController.service';\nimport { DocControllerService } from './docController.service';\nexport * from './instanceController.service';\nimport { InstanceControllerService } from './instanceController.service';\nexport * from './ledgerRequestController.service';\nimport { LedgerRequestControllerService } from './ledgerRequestController.service';\nexport * from './xmlController.service';\nimport { XmlControllerService } from './xmlController.service';\nexport const APIS = [DocControllerService, InstanceControllerService, LedgerRequestControllerService, XmlControllerService];\n","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { DocDto } from '../model/docDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DocControllerService {\n\n    protected basePath = 'https://msr.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createDoc(body: DocDto, observe?: 'body', reportProgress?: boolean): Observable<DocDto>;\n    public createDoc(body: DocDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocDto>>;\n    public createDoc(body: DocDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocDto>>;\n    public createDoc(body: DocDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<DocDto>('post',`${this.basePath}/api/docs`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteDoc(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteDoc(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteDoc(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteDoc(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/docs/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDoc(id: number, observe?: 'body', reportProgress?: boolean): Observable<DocDto>;\n    public getDoc(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocDto>>;\n    public getDoc(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocDto>>;\n    public getDoc(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<DocDto>('get',`${this.basePath}/api/docs/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDocs(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<DocDto>>;\n    public getDocs(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DocDto>>>;\n    public getDocs(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DocDto>>>;\n    public getDocs(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<DocDto>>('get',`${this.basePath}/api/docs`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param body \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateDoc(body: DocDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<DocDto>;\n    public updateDoc(body: DocDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocDto>>;\n    public updateDoc(body: DocDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocDto>>;\n    public updateDoc(body: DocDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateDoc.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<DocDto>('put',`${this.basePath}/api/docs/${encodeURIComponent(String(id))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { InstanceDto } from '../model/instanceDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class InstanceControllerService {\n\n    protected basePath = 'https://msr.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createInstance(body: InstanceDto, observe?: 'body', reportProgress?: boolean): Observable<InstanceDto>;\n    public createInstance(body: InstanceDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstanceDto>>;\n    public createInstance(body: InstanceDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstanceDto>>;\n    public createInstance(body: InstanceDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createInstance.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<InstanceDto>('post',`${this.basePath}/api/instances`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteInstance(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteInstance(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteInstance(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteInstance(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteInstance.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/instances/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInstance(id: number, observe?: 'body', reportProgress?: boolean): Observable<InstanceDto>;\n    public getInstance(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstanceDto>>;\n    public getInstance(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstanceDto>>;\n    public getInstance(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getInstance.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InstanceDto>('get',`${this.basePath}/api/instances/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param mrn \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInstanceByMRNAndVersion(mrn: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<InstanceDto>;\n    public getInstanceByMRNAndVersion(mrn: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstanceDto>>;\n    public getInstanceByMRNAndVersion(mrn: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstanceDto>>;\n    public getInstanceByMRNAndVersion(mrn: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mrn === null || mrn === undefined) {\n            throw new Error('Required parameter mrn was null or undefined when calling getInstanceByMRNAndVersion.');\n        }\n\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getInstanceByMRNAndVersion.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InstanceDto>('get',`${this.basePath}/api/instances/mrn/${encodeURIComponent(String(mrn))}/${encodeURIComponent(String(version))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInstances(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<InstanceDto>>;\n    public getInstances(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InstanceDto>>>;\n    public getInstances(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InstanceDto>>>;\n    public getInstances(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<InstanceDto>>('get',`${this.basePath}/api/instances`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param mrn \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInstancesByMRN(mrn: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InstanceDto>>;\n    public getInstancesByMRN(mrn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InstanceDto>>>;\n    public getInstancesByMRN(mrn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InstanceDto>>>;\n    public getInstancesByMRN(mrn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mrn === null || mrn === undefined) {\n            throw new Error('Required parameter mrn was null or undefined when calling getInstancesByMRN.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<InstanceDto>>('get',`${this.basePath}/api/instances/mrn/${encodeURIComponent(String(mrn))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param body \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateInstance(body: InstanceDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<InstanceDto>;\n    public updateInstance(body: InstanceDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstanceDto>>;\n    public updateInstance(body: InstanceDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstanceDto>>;\n    public updateInstance(body: InstanceDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateInstance.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateInstance.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<InstanceDto>('put',`${this.basePath}/api/instances/${encodeURIComponent(String(id))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param ledgerStatus \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateInstanceLedgerStatus(id: number, ledgerStatus: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateInstanceLedgerStatus(id: number, ledgerStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateInstanceLedgerStatus(id: number, ledgerStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateInstanceLedgerStatus(id: number, ledgerStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateInstanceLedgerStatus.');\n        }\n\n        if (ledgerStatus === null || ledgerStatus === undefined) {\n            throw new Error('Required parameter ledgerStatus was null or undefined when calling updateInstanceLedgerStatus.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ledgerStatus !== undefined && ledgerStatus !== null) {\n            queryParameters = queryParameters.set('ledgerStatus', <any>ledgerStatus);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/instances/${encodeURIComponent(String(id))}/ledger-status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param status \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateInstanceStatus(id: number, status: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateInstanceStatus(id: number, status: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateInstanceStatus(id: number, status: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateInstanceStatus(id: number, status: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateInstanceStatus.');\n        }\n\n        if (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling updateInstanceStatus.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (status !== undefined && status !== null) {\n            queryParameters = queryParameters.set('status', <any>status);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/instances/${encodeURIComponent(String(id))}/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LedgerRequestDto } from '../model/ledgerRequestDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LedgerRequestControllerService {\n\n    protected basePath = 'https://msr.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createLedgerRequest(body: LedgerRequestDto, observe?: 'body', reportProgress?: boolean): Observable<LedgerRequestDto>;\n    public createLedgerRequest(body: LedgerRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LedgerRequestDto>>;\n    public createLedgerRequest(body: LedgerRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LedgerRequestDto>>;\n    public createLedgerRequest(body: LedgerRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createLedgerRequest.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<LedgerRequestDto>('post',`${this.basePath}/api/ledgerrequests`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteLedgerRequest(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteLedgerRequest(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteLedgerRequest(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteLedgerRequest(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteLedgerRequest.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/ledgerrequests/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLedgerRequest(id: number, observe?: 'body', reportProgress?: boolean): Observable<LedgerRequestDto>;\n    public getLedgerRequest(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LedgerRequestDto>>;\n    public getLedgerRequest(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LedgerRequestDto>>;\n    public getLedgerRequest(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getLedgerRequest.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<LedgerRequestDto>('get',`${this.basePath}/api/ledgerrequests/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLedgerRequests(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<LedgerRequestDto>>;\n    public getLedgerRequests(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LedgerRequestDto>>>;\n    public getLedgerRequests(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LedgerRequestDto>>>;\n    public getLedgerRequests(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<LedgerRequestDto>>('get',`${this.basePath}/api/ledgerrequests`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param status \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateRequestStatus(id: number, status: string, observe?: 'body', reportProgress?: boolean): Observable<LedgerRequestDto>;\n    public updateRequestStatus(id: number, status: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LedgerRequestDto>>;\n    public updateRequestStatus(id: number, status: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LedgerRequestDto>>;\n    public updateRequestStatus(id: number, status: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateRequestStatus.');\n        }\n\n        if (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling updateRequestStatus.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (status !== undefined && status !== null) {\n            queryParameters = queryParameters.set('status', <any>status);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<LedgerRequestDto>('put',`${this.basePath}/api/ledgerrequests/${encodeURIComponent(String(id))}/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { XmlDto } from '../model/xmlDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class XmlControllerService {\n\n    protected basePath = 'https://msr.maritimeconnectivity.net';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * \n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createXml(body: XmlDto, observe?: 'body', reportProgress?: boolean): Observable<XmlDto>;\n    public createXml(body: XmlDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<XmlDto>>;\n    public createXml(body: XmlDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<XmlDto>>;\n    public createXml(body: XmlDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createXml.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<XmlDto>('post',`${this.basePath}/api/xmls`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteXml(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteXml(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteXml(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteXml(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteXml.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/xmls/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param page Zero-based page index (0..N)\n     * @param size The size of the page to be returned\n     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllXmls(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<XmlDto>>;\n    public getAllXmls(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<XmlDto>>>;\n    public getAllXmls(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<XmlDto>>>;\n    public getAllXmls(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (sort) {\n            sort.forEach((element) => {\n                queryParameters = queryParameters.append('sort', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<XmlDto>>('get',`${this.basePath}/api/xmls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param schema \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getG1128Schema(schema: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getG1128Schema(schema: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getG1128Schema(schema: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getG1128Schema(schema: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (schema === null || schema === undefined) {\n            throw new Error('Required parameter schema was null or undefined when calling getG1128Schema.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<string>('get',`${this.basePath}/api/xmls/schemas/${encodeURIComponent(String(schema))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getXml(id: number, observe?: 'body', reportProgress?: boolean): Observable<XmlDto>;\n    public getXml(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<XmlDto>>;\n    public getXml(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<XmlDto>>;\n    public getXml(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getXml.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<XmlDto>('get',`${this.basePath}/api/xmls/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param body \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateXml(body: XmlDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<XmlDto>;\n    public updateXml(body: XmlDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<XmlDto>>;\n    public updateXml(body: XmlDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<XmlDto>>;\n    public updateXml(body: XmlDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateXml.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateXml.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<XmlDto>('put',`${this.basePath}/api/xmls/${encodeURIComponent(String(id))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * \n     * \n     * @param body \n     * @param schema \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateXmlWithG1128Schema(body: string, schema: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public validateXmlWithG1128Schema(body: string, schema: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public validateXmlWithG1128Schema(body: string, schema: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public validateXmlWithG1128Schema(body: string, schema: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling validateXmlWithG1128Schema.');\n        }\n\n        if (schema === null || schema === undefined) {\n            throw new Error('Required parameter schema was null or undefined when calling validateXmlWithG1128Schema.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/api/xmls/validate/${encodeURIComponent(String(schema))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    override encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n\n    override encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface Coordinate { \n    x?: number;\n    y?: number;\n    z?: number;\n    m?: number;\n    coordinate?: Coordinate;\n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface CoordinateSequence { \n    measures?: number;\n    dimension?: number;\n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface CoordinateSequenceFactory { \n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface DocDto { \n    id?: number;\n    name: string;\n    comment?: string;\n    mimetype: string;\n    filecontent: string;\n    filecontentContentType?: string;\n    instanceId?: number;\n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface Envelope { \n    diameter?: number;\n    height?: number;\n    area?: number;\n    minX?: number;\n    maxX?: number;\n    minY?: number;\n    maxY?: number;\n    width?: number;\n    _null?: boolean;\n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { DocDto } from './docDto';\nimport { Geometry } from './geometry';\nimport { XmlDto } from './xmlDto';\n\nexport interface InstanceDto { \n    id?: number;\n    name: string;\n    version: string;\n    publishedAt?: Date;\n    lastUpdatedAt?: Date;\n    comment: string;\n    geometry?: Geometry;\n    geometryContentType?: string;\n    instanceId: string;\n    keywords?: Array<string>;\n    status: InstanceDto.StatusEnum;\n    organizationId?: string;\n    unlocode?: Array<string>;\n    endpointUri?: string;\n    endpointType?: string;\n    mmsi?: string;\n    imo?: string;\n    serviceType?: Array<string>;\n    dataProductType?: Array<InstanceDto.DataProductTypeEnum>;\n    instanceAsXml?: XmlDto;\n    instanceAsDoc?: DocDto;\n    ledgerRequestId?: number;\n    ledgerRequestStatus?: InstanceDto.LedgerRequestStatusEnum;\n    docIds?: Array<number>;\n    implementsServiceDesign?: string;\n    implementsServiceDesignVersion?: string;\n}\nexport namespace InstanceDto {\n    export type StatusEnum = 'PROVISIONAL' | 'RELEASED' | 'DEPRECATED' | 'DELETED';\n    export const StatusEnum = {\n        PROVISIONAL: 'PROVISIONAL' as StatusEnum,\n        RELEASED: 'RELEASED' as StatusEnum,\n        DEPRECATED: 'DEPRECATED' as StatusEnum,\n        DELETED: 'DELETED' as StatusEnum\n    };\n    export type DataProductTypeEnum = 'OTHER' | 'S57' | 'S101' | 'S102' | 'S104' | 'S111' | 'S122' | 'S123' | 'S124' | 'S125' | 'S126' | 'S127' | 'S128' | 'S129' | 'S131' | 'S210' | 'S211' | 'S212' | 'S401' | 'S402' | 'S411' | 'S412' | 'S413' | 'S414' | 'S421' | 'RTZ' | 'EPC';\n    export const DataProductTypeEnum = {\n        OTHER: 'OTHER' as DataProductTypeEnum,\n        S57: 'S57' as DataProductTypeEnum,\n        S101: 'S101' as DataProductTypeEnum,\n        S102: 'S102' as DataProductTypeEnum,\n        S104: 'S104' as DataProductTypeEnum,\n        S111: 'S111' as DataProductTypeEnum,\n        S122: 'S122' as DataProductTypeEnum,\n        S123: 'S123' as DataProductTypeEnum,\n        S124: 'S124' as DataProductTypeEnum,\n        S125: 'S125' as DataProductTypeEnum,\n        S126: 'S126' as DataProductTypeEnum,\n        S127: 'S127' as DataProductTypeEnum,\n        S128: 'S128' as DataProductTypeEnum,\n        S129: 'S129' as DataProductTypeEnum,\n        S131: 'S131' as DataProductTypeEnum,\n        S210: 'S210' as DataProductTypeEnum,\n        S211: 'S211' as DataProductTypeEnum,\n        S212: 'S212' as DataProductTypeEnum,\n        S401: 'S401' as DataProductTypeEnum,\n        S402: 'S402' as DataProductTypeEnum,\n        S411: 'S411' as DataProductTypeEnum,\n        S412: 'S412' as DataProductTypeEnum,\n        S413: 'S413' as DataProductTypeEnum,\n        S414: 'S414' as DataProductTypeEnum,\n        S421: 'S421' as DataProductTypeEnum,\n        RTZ: 'RTZ' as DataProductTypeEnum,\n        EPC: 'EPC' as DataProductTypeEnum\n    };\n    export type LedgerRequestStatusEnum = 'INACTIVE' | 'CREATED' | 'VETTING' | 'VETTED' | 'REQUESTING' | 'SUCCEEDED' | 'FAILED' | 'REJECTED';\n    export const LedgerRequestStatusEnum = {\n        INACTIVE: 'INACTIVE' as LedgerRequestStatusEnum,\n        CREATED: 'CREATED' as LedgerRequestStatusEnum,\n        VETTING: 'VETTING' as LedgerRequestStatusEnum,\n        VETTED: 'VETTED' as LedgerRequestStatusEnum,\n        REQUESTING: 'REQUESTING' as LedgerRequestStatusEnum,\n        SUCCEEDED: 'SUCCEEDED' as LedgerRequestStatusEnum,\n        FAILED: 'FAILED' as LedgerRequestStatusEnum,\n        REJECTED: 'REJECTED' as LedgerRequestStatusEnum\n    };\n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface LedgerRequestDto { \n    id?: number;\n    serviceInstanceId: number;\n    status?: LedgerRequestDto.StatusEnum;\n    reason?: string;\n    createdAt?: Date;\n    lastUpdatedAt?: Date;\n}\nexport namespace LedgerRequestDto {\n    export type StatusEnum = 'INACTIVE' | 'CREATED' | 'VETTING' | 'VETTED' | 'REQUESTING' | 'SUCCEEDED' | 'FAILED' | 'REJECTED';\n    export const StatusEnum = {\n        INACTIVE: 'INACTIVE' as StatusEnum,\n        CREATED: 'CREATED' as StatusEnum,\n        VETTING: 'VETTING' as StatusEnum,\n        VETTED: 'VETTED' as StatusEnum,\n        REQUESTING: 'REQUESTING' as StatusEnum,\n        SUCCEEDED: 'SUCCEEDED' as StatusEnum,\n        FAILED: 'FAILED' as StatusEnum,\n        REJECTED: 'REJECTED' as StatusEnum\n    };\n}","export * from './coordinate';\nexport * from './coordinateSequence';\nexport * from './coordinateSequenceFactory';\nexport * from './docDto';\nexport * from './envelope';\nexport * from './geometry';\nexport * from './geometryFactory';\nexport * from './instanceDto';\nexport * from './ledgerRequestDto';\nexport * from './point';\nexport * from './precisionModel';\nexport * from './type';\nexport * from './xmlDto';\n","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface Type { \n}","/**\n * Maritime Connectivity Platform Service Registry API\n * Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG\n *\n * OpenAPI spec version: 0.0.8\n * Contact: info@maritimeconnectivity.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface XmlDto { \n    id?: number;\n    name: string;\n    comment?: string;\n    content: string;\n    contentContentType?: string;\n}","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","/*\n * Copyright (c) 2024 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * enum for menu types being used for routing\n */\nexport enum ItemType {\n  None = 'none',\n  Device = 'device',\n  Organization = 'organization',\n  Service = 'service',\n  User = 'user',\n  Vessel = 'vessel',\n  MMS = 'mms',\n  Role = 'role',\n  Agent = 'agent',\n  Instance = 'instance',\n  Design = 'design',\n  InstanceOfOrg = 'instanceorg',\n  OrgCandidate = 'orgcandidate',\n  LedgerInstance = 'ledgerInstance',\n  Certificate = 'certificate',\n  SearchObjectResult = 'searchobjectresult',\n}\n\n/**\n * scope of resource type in MIR\n */\nexport const MIRItemType: string[] = [ ItemType.Device, ItemType.Vessel, ItemType.User,\n  ItemType.Service, ItemType.Role, ItemType.Agent ];\n\nexport const timestampKeys: string[] = ['start', 'end', 'revokedAt', 'createdAt', 'updatedAt'];\n\n/**\n * enum of MCP entity types. Entity is a subset of resource.\n */\n export enum EntityType {\n  Device = 'device',\n  Organization = 'organization',\n  Service = 'service',\n  User = 'user',\n  Vessel = 'vessel',\n  MMS = 'mms',\n}\n\nexport enum MrnAttributeInMSR {\n  Instance = 'instanceId',\n  Design = 'implementsServiceDesign',\n}\n\n/**\n * scope of MCP entity types\n */\n export const EntityTypes: string[] = [ EntityType.Device, EntityType.Organization,\n  EntityType.Service, EntityType.User, EntityType.Vessel, EntityType.MMS ];\n\n/**\n * readable names for MenuTypes\n */\nexport const MenuTypeNames = {\n  vessel: 'vessel',\n  device: 'device',\n  user: 'user',\n  organization: 'organization',\n  service: 'service',\n  role: 'role',\n  agent: 'agent',\n  mms: 'mms',\n  instance: 'service instance',\n  instanceorg: 'service instance',\n  orgcandidate: 'unapproved organization',\n  orgsvc: 'owned service',\n};\n\n/**\n * icon names for each MenuType\n */\nexport const MenuTypeIconNames = {\n  vessel: 'ship',\n  device: 'hdd',\n  user: 'user',\n  organization: 'flag',\n  service: 'cog',\n  role: 'id-badge',\n  agent: 'user',\n  mms: 'forward',\n  instance: 'compass',\n  instanceorg: 'compass',\n  orgcandidate: 'clipboard',\n};","/*\n * Copyright (c) 2024 Maritime Connectivity Platform Consortium\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const environment = {\n  production: false,\n  irBasePath: 'https://test-api.maritimeconnectivity.net',\n  irProvider: 'MCP Consortium',\n  irContact: 'info@maritimeconnectivity.net',\n  oidcBasePath: 'https://test-maritimeid.maritimeconnectivity.net',\n  hasServiceRegistry: true,\n  srBasePath: 'https://msr-test.maritimeconnectivity.net',\n  srProvider: 'MCP Consortium',\n  srContact: 'info@maritimeconnectivity.net',\n  hasMSRLedger: false,\n  ledgerPath: 'https://test-ledger.maritimeconnectivity.net',\n  mpProvider: 'MCP Consortium',\n  mpContact: 'info@maritimeconnectivity.net',\n  environmentTitle: 'MCC Testbed TEST',\n  mpName: 'MCC MCP Testbed',\n  termsOfUse: 'By applying for access to the MCP testbed, you agree not to store any personal information on the platform such as names and email addresses. Please use generic names, such as \\'John Doe\\' and generic email addresses such as \\'info@company.com\\'. It does need to be a working email address though, since access will be granted through this email address. Furthermore, if anyone chooses to federate an identity registry into the MCP testbed, this should only contain test data - not actual personal information. This is due to the European Union General Data Protection Regulation (GDPR). For more information, contact the MCC secretariat.',\n  idpNamespace: 'mcc-test',\n  environmentName: 'test',\n  footerName: 'Maritime Connectivity Platform Consortium',\n  footerLink: 'https://maritimeconnectivity.net',\n  logoImg: 'assets/images/logo.svg',\n  loginBgImg: '',\n};\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */"],"names":["RouterModule","authGuard","routes","path","loadChildren","then","m","PagesModule","canActivateChild","LandingModule","config","useHash","AppRoutingModule","_","_2","_3","forRoot","imports","i1","exports","AppComponent","constructor","title","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelement","environment","AppConfig","_initialize","IR_BASE_PATH","irBasePath","replace","SR_BASE_PATH","hasServiceRegistry","srBasePath","ENVIRONMENT_TITLE","environmentTitle","IDP_NAMESPACE","idpNamespace","HAS_SERVICE_REGISTRY","OIDC_BASE_PATH","oidcBasePath","ENVIRONMENT_NAME","environmentName","IR_PROVIDER","irProvider","IR_CONTACT","irContact","SR_PROVIDER","srProvider","SR_CONTACT","srContact","HAS_MSR_LEDGER","hasMSRLedger","LEDGER_PATH","ledgerPath","MP_PROVIDER","mpProvider","MP_NAME","mpName","TERMS_OF_USE","termsOfUse","MP_CONTACT","mpContact","MP_VERSION","FOOTER_NAME","footerName","FOOTER_LINK","footerLink","LOGO_IMG","logoImg","APP_INITIALIZER","BrowserModule","BrowserAnimationsModule","ClarityModule","BASE_PATH","ApiModule","MIRApiModule","MSRApiModule","SECOM_BASE_PATH","SECOMApiModule","initializeKeycloak","KeycloakAngularModule","KeycloakService","HTTP_INTERCEPTORS","HttpClient","provideHttpClient","withInterceptorsFromDi","TranslateLoader","TranslateModule","TranslateHttpLoader","NotifierModule","AuthInterceptor","HttpLoaderFactory","http","AppModule","bootstrap","provide","useFactory","multi","deps","useValue","useClass","loader","declarations","inject","Router","AuthService","_ref","_asyncToGenerator","route","state","authService","router","authenticated","isAuthenticated","navigate","_x","_x2","apply","arguments","keycloak","init","url","realm","clientId","enableBearerInterceptor","bearerPrefix","initOptions","onLoad","silentCheckSsoRedirectUri","window","location","origin","checkLoginIframe","throwError","catchError","intercept","req","next","handle","pipe","error","status","ɵɵinject","factory","ɵfac","Role","RoleNameEnum","AuthPermission","AuthPermissionForMSR","rolesToPermission","roles","permission","User","roleString","ORGADMIN","OrgAdmin","SITEADMIN","SiteAdmin","USERADMIN","UserAdmin","DEVICEADMIN","DeviceAdmin","VESSELADMIN","VesselAdmin","SERVICEADMIN","ServiceAdmin","ENTITYADMIN","EntityAdmin","MMSADMIN","MMSAdmin","APPROVEORG","ApproveOrg","PermissionResolver","isSiteAdmin","isOrgAdmin","isEntityAdmin","isUserAdmin","isVesselAdmin","isDeviceAdmin","isServiceAdmin","canApproveOrg","isMSRAdmin","length","includes","isLedgerAdmin","isOrgServiceAdmin","hasAdminPermissionInMIR","myPermission","permissionRole","ItemType","BehaviorSubject","keycloakService","isAuthenticatedSubject","isAuthenticated$","asObservable","protectFromEmptyToken","tokenParsed","getKeycloakInstance","Error","login","_this","redirectUri","protocol","host","setAuthenticated","logout","_this2","_this3","isLoggedIn","Promise","resolve","getToken","_this4","getOrgMrn","_this5","getUserName","_this6","getUserMrn","_this7","getUserRoles","_this8","getUserPermission","_this9","reject","hasPermission","context","forMyOrg","_this10","_ref2","Device","Vessel","MMS","Service","Organization","_x3","_x4","i2","providedIn","Configuration","AgentControllerService","CertificateControllerService","DeviceControllerService","LogoControllerService","MmsControllerService","OrganizationControllerService","RoleControllerService","ServiceControllerService","UserControllerService","VesselControllerService","VesselImageControllerService","configurationFactory","ngModule","providers","parentModule","HttpHeaders","HttpParams","CustomHttpUrlEncodingCodec","httpClient","basePath","configuration","defaultHeaders","canConsumeForm","consumes","form","consume","createAgent","body","orgMrn","observe","reportProgress","undefined","headers","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","set","httpContentTypeSelected","selectHeaderContentType","request","encodeURIComponent","String","withCredentials","deleteAgent","agentId","getActingOnBehalfOf","page","size","sort","queryParameters","encoder","forEach","element","append","params","getAgent","getAgents","updateAgent","APIS","getCRL","caAlias","getOCSP","ocspRequest","postOCSP","createDevice","deleteDevice","deviceMrn","getDevice","getDeviceCert","serialNumber","getOrganizationDevices","newDeviceCertFromCsr","revokeDeviceCert","certId","updateDevice","createLogoPost","deleteLogo","getLogo","updateLogoPut","createMMS","deleteMMS","mmsMrn","getMMS","getMMSCert","getOrganizationMMSes","newMMSCertFromCsr","revokeMMSCert","updateMMS","applyOrganization","approveOrganization","deleteOrg","getOrgCert","getOrganization","getOrganization1","getOrganizationById","orgId","getUnapprovedOrganizations","newOrgCertFromCsr","revokeOrgCert","updateOrganization","createRole","deleteRole","roleId","getAvailableRoles","getMyRole","getRole","getRoles","updateRole","createService","deleteService","serviceMrn","version","deleteService1","getOrganizationServices","getService","getServiceCert","getServiceCert1","getServiceJbossXml","getServiceJbossXml1","getServiceKeycloakJson","getServiceKeycloakJson1","getServiceVersion","getServices","pageable","migrateServiceMrn","newServiceCertFromCsr","newServiceCertFromCsr1","revokeServiceCert","revokeServiceCert1","updateService","updateService1","createUser","deleteUser","userMrn","getOrganizationUsers","getUser","getUserCert","newUserCertFromCsr","revokeUserCert","updateUser","createVessel","deleteVessel","vesselMrn","getOrganizationVessels","getVessel","getVesselCert","getVesselServices","newVesselCertFromCsr","revokeVesselCert","updateVessel","createVesselImagePost","deleteVesselImage","getVesselImage","updateVesselImagePut","configurationParameters","apiKeys","username","password","accessToken","contentTypes","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","HttpUrlEncodingCodec","encodeKey","k","encodeValue","v","AllowedAgentRole","USER","CertificateRevocation","RevocationReasonEnum","Unspecified","Keycompromise","Cacompromise","Affiliationchanged","Superseded","Cessationofoperation","Certificatehold","Removefromcrl","Privilegewithdrawn","Aacompromise","IdentityProviderAttribute","AttributeNameEnum","ImportUrlValidateSignatureSigningCertificateSingleLogoutServiceUrlPostBindingResponsePostBindingAuthnRequestSingleSignOnServiceUrlWantAuthnRequestsSignedUserInfoUrlTokenUrlAuthorizationUrlLogoutUrlIssuerPublicKeySignatureVerifierClientIdClientSecretproviderTypeFirstNameAttrLastNameAttrEmailAttrUsernameAttrPermissionsAttr","FederationTypeEnum","TestIdp","OwnIdp","ExternalIdp","OidcAccessTypeEnum","PublicBearerOnlyConfidential","VesselAttribute","ImoNumber","MmsiNumber","Callsign","Flagstate","AisClass","PortOfRegister","InjectionToken","COLLECTION_FORMATS","SECOMService","search","pageSize","SearchObjectResult","DataProductTypeEnum","OTHER","S57","S101","S102","S104","S111","S122","S123","S124","S125","S126","S127","S128","S129","S131","S210","S211","S212","S401","S402","S411","S412","S413","S414","S421","RTZ","EPC","SearchParameters","DocControllerService","InstanceControllerService","LedgerRequestControllerService","XmlControllerService","createDoc","deleteDoc","id","getDoc","getDocs","updateDoc","createInstance","deleteInstance","getInstance","getInstanceByMRNAndVersion","mrn","getInstances","getInstancesByMRN","updateInstance","updateInstanceLedgerStatus","ledgerStatus","updateInstanceStatus","createLedgerRequest","deleteLedgerRequest","getLedgerRequest","getLedgerRequests","updateRequestStatus","createXml","deleteXml","getAllXmls","getG1128Schema","schema","getXml","updateXml","validateXmlWithG1128Schema","InstanceDto","StatusEnum","PROVISIONAL","RELEASED","DEPRECATED","DELETED","LedgerRequestStatusEnum","INACTIVE","CREATED","VETTING","VETTED","REQUESTING","SUCCEEDED","FAILED","REJECTED","LedgerRequestDto","MIRItemType","Agent","timestampKeys","EntityType","MrnAttributeInMSR","EntityTypes","MenuTypeNames","vessel","device","user","organization","service","role","agent","mms","instance","instanceorg","orgcandidate","orgsvc","MenuTypeIconNames","production","loginBgImg","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","console"],"sourceRoot":"webpack:///","x_google_ignoreList":[75,76]}