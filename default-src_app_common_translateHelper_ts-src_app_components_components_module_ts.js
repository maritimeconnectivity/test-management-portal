(self["webpackChunkmanagement_portal_clr"] = self["webpackChunkmanagement_portal_clr"] || []).push([["default-src_app_common_translateHelper_ts-src_app_components_components_module_ts"],{

/***/ 58021:
/*!******************************************!*\
  !*** ./src/app/common/certRevokeInfo.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getReasonOptionFromRevocationReason: () => (/* binding */ getReasonOptionFromRevocationReason)
/* harmony export */ });
/* harmony import */ var _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../backend-api/identity-registry/model/certificateRevocation */ 87277);
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// reference: https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.509-201210-S!!PDF-E&type=items
const getReasonOptionFromRevocationReason = revocationReason => {
  switch (revocationReason) {
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Aacompromise:
      {
        return {
          value: revocationReason,
          title: 'AA compromised',
          description: 'This reason indicates that it is known or suspected that the certificate subject\'s private key has been compromised. It applies to authority attribute (AA) certificates only.',
          reference: 'https://docs.oracle.com/javase/8/docs/api/java/security/cert/CRLReason.html'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Affiliationchanged:
      {
        return {
          value: revocationReason,
          title: 'Affiliation changed',
          description: 'The user has terminated his or her relationship with the organization indicated in the Distinguished Name attribute of the certificate. This revocation code is typically used when an individual is terminated or has resigned from an organization. You do not have to revoke a certificate when a user changes departments, unless your security policy requires different certificate be issued by a departmental CA.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Cacompromise:
      {
        return {
          value: revocationReason,
          title: 'CA compromised',
          description: 'The token or disk location where the CA\'s private key is stored has been compromised and is in the possession of an unauthorized individual. When a CA\'s private key is revoked, this results in all certificates issued by the CA that are signed using the private key associated with the revoked certificate being considered revoked.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Certificatehold:
      {
        return {
          value: revocationReason,
          title: 'Certificate Hold',
          description: 'A temporary revocation that indicates that a CA will not vouch for a certificate at a specific point in time. Once a certificate is revoked with a CertificateHold reason code, the certificate can then be revoked with another Reason Code, or unrevoked and returned to use.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Cessationofoperation:
      {
        return {
          value: revocationReason,
          title: 'Cessation of Operation',
          description: 'If a CA is decommissioned, no longer to be used, the CA\'s certificate should be revoked with this reason code. Do not revoke the CA\'s certificate if the CA no longer issues new certificates, yet still publishes CRLs for the currently issued certificates.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Keycompromise:
      {
        return {
          value: revocationReason,
          title: 'Key compromised',
          description: 'The token or disk location where the private key associated with the certificate has been compromised and is in the possession of an unauthorized individual. This can include the case where a laptop is stolen, or a smart card is lost.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Privilegewithdrawn:
      {
        return {
          value: revocationReason,
          title: 'Privilege withdrawn',
          description: 'A certificate (public-key or attribute certificate) was revoked because a privilege contained within that certificate has been withdrawn',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Removefromcrl:
      {
        return {
          value: revocationReason,
          title: 'Remove from CRL',
          description: 'If a certificate is revoked with the CertificateHold reason code, it is possible to "unrevoke" a certificate. The unrevoking process still lists the certificate in the CRL, but with the reason code set to RemoveFromCRL.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Superseded:
      {
        return {
          value: revocationReason,
          title: 'Superseded',
          description: 'A replacement certificate has been issued to a user, and the reason does not fall under the previous reasons. This revocation reason is typically used when a smart card fails, the password for a token is forgotten by a user, or the user has changed their legal name.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    case _backend_api_identity_registry_model_certificateRevocation__WEBPACK_IMPORTED_MODULE_0__.CertificateRevocation.RevocationReasonEnum.Unspecified:
      {
        return {
          value: revocationReason,
          title: 'Unspecified',
          description: 'It is possible to revoke a certificate without providing a specific reason code. While it is possible to revoke a certificate with the Unspecified reason code, this is not recommended, as it does not provide an audit trail as to why a certificate is revoked.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
    default:
      {
        return {
          value: revocationReason,
          title: 'Unspecified',
          description: 'It is possible to revoke a certificate without providing a specific reason code. While it is possible to revoke a certificate with the Unspecified reason code, this is not recommended, as it does not provide an audit trail as to why a certificate is revoked.',
          reference: 'https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc700843(v=technet.10)?redirectedfrom=MSDN#revocation-reasons'
        };
      }
  }
};

/***/ }),

/***/ 84114:
/*!*******************************************!*\
  !*** ./src/app/common/certificateUtil.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   issueNewWithLocalKeys: () => (/* binding */ issueNewWithLocalKeys)
/* harmony export */ });
/* harmony import */ var _Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/@babel+runtime@7.25.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 18540);
/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! asn1js */ 5938);
/* harmony import */ var pkijs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pkijs */ 52769);
/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pvtsutils */ 84727);
/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pvutils */ 58172);





const issueNewWithLocalKeys = /*#__PURE__*/function () {
  var _ref = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificateService, itemType, mrn, orgMrn, generatePkcs12, instanceVersion) {
    try {
      const ecKeyGenParams = {
        name: 'ECDSA',
        namedCurve: 'P-384',
        typedCurve: ''
      };
      const keyPair = yield crypto.subtle.generateKey(ecKeyGenParams, true, ['sign', 'verify']);
      const csr = new pkijs__WEBPACK_IMPORTED_MODULE_2__.CertificationRequest();
      csr.subject.typesAndValues.push(new pkijs__WEBPACK_IMPORTED_MODULE_2__.AttributeTypeAndValue({
        type: '2.5.4.3',
        // Common name
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString({
          value: 'Test'
        })
      }));
      yield csr.subjectPublicKeyInfo.importKey(keyPair.publicKey);
      yield csr.sign(keyPair.privateKey, 'SHA-384');
      const csrBytes = csr.toSchema().toBER(false);
      const pemCsr = toPem(csrBytes, 'CERTIFICATE REQUEST');
      const certificateText = yield new Promise((resolve, reject) => {
        certificateService.issueNewCertificate(pemCsr, itemType, mrn, orgMrn).subscribe(cert => {
          // Handle successful response, e.g., process the certificate if needed
        }, err => {
          // Successful response but failure in PEM fitting to JSON format
          if (err.status === 201) {
            resolve(err.error.text); // Return the certificate text on 201 status
          } else {
            console.error('Error when trying to issue new certificate:', err.error.message);
            reject(err); // Reject the promise in case of error
          }
        });
      });
      const rawPrivateKey = yield crypto.subtle.exportKey('pkcs8', keyPair.privateKey);
      const rawPublicKey = yield crypto.subtle.exportKey('spki', keyPair.publicKey);
      const privateKey = new pkijs__WEBPACK_IMPORTED_MODULE_2__.PrivateKeyInfo({
        schema: (0,asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER)(rawPrivateKey).result
      });
      if (generatePkcs12) {
        const rawCerts = convertCertChain(certificateText);
        const certs = rawCerts.map(cert => new pkijs__WEBPACK_IMPORTED_MODULE_2__.Certificate({
          schema: (0,asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER)(cert).result
        }));
        const password = generatePassword();
        const pkcs12Keystore = yield generatePKCS12(privateKey, certs, password);
        return {
          certificate: certificateText,
          publicKey: toPem(rawPublicKey, 'PUBLIC KEY'),
          privateKey: toPem(rawPrivateKey, 'PRIVATE KEY'),
          pkcs12Keystore,
          keystorePassword: password
        };
      } else {
        return {
          certificate: certificateText,
          publicKey: toPem(rawPublicKey, 'PUBLIC KEY'),
          privateKey: toPem(rawPrivateKey, 'PRIVATE KEY')
        };
      }
    } catch (err) {
      console.error('Error while issuing new certificate:', err);
      return undefined;
    }
  });
  return function issueNewWithLocalKeys(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
const toPem = (arrayBuffer, type) => {
  let b64 = pvtsutils__WEBPACK_IMPORTED_MODULE_3__.Convert.ToBase64(arrayBuffer);
  let finalString = '';
  while (b64.length > 0) {
    finalString += b64.substring(0, 64) + '\n';
    b64 = b64.substring(64);
  }
  return `-----BEGIN ${type}-----\n${finalString}-----END ${type}-----\n`;
};
const convertCertChain = pemCertChain => {
  let certs = pemCertChain.split(/-----END CERTIFICATE-----/);
  certs = certs.slice(0, certs.length - 1);
  let tmp = certs.map(c => c.split(/-----BEGIN CERTIFICATE-----/)[1].replace(/\n/mg, ''));
  return tmp.map(c => pvtsutils__WEBPACK_IMPORTED_MODULE_3__.Convert.FromBase64(c));
};
const generatePassword = () => {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_^$#&!%';
  const values = new Uint32Array(26);
  crypto.getRandomValues(values);
  let result = '';
  for (const element of values) {
    result += charset[element % charset.length];
  }
  return result;
};
const generatePKCS12 = /*#__PURE__*/function () {
  var _ref2 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (privateKey, certs, password) {
    const keyLocalIDBuffer = new ArrayBuffer(4);
    const keyLocalIDView = new Uint8Array(keyLocalIDBuffer);
    (0,pkijs__WEBPACK_IMPORTED_MODULE_2__.getRandomValues)(keyLocalIDView);
    const certLocalIDBuffer = new ArrayBuffer(4);
    const certLocalIDView = new Uint8Array(certLocalIDBuffer);
    (0,pkijs__WEBPACK_IMPORTED_MODULE_2__.getRandomValues)(certLocalIDView);
    const caCertLocalIDBuffer = new ArrayBuffer(4);
    const caCertLocalIDView = new Uint8Array(caCertLocalIDBuffer);
    (0,pkijs__WEBPACK_IMPORTED_MODULE_2__.getRandomValues)(caCertLocalIDView);
    const bitArray = new ArrayBuffer(1);
    const bitView = new Uint8Array(bitArray);
    // tslint:disable-next-line:no-bitwise
    bitView[0] |= 0x80;
    const keyUsage = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
      valueHex: bitArray,
      unusedBits: 7
    });
    privateKey.attributes = [new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
      type: '2.5.29.15',
      values: [keyUsage]
    })];
    let certCn = '';
    certs[0].subject.typesAndValues.forEach(t => {
      if (t.type === '2.5.4.3') {
        certCn = t.value.valueBlock.value;
      }
    });
    let caCn = '';
    certs[1].subject.typesAndValues.forEach(t => {
      if (t.type === '2.5.4.3') {
        caCn = t.value.valueBlock.value;
      }
    });
    const pfx = new pkijs__WEBPACK_IMPORTED_MODULE_2__.PFX({
      parsedValue: {
        integrityMode: 0,
        authenticatedSafe: new pkijs__WEBPACK_IMPORTED_MODULE_2__.AuthenticatedSafe({
          parsedValue: {
            safeContents: [{
              privacyMode: 0,
              value: new pkijs__WEBPACK_IMPORTED_MODULE_2__.SafeContents({
                safeBags: [new pkijs__WEBPACK_IMPORTED_MODULE_2__.SafeBag({
                  bagId: '1.2.840.113549.1.12.10.1.2',
                  bagValue: new pkijs__WEBPACK_IMPORTED_MODULE_2__.PKCS8ShroudedKeyBag({
                    parsedValue: privateKey
                  }),
                  bagAttributes: [new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.20',
                    // friendlyName
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: 'PKCS8ShroudedKeyBag from PKIjs'
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.21',
                    // localKeyID
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                      valueHex: keyLocalIDBuffer
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.3.6.1.4.1.311.17.1',
                    // pkcs12KeyProviderNameAttr
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: 'MCP using https://pkijs.org/'
                    })]
                  })]
                })]
              })
            }, {
              privacyMode: 1,
              value: new pkijs__WEBPACK_IMPORTED_MODULE_2__.SafeContents({
                safeBags: [new pkijs__WEBPACK_IMPORTED_MODULE_2__.SafeBag({
                  bagId: '1.2.840.113549.1.12.10.1.3',
                  bagValue: new pkijs__WEBPACK_IMPORTED_MODULE_2__.CertBag({
                    parsedValue: certs[0]
                  }),
                  bagAttributes: [new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.20',
                    // friendlyName
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: certCn
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.21',
                    // localKeyID
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                      valueHex: certLocalIDBuffer
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.3.6.1.4.1.311.17.1',
                    // pkcs12KeyProviderNameAttr
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: 'MCP using https://pkijs.org/'
                    })]
                  })]
                }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.SafeBag({
                  bagId: '1.2.840.113549.1.12.10.1.3',
                  bagValue: new pkijs__WEBPACK_IMPORTED_MODULE_2__.CertBag({
                    parsedValue: certs[1]
                  }),
                  bagAttributes: [new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.20',
                    // friendlyName
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: caCn
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.2.840.113549.1.9.21',
                    // localKeyID
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                      valueHex: caCertLocalIDBuffer
                    })]
                  }), new pkijs__WEBPACK_IMPORTED_MODULE_2__.Attribute({
                    type: '1.3.6.1.4.1.311.17.1',
                    // pkcs12KeyProviderNameAttr
                    values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString({
                      value: 'MCP using https://pkijs.org/'
                    })]
                  })]
                })]
              })
            }]
          }
        })
      }
    });
    const passwordConverted = (0,pvutils__WEBPACK_IMPORTED_MODULE_4__.stringToArrayBuffer)(password);
    yield pfx.parsedValue.authenticatedSafe.parsedValue.safeContents[0].value.safeBags[0].bagValue.makeInternalValues({
      password: passwordConverted,
      contentEncryptionAlgorithm: {
        name: 'AES-CBC',
        // OpenSSL can handle AES-CBC only
        length: 128
      },
      hmacHashAlgorithm: 'SHA-1',
      iterationCount: 100000
    });
    yield pfx.parsedValue.authenticatedSafe.makeInternalValues({
      safeContents: [{
        // Empty parameters for first SafeContent since "No Privacy" protection mode there
      }, {
        password: passwordConverted,
        contentEncryptionAlgorithm: {
          name: 'AES-CBC',
          // OpenSSL can handle AES-CBC only
          length: 128
        },
        hmacHashAlgorithm: 'SHA-1',
        iterationCount: 100000
      }]
    });
    yield pfx.makeInternalValues({
      password: passwordConverted,
      iterations: 100000,
      pbkdf2HashAlgorithm: 'SHA-256',
      hmacHashAlgorithm: 'SHA-256'
    });
    return pfx.toSchema().toBER(false);
  });
  return function generatePKCS12(_x7, _x8, _x9) {
    return _ref2.apply(this, arguments);
  };
}();

/***/ }),

/***/ 21197:
/*!************************************************!*\
  !*** ./src/app/common/columnForCertificate.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveCertificatesColumn: () => (/* binding */ ActiveCertificatesColumn),
/* harmony export */   RevokedCertificatesColumn: () => (/* binding */ RevokedCertificatesColumn)
/* harmony export */ });
/* harmony import */ var _timeConverter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timeConverter */ 71066);
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * a json format for active certificates articulating how the corresponding interface should work
 */
const ActiveCertificatesColumn = {
  serialNumber: {
    title: 'Serial number',
    type: 'string'
  },
  start: {
    title: 'Valid from',
    type: 'string',
    valuePrepareFunction: timestamp => {
      return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_0__.convertTime)(timestamp);
    }
  },
  end: {
    title: 'Valid until',
    type: 'string',
    valuePrepareFunction: timestamp => {
      return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_0__.convertTime)(timestamp);
    }
  }
};
/**
 * a json format for revoked certificates articulating how the corresponding interface should work
 */
const RevokedCertificatesColumn = {
  serialNumber: {
    title: 'Serial number',
    type: 'string'
  },
  revokedAt: {
    title: 'Revoked from',
    type: 'string',
    valuePrepareFunction: timestamp => {
      return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_0__.convertTime)(timestamp);
    }
  },
  revokeReason: {
    title: 'Reason',
    type: 'string'
  }
};

/***/ }),

/***/ 14943:
/*!*****************************************!*\
  !*** ./src/app/common/columnForMenu.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnForResource: () => (/* binding */ ColumnForResource)
/* harmony export */ });
/* harmony import */ var _countryOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countryOptions */ 80781);
/* harmony import */ var _timeConverter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timeConverter */ 71066);
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * a json format for both ngx-smart-table and ngx-editable-form articulating how the corresponding interface should work
 */
const ColumnForResource = {
  device: {
    id: {
      title: 'ID',
      type: 'number',
      description: 'identifier'
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true,
      shortIdType: 'device',
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>:<unique_id>'"
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of device',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    permissions: {
      title: 'Permissions',
      type: 'string',
      description: 'List of permissions assigned by the organization',
      visibleFrom: ['edit', 'detail', 'edit', 'edit-new']
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  organization: {
    id: {
      title: 'ID',
      type: 'number'
    },
    logo: {
      title: 'Logo',
      type: 'image',
      allowedExtensions: ['.jpg', '.png'],
      visibleFrom: ['detail', 'edit']
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true,
      shortIdType: 'organization',
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>'"
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of organization',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    email: {
      title: 'e-mail',
      type: 'string',
      description: 'Contact e-mail',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    url: {
      title: 'URL',
      type: 'string',
      description: 'URL of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    address: {
      title: 'Address',
      type: 'string',
      description: 'Address of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    country: {
      title: 'Country',
      type: 'string',
      description: 'Country that organization belongs to',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      options: _countryOptions__WEBPACK_IMPORTED_MODULE_0__.countryOptions,
      required: true
    },
    federationType: {
      title: 'Federation type',
      type: 'string',
      description: 'OpenID Connect federation type',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      immutable: true
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  service: {
    id: {
      title: 'ID',
      type: 'number'
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true,
      shortIdType: 'service',
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>:<unique_id>'"
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of service',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    permissions: {
      title: 'Permissions',
      type: 'string',
      description: 'List of permissions assigned by the organization',
      visibleFrom: ['edit', 'detail', 'edit', 'edit-new']
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    instanceVersion: {
      title: 'Instance version',
      type: 'string',
      description: 'Version of service instance',
      immutable: true
    },
    certDomainName: {
      title: 'Certificate domain name',
      type: 'string',
      description: 'The domain name the service will be available on. Used in the issued certificates for the service.',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    oidcClientId: {
      title: 'OIDC client ID',
      type: 'string',
      description: 'OpenID Connect client ID',
      visibleFrom: ['detail', 'edit']
    },
    oidcClientSecret: {
      title: 'OIDC client secret',
      type: 'string',
      description: 'OpenID Connect client secret',
      visibleFrom: ['detail', 'edit']
    },
    oidcAccessType: {
      title: 'Access type',
      type: 'string',
      description: 'OpenID Connect access type',
      options: [{
        title: 'public',
        value: 'public',
        showField: {
          key: 'oidcRedirectUri',
          value: true
        }
      }, {
        title: 'bearer-only',
        value: 'bearer-only',
        showField: {
          key: 'oidcRedirectUri',
          value: false
        }
      }, {
        title: 'confidential',
        value: 'confidential',
        showField: {
          key: 'oidcRedirectUri',
          value: true
        }
      }],
      visibleFrom: ['detail', 'edit']
    },
    oidcRedirectUri: {
      title: 'OIDC redirect URI',
      type: 'string',
      description: 'OpenID Connect client redirect URI',
      visibleFrom: ['detail', 'edit']
    },
    vessel: {
      title: 'Vessel',
      type: 'vessel',
      description: 'Correlated vessel',
      visibleFrom: ['detail', 'edit']
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  user: {
    id: {
      title: 'ID',
      type: 'number'
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true,
      shortIdType: 'user',
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>:<unique_id>'"
    },
    firstName: {
      title: 'First name',
      type: 'string',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    lastName: {
      title: 'Last name',
      type: 'string',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    email: {
      title: 'e-mail',
      type: 'string',
      description: 'Contact e-mail',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true
    },
    permissions: {
      title: 'Permissions',
      type: 'string',
      description: 'List of permissions assigned by the organization',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new']
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  vessel: {
    id: {
      title: 'ID',
      type: 'number'
    },
    logo: {
      title: 'Logo',
      type: 'image',
      allowedExtensions: ['.jpg', '.png'],
      visibleFrom: ['detail', 'edit']
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      immutable: true,
      required: true,
      shortIdType: 'vessel',
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>:<unique_id>'"
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of device',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    permissions: {
      title: 'Permissions',
      type: 'string',
      description: 'List of permissions assigned by the organization',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    // vessel specific
    imoNumber: {
      title: 'IMO number',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    mmsiNumber: {
      title: 'MMSI number',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    callsign: {
      title: 'Call sign',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    flagstate: {
      title: 'Flag state',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    aisClass: {
      title: 'AIS class',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    portOfRegister: {
      title: 'Port of register',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  role: {
    id: {
      title: 'ID',
      type: 'number'
    },
    permission: {
      title: 'Permission',
      type: 'string',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    roleName: {
      title: 'Role name',
      type: 'string',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      options: [{
        title: 'ROLE_SITE_ADMIN',
        value: 'ROLE_SITE_ADMIN'
      }, {
        title: 'ROLE_ORG_ADMIN',
        value: 'ROLE_ORG_ADMIN'
      }, {
        title: 'ROLE_USER',
        value: 'ROLE_USER'
      }, {
        title: 'ROLE_ENTITY_ADMIN',
        value: 'ROLE_ENTITY_ADMIN'
      }, {
        title: 'ROLE_USER_ADMIN',
        value: 'ROLE_USER_ADMIN'
      }, {
        title: 'ROLE_VESSEL_ADMIN',
        value: 'ROLE_VESSEL_ADMIN'
      }, {
        title: 'ROLE_SERVICE_ADMIN',
        value: 'ROLE_SERVICE_ADMIN'
      }, {
        title: 'ROLE_APPROVE_ORG',
        value: 'ROLE_APPROVE_ORG'
      }, {
        title: 'ROLE_DEVICE_ADMIN',
        value: 'ROLE_DEVICE_ADMIN'
      }, {
        title: 'ROLE_MMS_ADMIN',
        value: 'ROLE_MMS_ADMIN'
      }],
      required: true
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  orgcandidate: {
    id: {
      title: 'ID',
      type: 'number'
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      shortIdType: 'organization',
      immutable: true,
      required: true,
      error: "Please enter a valid MCP MRN, respecting the format 'urn:mrn:mcp:<entity_type>:<id_provider_id>:<org_id>'"
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of organization',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    mrnSubsidiary: {
      title: 'Subsidiary MRN',
      type: 'string',
      description: 'Additional MRN assigned to entity',
      visibleFrom: ['detail', 'edit']
    },
    homeMMSUrl: {
      title: 'Home MMS URL',
      type: 'string',
      description: 'URL of home MMS'
    },
    email: {
      title: 'e-mail',
      type: 'string',
      description: 'Contact e-mail',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    url: {
      title: 'URL',
      type: 'string',
      description: 'URL of organization',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    address: {
      title: 'Address',
      type: 'string',
      description: 'Address of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    country: {
      title: 'Country',
      type: 'string',
      description: 'Country that organization belongs to',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      options: _countryOptions__WEBPACK_IMPORTED_MODULE_0__.countryOptions,
      required: true
    },
    federationType: {
      title: 'Federation type',
      type: 'string',
      description: 'OpenID Connect federation type',
      visibleFrom: ['detail', 'edit'],
      immutable: true
    },
    createdAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    },
    updatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      valuePrepareFunction: timestamp => {
        return (0,_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(timestamp);
      },
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'list']
    }
  },
  instance: {
    id: {
      title: 'ID',
      type: 'number'
    },
    instanceId: {
      title: 'Instance ID',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      placeholder: 'urn:mrn:',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of service instance',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    version: {
      title: 'Version',
      type: 'string',
      description: 'Version of service instance',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    comment: {
      title: 'Comment',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    serviceType: {
      title: 'Service type',
      type: 'stringArray',
      options: [{
        title: 'MS 1 - VTS Information service (INS)',
        value: 'VTSInformationService'
      }, {
        title: 'MS 2 - VTS Navigational assistance service (NAS)',
        value: 'VTSNavigationalAssistanceService'
      }, {
        title: 'MS 3 - Traffic organization service (TOS)',
        value: 'TrafficOrganizationService'
      }, {
        title: 'MS 4 - Port support service (PSS)',
        value: 'PortSupportService'
      }, {
        title: 'MS 5 - Maritime safety information (MSI) service',
        value: 'MaritimeSafetyInformationService'
      }, {
        title: 'MS 6 - Pilotage service',
        value: 'PilotageService'
      }, {
        title: 'MS 7 - Tug service',
        value: 'TugService'
      }, {
        title: 'MS 8 - Vessel shore reporting',
        value: 'VesselShoreReporting'
      }, {
        title: 'MS 9 - Telemedical assistance service (TMAS)',
        value: 'TelemedicalAssistanceService'
      }, {
        title: 'MS 10 - Maritime assistance service (MAS)',
        value: 'MaritimeAssistanceService'
      }, {
        title: 'MS 11 - Nautical chart service',
        value: 'NauticalChartService'
      }, {
        title: 'MS 12 - Nautical publications service',
        value: 'NauticalPublicationsService'
      }, {
        title: 'MS 13 - Ice navigation service',
        value: 'IceNavigationService'
      }, {
        title: 'MS 14 - Meteorological information service',
        value: 'MeteorologicalInformationService'
      }, {
        title: 'MS 15 - Real-time hydrographic and environmental information services',
        value: 'RealTimeHydrographicAndEnvironmentalInformationServices'
      }, {
        title: 'MS 16 - Search and rescue (SAR) service',
        value: 'SearchAndRescueService'
      }, {
        title: 'Other',
        value: 'other:etc'
      }],
      description: 'The service type shall reflect the associated operational service type provided according to defined types',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new']
    },
    dataProductType: {
      title: 'Data product type',
      type: 'stringArray',
      options: [{
        title: 'S-57 Electronic Navigational Chart (ENC)',
        value: 'S57'
      }, {
        title: 'S-101 Electronic Navigational Chart (ENC)',
        value: 'S101'
      }, {
        title: 'S-102 Bathymetric Surface',
        value: 'S102'
      }, {
        title: 'S-104 Water Level Information for Surface Navigation',
        value: 'S104'
      }, {
        title: 'S-111 Surface Currents',
        value: 'S111'
      }, {
        title: 'S-122 Marine Protected Areas (MPAs)',
        value: 'S122'
      }, {
        title: 'S-123 Marine Radio Services',
        value: 'S123'
      }, {
        title: 'S-124 Navigational Warnings',
        value: 'S124'
      }, {
        title: 'S-125 Marine Navigational Services',
        value: 'S125'
      }, {
        title: 'S-126 Marine Physical Environment',
        value: 'S126'
      }, {
        title: 'S-127 Marine Traffic Management',
        value: 'S127'
      }, {
        title: 'S-128 Catalogue of Nautical Products',
        value: 'S128'
      }, {
        title: 'S-129 Under Keel Clearance Management (UKCM)',
        value: 'S129'
      }, {
        title: 'S-131 Marine Harbour Infrastructure',
        value: 'S131'
      }, {
        title: 'S-210 Inter-VTS Exchange Format',
        value: 'S210'
      }, {
        title: 'S-211 Port Call Message Format',
        value: 'S211'
      }, {
        title: 'S-212 VTS Digital Information Service',
        value: 'S212'
      }, {
        title: 'S-401 Inland ENC',
        value: 'S401'
      }, {
        title: 'S-402 Bathymetric Contour Overlay for Inland ENC',
        value: 'S402'
      }, {
        title: 'S-411 Sea Ice Information',
        value: 'S411'
      }, {
        title: 'S-412 Weather Overlay',
        value: 'S412'
      }, {
        title: 'S-413 Marine Weather Conditions',
        value: 'S413'
      }, {
        title: 'S-414 Marine Weather Observations',
        value: 'S414'
      }, {
        title: 'S-421 Route Plan',
        value: 'S421'
      }, {
        title: 'Route Plan',
        value: 'RTZ'
      }, {
        title: 'Electronic Port Clearance',
        value: 'EPC'
      }, {
        title: 'Other data types not covered in this table',
        value: 'OTHER'
      }],
      description: 'Data product type defined in IEC 63173-2 SECOM standard',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new']
    },
    status: {
      title: 'Status',
      type: 'string',
      options: [{
        title: 'Provisional',
        value: 'PROVISIONAL'
      }, {
        title: 'Released',
        value: 'RELEASED'
      }, {
        title: 'Deprecated',
        value: 'DEPRECATED'
      }, {
        title: 'Deleted',
        value: 'DELETED'
      }],
      visibleFrom: ['detail', 'list', 'edit', 'edit-new'],
      required: true
    },
    endpointUri: {
      title: 'Endpoint URI',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    endpointType: {
      title: 'Endpoint type',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    organizationId: {
      title: 'Organization ID',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      immutable: true
    },
    keywords: {
      title: 'Keywords',
      type: 'stringArray',
      placeholder: 'Please enter keyword',
      visibleFrom: ['detail', 'list', 'edit', 'edit-new']
    },
    implementsServiceDesign: {
      title: 'Technical design ID',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      placeholder: 'urn:mrn:',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    implementsServiceDesignVersion: {
      title: 'Technical design version',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    geometryContentType: {
      title: 'Geometry content type',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    geometry: {
      title: 'Geometry',
      type: 'object',
      visibleFrom: []
    },
    unlocode: {
      title: 'Unlocode',
      type: 'string',
      placeholder: 'Please enter UN/LOCODE',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    mmsi: {
      title: 'MMSI',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    imo: {
      title: 'IMO number',
      type: 'string',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    instanceAsXml: {
      title: 'Instance as XML',
      type: 'xml',
      notShowOnEdit: true,
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    instanceAsDocId: {
      title: 'Instance as DocId',
      type: 'number'
    },
    instanceAsDoc: {
      title: 'Instance as document',
      type: 'file',
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    ledgerRequestId: {
      title: 'Ledger Request ID',
      type: 'number'
    },
    ledgerRequestStatus: {
      title: 'Ledger Request status',
      type: 'string',
      options: [{
        title: 'Inactive',
        value: 'INACTIVE'
      }, {
        title: 'Created',
        value: 'CREATED'
      }, {
        title: 'Vetting',
        value: 'VETTING'
      }, {
        title: 'Vetted',
        value: 'VETTED'
      }, {
        title: 'Requesting',
        value: 'REQUESTING'
      }, {
        title: 'Succeeded',
        value: 'SUCCEEDED'
      }, {
        title: 'Failed',
        value: 'FAILED'
      }, {
        title: 'Rejected',
        value: 'REJECTED'
      }],
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    docIds: {
      title: 'Related documents',
      type: 'fileArray',
      filter: false,
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    publishedAt: {
      title: 'Created at',
      type: 'string',
      description: 'Time of creation',
      filter: false,
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail', 'edit', 'edit-new']
    },
    lastUpdatedAt: {
      title: 'Updated at',
      type: 'string',
      description: 'Time of last update',
      filter: false,
      immutable: true,
      notShowOnEdit: true,
      visibleFrom: ['detail']
    }
  },
  newOrganization: {
    orgMrn: {
      title: 'Maritime Resource Name (MRN) for organization',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true,
      shortIdType: 'organization'
    },
    orgName: {
      title: 'Organization name',
      type: 'string',
      description: 'Name of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    orgEmail: {
      title: 'Organization contact e-mail',
      type: 'string',
      description: 'Contact e-mail',
      placeholder: 'non-personal email, e.g., info@example.org',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    orgUrl: {
      title: 'URL of organization',
      type: 'string',
      description: 'URL of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    orgAddress: {
      title: 'Address of organization',
      type: 'string',
      description: 'Address of organization',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      required: true
    },
    orgCountry: {
      title: 'Country of organization',
      type: 'stringArray',
      description: 'Country that organization belongs to',
      visibleFrom: ['detail', 'edit', 'edit-new'],
      options: _countryOptions__WEBPACK_IMPORTED_MODULE_0__.countryOptions,
      required: true
    }
  },
  ledgerInstance: {
    name: {
      title: 'Name',
      type: 'string',
      description: 'Name of service instance',
      visibleFrom: ['list']
    },
    mrn: {
      title: 'MRN',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['list']
    },
    version: {
      title: 'Version',
      type: 'string',
      description: 'Version of service instance',
      visibleFrom: ['list']
    },
    keywords: {
      title: 'Keywords',
      type: 'string',
      visibleFrom: ['list']
    },
    coverageArea: {
      title: 'Coverage ',
      type: 'string'
    },
    status: {
      title: 'Status',
      type: 'string',
      options: [{
        title: 'Provisional',
        value: 'PROVISIONAL'
      }, {
        title: 'Released',
        value: 'RELEASED'
      }, {
        title: 'Deprecated',
        value: 'DEPRECATED'
      }, {
        title: 'Deleted',
        value: 'DELETED'
      }],
      visibleFrom: ['list']
    },
    implementsDesignMRN: {
      title: 'Technical design ID',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['list'],
      shortIdType: 'design',
      immutable: true
    },
    implementsDesignVersion: {
      title: 'Technical design version',
      type: 'string',
      description: 'MCP MRN as unique identifer',
      visibleFrom: ['list']
    },
    msrName: {
      title: 'MSR Name of register',
      type: 'string',
      visibleFrom: ['list']
    },
    msrUrl: {
      title: 'MSR URL of register',
      type: 'string',
      visibleFrom: ['list']
    }
  }
};

/***/ }),

/***/ 80781:
/*!******************************************!*\
  !*** ./src/app/common/countryOptions.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   countryOptions: () => (/* binding */ countryOptions)
/* harmony export */ });
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * country information collection for the country select menu
 */
const countryOptions = [{
  code: "AF",
  code3: "AFG",
  title: "Afghanistan",
  value: "Afghanistan"
}, {
  code: "AL",
  code3: "ALB",
  title: "Albania",
  value: "Albania"
}, {
  code: "DZ",
  code3: "DZA",
  title: "Algeria",
  value: "Algeria"
}, {
  code: "AS",
  code3: "ASM",
  title: "American Samoa",
  value: "American Samoa"
}, {
  code: "AD",
  code3: "AND",
  title: "Andorra",
  value: "Andorra"
}, {
  code: "AO",
  code3: "AGO",
  title: "Angola",
  value: "Angola"
}, {
  code: "AI",
  code3: "AIA",
  title: "Anguilla",
  value: "Anguilla"
}, {
  code: "AQ",
  code3: "ATA",
  title: "Antarctica",
  value: "Antarctica"
}, {
  code: "AG",
  code3: "ATG",
  title: "Antigua and Barbuda",
  value: "Antigua and Barbuda"
}, {
  code: "AR",
  code3: "ARG",
  title: "Argentina",
  value: "Argentina"
}, {
  code: "AM",
  code3: "ARM",
  title: "Armenia",
  value: "Armenia"
}, {
  code: "AW",
  code3: "ABW",
  title: "Aruba",
  value: "Aruba"
}, {
  code: "AU",
  code3: "AUS",
  title: "Australia",
  value: "Australia"
}, {
  code: "AT",
  code3: "AUT",
  title: "Austria",
  value: "Austria"
}, {
  code: "AZ",
  code3: "AZE",
  title: "Azerbaijan",
  value: "Azerbaijan"
}, {
  code: "BS",
  code3: "BHS",
  title: "Bahamas (the)",
  value: "Bahamas (the)"
}, {
  code: "BH",
  code3: "BHR",
  title: "Bahrain",
  value: "Bahrain"
}, {
  code: "BD",
  code3: "BGD",
  title: "Bangladesh",
  value: "Bangladesh"
}, {
  code: "BB",
  code3: "BRB",
  title: "Barbados",
  value: "Barbados"
}, {
  code: "BY",
  code3: "BLR",
  title: "Belarus",
  value: "Belarus"
}, {
  code: "BE",
  code3: "BEL",
  title: "Belgium",
  value: "Belgium"
}, {
  code: "BZ",
  code3: "BLZ",
  title: "Belize",
  value: "Belize"
}, {
  code: "BJ",
  code3: "BEN",
  title: "Benin",
  value: "Benin"
}, {
  code: "BM",
  code3: "BMU",
  title: "Bermuda",
  value: "Bermuda"
}, {
  code: "BT",
  code3: "BTN",
  title: "Bhutan",
  value: "Bhutan"
}, {
  code: "BO",
  code3: "BOL",
  title: "Bolivia (Plurinational State of)",
  value: "Bolivia (Plurinational State of)"
}, {
  code: "BQ",
  code3: "BES",
  title: "Bonaire, Sint Eustatius and Saba",
  value: "Bonaire, Sint Eustatius and Saba"
}, {
  code: "BA",
  code3: "BIH",
  title: "Bosnia and Herzegovina",
  value: "Bosnia and Herzegovina"
}, {
  code: "BW",
  code3: "BWA",
  title: "Botswana",
  value: "Botswana"
}, {
  code: "BV",
  code3: "BVT",
  title: "Bouvet Island",
  value: "Bouvet Island"
}, {
  code: "BR",
  code3: "BRA",
  title: "Brazil",
  value: "Brazil"
}, {
  code: "IO",
  code3: "IOT",
  title: "British Indian Ocean Territory (the)",
  value: "British Indian Ocean Territory (the)"
}, {
  code: "BN",
  code3: "BRN",
  title: "Brunei Darussalam",
  value: "Brunei Darussalam"
}, {
  code: "BG",
  code3: "BGR",
  title: "Bulgaria",
  value: "Bulgaria"
}, {
  code: "BF",
  code3: "BFA",
  title: "Burkina Faso",
  value: "Burkina Faso"
}, {
  code: "BI",
  code3: "BDI",
  title: "Burundi",
  value: "Burundi"
}, {
  code: "CV",
  code3: "CPV",
  title: "Cabo Verde",
  value: "Cabo Verde"
}, {
  code: "KH",
  code3: "KHM",
  title: "Cambodia",
  value: "Cambodia"
}, {
  code: "CM",
  code3: "CMR",
  title: "Cameroon",
  value: "Cameroon"
}, {
  code: "CA",
  code3: "CAN",
  title: "Canada",
  value: "Canada"
}, {
  code: "KY",
  code3: "CYM",
  title: "Cayman Islands (the)",
  value: "Cayman Islands (the)"
}, {
  code: "CF",
  code3: "CAF",
  title: "Central African Republic (the)",
  value: "Central African Republic (the)"
}, {
  code: "TD",
  code3: "TCD",
  title: "Chad",
  value: "Chad"
}, {
  code: "CL",
  code3: "CHL",
  title: "Chile",
  value: "Chile"
}, {
  code: "CN",
  code3: "CHN",
  title: "China",
  value: "China"
}, {
  code: "CX",
  code3: "CXR",
  title: "Christmas Island",
  value: "Christmas Island"
}, {
  code: "CC",
  code3: "CCK",
  title: "Cocos (Keeling) Islands (the)",
  value: "Cocos (Keeling) Islands (the)"
}, {
  code: "CO",
  code3: "COL",
  title: "Colombia",
  value: "Colombia"
}, {
  code: "KM",
  code3: "COM",
  title: "Comoros (the)",
  value: "Comoros (the)"
}, {
  code: "CD",
  code3: "COD",
  title: "Congo (the Democratic Republic of the)",
  value: "Congo (the Democratic Republic of the)"
}, {
  code: "CG",
  code3: "COG",
  title: "Congo (the)",
  value: "Congo (the)"
}, {
  code: "CK",
  code3: "COK",
  title: "Cook Islands (the)",
  value: "Cook Islands (the)"
}, {
  code: "CR",
  code3: "CRI",
  title: "Costa Rica",
  value: "Costa Rica"
}, {
  code: "HR",
  code3: "HRV",
  title: "Croatia",
  value: "Croatia"
}, {
  code: "CU",
  code3: "CUB",
  title: "Cuba",
  value: "Cuba"
}, {
  code: "CW",
  code3: "CUW",
  title: "Curaçao",
  value: "Curaçao"
}, {
  code: "CY",
  code3: "CYP",
  title: "Cyprus",
  value: "Cyprus"
}, {
  code: "CZ",
  code3: "CZE",
  title: "Czechia",
  value: "Czechia"
}, {
  code: "CI",
  code3: "CIV",
  title: "Côte d'Ivoire",
  value: "Côte d'Ivoire"
}, {
  code: "DK",
  code3: "DNK",
  title: "Denmark",
  value: "Denmark"
}, {
  code: "DJ",
  code3: "DJI",
  title: "Djibouti",
  value: "Djibouti"
}, {
  code: "DM",
  code3: "DMA",
  title: "Dominica",
  value: "Dominica"
}, {
  code: "DO",
  code3: "DOM",
  title: "Dominican Republic (the)",
  value: "Dominican Republic (the)"
}, {
  code: "EC",
  code3: "ECU",
  title: "Ecuador",
  value: "Ecuador"
}, {
  code: "EG",
  code3: "EGY",
  title: "Egypt",
  value: "Egypt"
}, {
  code: "SV",
  code3: "SLV",
  title: "El Salvador",
  value: "El Salvador"
}, {
  code: "GQ",
  code3: "GNQ",
  title: "Equatorial Guinea",
  value: "Equatorial Guinea"
}, {
  code: "ER",
  code3: "ERI",
  title: "Eritrea",
  value: "Eritrea"
}, {
  code: "EE",
  code3: "EST",
  title: "Estonia",
  value: "Estonia"
}, {
  code: "SZ",
  code3: "SWZ",
  title: "Eswatini",
  value: "Eswatini"
}, {
  code: "ET",
  code3: "ETH",
  title: "Ethiopia",
  value: "Ethiopia"
}, {
  code: "FK",
  code3: "FLK",
  title: "Falkland Islands (the) [Malvinas]",
  value: "Falkland Islands (the) [Malvinas]"
}, {
  code: "FO",
  code3: "FRO",
  title: "Faroe Islands (the)",
  value: "Faroe Islands (the)"
}, {
  code: "FJ",
  code3: "FJI",
  title: "Fiji",
  value: "Fiji"
}, {
  code: "FI",
  code3: "FIN",
  title: "Finland",
  value: "Finland"
}, {
  code: "FR",
  code3: "FRA",
  title: "France",
  value: "France"
}, {
  code: "GF",
  code3: "GUF",
  title: "French Guiana",
  value: "French Guiana"
}, {
  code: "PF",
  code3: "PYF",
  title: "French Polynesia",
  value: "French Polynesia"
}, {
  code: "TF",
  code3: "ATF",
  title: "French Southern Territories (the)",
  value: "French Southern Territories (the)"
}, {
  code: "GA",
  code3: "GAB",
  title: "Gabon",
  value: "Gabon"
}, {
  code: "GM",
  code3: "GMB",
  title: "Gambia (the)",
  value: "Gambia (the)"
}, {
  code: "GE",
  code3: "GEO",
  title: "Georgia",
  value: "Georgia"
}, {
  code: "DE",
  code3: "DEU",
  title: "Germany",
  value: "Germany"
}, {
  code: "GH",
  code3: "GHA",
  title: "Ghana",
  value: "Ghana"
}, {
  code: "GI",
  code3: "GIB",
  title: "Gibraltar",
  value: "Gibraltar"
}, {
  code: "GR",
  code3: "GRC",
  title: "Greece",
  value: "Greece"
}, {
  code: "GL",
  code3: "GRL",
  title: "Greenland",
  value: "Greenland"
}, {
  code: "GD",
  code3: "GRD",
  title: "Grenada",
  value: "Grenada"
}, {
  code: "GP",
  code3: "GLP",
  title: "Guadeloupe",
  value: "Guadeloupe"
}, {
  code: "GU",
  code3: "GUM",
  title: "Guam",
  value: "Guam"
}, {
  code: "GT",
  code3: "GTM",
  title: "Guatemala",
  value: "Guatemala"
}, {
  code: "GG",
  code3: "GGY",
  title: "Guernsey",
  value: "Guernsey"
}, {
  code: "GN",
  code3: "GIN",
  title: "Guinea",
  value: "Guinea"
}, {
  code: "GW",
  code3: "GNB",
  title: "Guinea-Bissau",
  value: "Guinea-Bissau"
}, {
  code: "GY",
  code3: "GUY",
  title: "Guyana",
  value: "Guyana"
}, {
  code: "HT",
  code3: "HTI",
  title: "Haiti",
  value: "Haiti"
}, {
  code: "HM",
  code3: "HMD",
  title: "Heard Island and McDonald Islands",
  value: "Heard Island and McDonald Islands"
}, {
  code: "VA",
  code3: "VAT",
  title: "Holy See (the)",
  value: "Holy See (the)"
}, {
  code: "HN",
  code3: "HND",
  title: "Honduras",
  value: "Honduras"
}, {
  code: "HK",
  code3: "HKG",
  title: "Hong Kong",
  value: "Hong Kong"
}, {
  code: "HU",
  code3: "HUN",
  title: "Hungary",
  value: "Hungary"
}, {
  code: "IS",
  code3: "ISL",
  title: "Iceland",
  value: "Iceland"
}, {
  code: "IN",
  code3: "IND",
  title: "India",
  value: "India"
}, {
  code: "ID",
  code3: "IDN",
  title: "Indonesia",
  value: "Indonesia"
}, {
  code: "IR",
  code3: "IRN",
  title: "Iran (Islamic Republic of)",
  value: "Iran (Islamic Republic of)"
}, {
  code: "IQ",
  code3: "IRQ",
  title: "Iraq",
  value: "Iraq"
}, {
  code: "IE",
  code3: "IRL",
  title: "Ireland",
  value: "Ireland"
}, {
  code: "IM",
  code3: "IMN",
  title: "Isle of Man",
  value: "Isle of Man"
}, {
  code: "IL",
  code3: "ISR",
  title: "Israel",
  value: "Israel"
}, {
  code: "IT",
  code3: "ITA",
  title: "Italy",
  value: "Italy"
}, {
  code: "JM",
  code3: "JAM",
  title: "Jamaica",
  value: "Jamaica"
}, {
  code: "JP",
  code3: "JPN",
  title: "Japan",
  value: "Japan"
}, {
  code: "JE",
  code3: "JEY",
  title: "Jersey",
  value: "Jersey"
}, {
  code: "JO",
  code3: "JOR",
  title: "Jordan",
  value: "Jordan"
}, {
  code: "KZ",
  code3: "KAZ",
  title: "Kazakhstan",
  value: "Kazakhstan"
}, {
  code: "KE",
  code3: "KEN",
  title: "Kenya",
  value: "Kenya"
}, {
  code: "KI",
  code3: "KIR",
  title: "Kiribati",
  value: "Kiribati"
}, {
  code: "KP",
  code3: "PRK",
  title: "Korea (the Democratic People's Republic of)",
  value: "Korea (the Democratic People's Republic of)"
}, {
  code: "KR",
  code3: "KOR",
  title: "Korea (the Republic of)",
  value: "Korea (the Republic of)"
}, {
  code: "KW",
  code3: "KWT",
  title: "Kuwait",
  value: "Kuwait"
}, {
  code: "KG",
  code3: "KGZ",
  title: "Kyrgyzstan",
  value: "Kyrgyzstan"
}, {
  code: "LA",
  code3: "LAO",
  title: "Lao People's Democratic Republic (the)",
  value: "Lao People's Democratic Republic (the)"
}, {
  code: "LV",
  code3: "LVA",
  title: "Latvia",
  value: "Latvia"
}, {
  code: "LB",
  code3: "LBN",
  title: "Lebanon",
  value: "Lebanon"
}, {
  code: "LS",
  code3: "LSO",
  title: "Lesotho",
  value: "Lesotho"
}, {
  code: "LR",
  code3: "LBR",
  title: "Liberia",
  value: "Liberia"
}, {
  code: "LY",
  code3: "LBY",
  title: "Libya",
  value: "Libya"
}, {
  code: "LI",
  code3: "LIE",
  title: "Liechtenstein",
  value: "Liechtenstein"
}, {
  code: "LT",
  code3: "LTU",
  title: "Lithuania",
  value: "Lithuania"
}, {
  code: "LU",
  code3: "LUX",
  title: "Luxembourg",
  value: "Luxembourg"
}, {
  code: "MO",
  code3: "MAC",
  title: "Macao",
  value: "Macao"
}, {
  code: "MG",
  code3: "MDG",
  title: "Madagascar",
  value: "Madagascar"
}, {
  code: "MW",
  code3: "MWI",
  title: "Malawi",
  value: "Malawi"
}, {
  code: "MY",
  code3: "MYS",
  title: "Malaysia",
  value: "Malaysia"
}, {
  code: "MV",
  code3: "MDV",
  title: "Maldives",
  value: "Maldives"
}, {
  code: "ML",
  code3: "MLI",
  title: "Mali",
  value: "Mali"
}, {
  code: "MT",
  code3: "MLT",
  title: "Malta",
  value: "Malta"
}, {
  code: "MH",
  code3: "MHL",
  title: "Marshall Islands (the)",
  value: "Marshall Islands (the)"
}, {
  code: "MQ",
  code3: "MTQ",
  title: "Martinique",
  value: "Martinique"
}, {
  code: "MR",
  code3: "MRT",
  title: "Mauritania",
  value: "Mauritania"
}, {
  code: "MU",
  code3: "MUS",
  title: "Mauritius",
  value: "Mauritius"
}, {
  code: "YT",
  code3: "MYT",
  title: "Mayotte",
  value: "Mayotte"
}, {
  code: "MX",
  code3: "MEX",
  title: "Mexico",
  value: "Mexico"
}, {
  code: "FM",
  code3: "FSM",
  title: "Micronesia (Federated States of)",
  value: "Micronesia (Federated States of)"
}, {
  code: "MD",
  code3: "MDA",
  title: "Moldova (the Republic of)",
  value: "Moldova (the Republic of)"
}, {
  code: "MC",
  code3: "MCO",
  title: "Monaco",
  value: "Monaco"
}, {
  code: "MN",
  code3: "MNG",
  title: "Mongolia",
  value: "Mongolia"
}, {
  code: "ME",
  code3: "MNE",
  title: "Montenegro",
  value: "Montenegro"
}, {
  code: "MS",
  code3: "MSR",
  title: "Montserrat",
  value: "Montserrat"
}, {
  code: "MA",
  code3: "MAR",
  title: "Morocco",
  value: "Morocco"
}, {
  code: "MZ",
  code3: "MOZ",
  title: "Mozambique",
  value: "Mozambique"
}, {
  code: "MM",
  code3: "MMR",
  title: "Myanmar",
  value: "Myanmar"
}, {
  code: "NA",
  code3: "NAM",
  title: "Namibia",
  value: "Namibia"
}, {
  code: "NR",
  code3: "NRU",
  title: "Nauru",
  value: "Nauru"
}, {
  code: "NP",
  code3: "NPL",
  title: "Nepal",
  value: "Nepal"
}, {
  code: "NL",
  code3: "NLD",
  title: "Netherlands (the)",
  value: "Netherlands (the)"
}, {
  code: "NC",
  code3: "NCL",
  title: "New Caledonia",
  value: "New Caledonia"
}, {
  code: "NZ",
  code3: "NZL",
  title: "New Zealand",
  value: "New Zealand"
}, {
  code: "NI",
  code3: "NIC",
  title: "Nicaragua",
  value: "Nicaragua"
}, {
  code: "NE",
  code3: "NER",
  title: "Niger (the)",
  value: "Niger (the)"
}, {
  code: "NG",
  code3: "NGA",
  title: "Nigeria",
  value: "Nigeria"
}, {
  code: "NU",
  code3: "NIU",
  title: "Niue",
  value: "Niue"
}, {
  code: "NF",
  code3: "NFK",
  title: "Norfolk Island",
  value: "Norfolk Island"
}, {
  code: "MP",
  code3: "MNP",
  title: "Northern Mariana Islands (the)",
  value: "Northern Mariana Islands (the)"
}, {
  code: "NO",
  code3: "NOR",
  title: "Norway",
  value: "Norway"
}, {
  code: "OM",
  code3: "OMN",
  title: "Oman",
  value: "Oman"
}, {
  code: "PK",
  code3: "PAK",
  title: "Pakistan",
  value: "Pakistan"
}, {
  code: "PW",
  code3: "PLW",
  title: "Palau",
  value: "Palau"
}, {
  code: "PS",
  code3: "PSE",
  title: "Palestine, State of",
  value: "Palestine, State of"
}, {
  code: "PA",
  code3: "PAN",
  title: "Panama",
  value: "Panama"
}, {
  code: "PG",
  code3: "PNG",
  title: "Papua New Guinea",
  value: "Papua New Guinea"
}, {
  code: "PY",
  code3: "PRY",
  title: "Paraguay",
  value: "Paraguay"
}, {
  code: "PE",
  code3: "PER",
  title: "Peru",
  value: "Peru"
}, {
  code: "PH",
  code3: "PHL",
  title: "Philippines (the)",
  value: "Philippines (the)"
}, {
  code: "PN",
  code3: "PCN",
  title: "Pitcairn",
  value: "Pitcairn"
}, {
  code: "PL",
  code3: "POL",
  title: "Poland",
  value: "Poland"
}, {
  code: "PT",
  code3: "PRT",
  title: "Portugal",
  value: "Portugal"
}, {
  code: "PR",
  code3: "PRI",
  title: "Puerto Rico",
  value: "Puerto Rico"
}, {
  code: "QA",
  code3: "QAT",
  title: "Qatar",
  value: "Qatar"
}, {
  code: "MK",
  code3: "MKD",
  title: "Republic of North Macedonia",
  value: "Republic of North Macedonia"
}, {
  code: "RO",
  code3: "ROU",
  title: "Romania",
  value: "Romania"
}, {
  code: "RU",
  code3: "RUS",
  title: "Russian Federation (the)",
  value: "Russian Federation (the)"
}, {
  code: "RW",
  code3: "RWA",
  title: "Rwanda",
  value: "Rwanda"
}, {
  code: "RE",
  code3: "REU",
  title: "Réunion",
  value: "Réunion"
}, {
  code: "BL",
  code3: "BLM",
  title: "Saint Barthélemy",
  value: "Saint Barthélemy"
}, {
  code: "SH",
  code3: "SHN",
  title: "Saint Helena, Ascension and Tristan da Cunha",
  value: "Saint Helena, Ascension and Tristan da Cunha"
}, {
  code: "KN",
  code3: "KNA",
  title: "Saint Kitts and Nevis",
  value: "Saint Kitts and Nevis"
}, {
  code: "LC",
  code3: "LCA",
  title: "Saint Lucia",
  value: "Saint Lucia"
}, {
  code: "MF",
  code3: "MAF",
  title: "Saint Martin (French part)",
  value: "Saint Martin (French part)"
}, {
  code: "PM",
  code3: "SPM",
  title: "Saint Pierre and Miquelon",
  value: "Saint Pierre and Miquelon"
}, {
  code: "VC",
  code3: "VCT",
  title: "Saint Vincent and the Grenadines",
  value: "Saint Vincent and the Grenadines"
}, {
  code: "WS",
  code3: "WSM",
  title: "Samoa",
  value: "Samoa"
}, {
  code: "SM",
  code3: "SMR",
  title: "San Marino",
  value: "San Marino"
}, {
  code: "ST",
  code3: "STP",
  title: "Sao Tome and Principe",
  value: "Sao Tome and Principe"
}, {
  code: "SA",
  code3: "SAU",
  title: "Saudi Arabia",
  value: "Saudi Arabia"
}, {
  code: "SN",
  code3: "SEN",
  title: "Senegal",
  value: "Senegal"
}, {
  code: "RS",
  code3: "SRB",
  title: "Serbia",
  value: "Serbia"
}, {
  code: "SC",
  code3: "SYC",
  title: "Seychelles",
  value: "Seychelles"
}, {
  code: "SL",
  code3: "SLE",
  title: "Sierra Leone",
  value: "Sierra Leone"
}, {
  code: "SG",
  code3: "SGP",
  title: "Singapore",
  value: "Singapore"
}, {
  code: "SX",
  code3: "SXM",
  title: "Sint Maarten (Dutch part)",
  value: "Sint Maarten (Dutch part)"
}, {
  code: "SK",
  code3: "SVK",
  title: "Slovakia",
  value: "Slovakia"
}, {
  code: "SI",
  code3: "SVN",
  title: "Slovenia",
  value: "Slovenia"
}, {
  code: "SB",
  code3: "SLB",
  title: "Solomon Islands",
  value: "Solomon Islands"
}, {
  code: "SO",
  code3: "SOM",
  title: "Somalia",
  value: "Somalia"
}, {
  code: "ZA",
  code3: "ZAF",
  title: "South Africa",
  value: "South Africa"
}, {
  code: "GS",
  code3: "SGS",
  title: "South Georgia and the South Sandwich Islands",
  value: "South Georgia and the South Sandwich Islands"
}, {
  code: "SS",
  code3: "SSD",
  title: "South Sudan",
  value: "South Sudan"
}, {
  code: "ES",
  code3: "ESP",
  title: "Spain",
  value: "Spain"
}, {
  code: "LK",
  code3: "LKA",
  title: "Sri Lanka",
  value: "Sri Lanka"
}, {
  code: "SD",
  code3: "SDN",
  title: "Sudan (the)",
  value: "Sudan (the)"
}, {
  code: "SR",
  code3: "SUR",
  title: "Surititle",
  value: "Surititle"
}, {
  code: "SJ",
  code3: "SJM",
  title: "Svalbard and Jan Mayen",
  value: "Svalbard and Jan Mayen"
}, {
  code: "SE",
  code3: "SWE",
  title: "Sweden",
  value: "Sweden"
}, {
  code: "CH",
  code3: "CHE",
  title: "Switzerland",
  value: "Switzerland"
}, {
  code: "SY",
  code3: "SYR",
  title: "Syrian Arab Republic",
  value: "Syrian Arab Republic"
}, {
  code: "TW",
  code3: "TWN",
  title: "Taiwan",
  value: "Taiwan"
}, {
  code: "TJ",
  code3: "TJK",
  title: "Tajikistan",
  value: "Tajikistan"
}, {
  code: "TZ",
  code3: "TZA",
  title: "Tanzania, United Republic of",
  value: "Tanzania, United Republic of"
}, {
  code: "TH",
  code3: "THA",
  title: "Thailand",
  value: "Thailand"
}, {
  code: "TL",
  code3: "TLS",
  title: "Timor-Leste",
  value: "Timor-Leste"
}, {
  code: "TG",
  code3: "TGO",
  title: "Togo",
  value: "Togo"
}, {
  code: "TK",
  code3: "TKL",
  title: "Tokelau",
  value: "Tokelau"
}, {
  code: "TO",
  code3: "TON",
  title: "Tonga",
  value: "Tonga"
}, {
  code: "TT",
  code3: "TTO",
  title: "Trinidad and Tobago",
  value: "Trinidad and Tobago"
}, {
  code: "TN",
  code3: "TUN",
  title: "Tunisia",
  value: "Tunisia"
}, {
  code: "TR",
  code3: "TUR",
  title: "Turkey",
  value: "Turkey"
}, {
  code: "TM",
  code3: "TKM",
  title: "Turkmenistan",
  value: "Turkmenistan"
}, {
  code: "TC",
  code3: "TCA",
  title: "Turks and Caicos Islands (the)",
  value: "Turks and Caicos Islands (the)"
}, {
  code: "TV",
  code3: "TUV",
  title: "Tuvalu",
  value: "Tuvalu"
}, {
  code: "UG",
  code3: "UGA",
  title: "Uganda",
  value: "Uganda"
}, {
  code: "UA",
  code3: "UKR",
  title: "Ukraine",
  value: "Ukraine"
}, {
  code: "AE",
  code3: "ARE",
  title: "United Arab Emirates (the)",
  value: "United Arab Emirates (the)"
}, {
  code: "GB",
  code3: "GBR",
  title: "United Kingdom of Great Britain and Northern Ireland (the)",
  value: "United Kingdom of Great Britain and Northern Ireland (the)"
}, {
  code: "UM",
  code3: "UMI",
  title: "United States Minor Outlying Islands (the)",
  value: "United States Minor Outlying Islands (the)"
}, {
  code: "US",
  code3: "USA",
  title: "United States of America (the)",
  value: "United States of America (the)"
}, {
  code: "UY",
  code3: "URY",
  title: "Uruguay",
  value: "Uruguay"
}, {
  code: "UZ",
  code3: "UZB",
  title: "Uzbekistan",
  value: "Uzbekistan"
}, {
  code: "VU",
  code3: "VUT",
  title: "Vanuatu",
  value: "Vanuatu"
}, {
  code: "VE",
  code3: "VEN",
  title: "Venezuela (Bolivarian Republic of)",
  value: "Venezuela (Bolivarian Republic of)"
}, {
  code: "VN",
  code3: "VNM",
  title: "Viet Nam",
  value: "Viet Nam"
}, {
  code: "VG",
  code3: "VGB",
  title: "Virgin Islands (British)",
  value: "Virgin Islands (British)"
}, {
  code: "VI",
  code3: "VIR",
  title: "Virgin Islands (U.S.)",
  value: "Virgin Islands (U.S.)"
}, {
  code: "WF",
  code3: "WLF",
  title: "Wallis and Futuna",
  value: "Wallis and Futuna"
}, {
  code: "EH",
  code3: "ESH",
  title: "Western Sahara",
  value: "Western Sahara"
}, {
  code: "YE",
  code3: "YEM",
  title: "Yemen",
  value: "Yemen"
}, {
  code: "ZM",
  code3: "ZMB",
  title: "Zambia",
  value: "Zambia"
}, {
  code: "ZW",
  code3: "ZWE",
  title: "Zimbabwe",
  value: "Zimbabwe"
}, {
  code: "AX",
  code3: "ALA",
  title: "Åland Islands",
  value: "Åland Islands"
}];

/***/ }),

/***/ 61224:
/*!****************************************!*\
  !*** ./src/app/common/filterObject.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appendUpdatedAttributes: () => (/* binding */ appendUpdatedAttributes),
/* harmony export */   filterUndefinedAttributes: () => (/* binding */ filterUndefinedAttributes),
/* harmony export */   migrateVesselAttributes: () => (/* binding */ migrateVesselAttributes)
/* harmony export */ });
const filterUndefinedAttributes = entity => Object.fromEntries(Object.entries(entity).filter(([key, value]) => value !== undefined && value.toString().length > 0));
const appendUpdatedAttributes = (original, updates) => {
  const updatedItem = {
    ...original
  };
  for (const key in updates) {
    if (updatedItem.hasOwnProperty(key) && updates[key] !== updatedItem[key]) {
      updatedItem[key] = updates[key];
    }
  }
  return updatedItem;
};
const migrateVesselAttributes = item => {
  return {
    ...item,
    ...item.attributes.reduce((acc, attr) => ({
      ...acc,
      [attr.attributeName.replace(/-([a-z])/g, function (g) {
        return g[1].toUpperCase();
      })]: attr.attributeValue
    }), {})
  };
};

/***/ }),

/***/ 72170:
/*!*************************************!*\
  !*** ./src/app/common/languages.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   langs: () => (/* binding */ langs),
/* harmony export */   languages: () => (/* binding */ languages)
/* harmony export */ });
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const langs = ['en-GB', 'ko-KR'];
const languages = [{
  code: 'en-GB',
  name: 'English'
}, {
  code: 'ko-KR',
  name: '한국어'
}];

/***/ }),

/***/ 70579:
/*!************************************!*\
  !*** ./src/app/common/mrnRegex.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrnRegex: () => (/* binding */ mrnRegex)
/* harmony export */ });
const mrnRegex = () => "urn:mrn:mcp:(entity|mir|mms|msr|device|org|user|vessel|service|mms):([a-z0-9]([a-z0-9]|-){0,20}[a-z0-9]):((([-._a-z0-9]|~)|%[0-9a-f][0-9a-f]|([!$&'()*+,;=])|:|@)((([-._a-z0-9]|~)|%[0-9a-f][0-9a-f]|([!$&'()*+,;=])|:|@)|)*)$";

/***/ }),

/***/ 43830:
/*!***********************************!*\
  !*** ./src/app/common/mrnUtil.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMrnPrefixFromOrgMrn: () => (/* binding */ getMrnPrefixFromOrgMrn)
/* harmony export */ });
const getMrnPrefixFromOrgMrn = orgMrn => {
  const list = orgMrn.split(':');
  return list.slice(0, 3).join(':') + ':entity:' + list.slice(4, 6).join(':') + ":";
};

/***/ }),

/***/ 59125:
/*!******************************************************!*\
  !*** ./src/app/common/shared/certificate.service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CertificateService: () => (/* binding */ CertificateService)
/* harmony export */ });
/* harmony import */ var _certRevokeInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../certRevokeInfo */ 58021);
/* harmony import */ var _menuType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../menuType */ 95166);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/backend-api/identity-registry */ 9136);




class CertificateService {
  constructor(organizationsService, devicesService, servicesService, usersService, vesselsService, mmsService) {
    this.organizationsService = organizationsService;
    this.devicesService = devicesService;
    this.servicesService = servicesService;
    this.usersService = usersService;
    this.vesselsService = vesselsService;
    this.mmsService = mmsService;
  }
  ngOnInit() {}
  formatCerts(certificates) {
    let formatted = [];
    for (const key_certs in certificates) {
      const cert = certificates[key_certs];
      for (const key in cert) {
        certificates[key_certs][key] = cert[key];
      }
      if (cert['revoked']) {
        cert["revokeInfo"] = cert["revokedAt"];
        cert["revokeReasonText"] = (0,_certRevokeInfo__WEBPACK_IMPORTED_MODULE_0__.getReasonOptionFromRevocationReason)(cert["revokeReason"]).title;
      }
      formatted.push(cert);
    }
    return formatted;
  }
  splitByRevokeStatus(certificates) {
    let activeCertificates = [];
    let revokedCertificates = [];
    for (const key_certs in certificates) {
      const cert = certificates[key_certs];
      cert['revoked'] ? revokedCertificates.push(cert) : activeCertificates.push(cert);
    }
    activeCertificates.sort((a, b) => a.end - b.end);
    revokedCertificates.sort((a, b) => a.end - b.end);
    return {
      activeCertificates: this.formatCerts(activeCertificates),
      revokedCertificates: this.formatCerts(revokedCertificates)
    };
  }
  issueNewCertificate(csr, itemType, entityMrn, orgMrn) {
    if (itemType == null || !entityMrn) {
      // We lost our state data somehow???
      throw new Error('Internal state lost');
    }
    switch (itemType) {
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Organization:
        {
          return this.organizationsService.newOrgCertFromCsr(csr, entityMrn);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Device:
        {
          return this.devicesService.newDeviceCertFromCsr(csr, orgMrn, entityMrn);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Service:
        {
          return this.servicesService.newServiceCertFromCsr1(csr, orgMrn, entityMrn);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.User:
        {
          return this.usersService.newUserCertFromCsr(csr, orgMrn, entityMrn);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Vessel:
        {
          return this.vesselsService.newVesselCertFromCsr(csr, orgMrn, entityMrn);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.MMS:
        {
          return this.mmsService.newMMSCertFromCsr(csr, orgMrn, entityMrn);
        }
      default:
        {
          throw new Error('Unknown item type');
        }
    }
  }
  revokeCertificate(itemType, entityMrn, orgMrn, certificateId, certificateRevocation, version) {
    if (itemType == null || !entityMrn) {
      // We lost our state data somehow???
      throw new Error('Internal state lost');
    }
    switch (itemType) {
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Organization:
        {
          return this.organizationsService.revokeOrgCert(certificateRevocation, entityMrn, certificateId);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Device:
        {
          return this.devicesService.revokeDeviceCert(certificateRevocation, orgMrn, entityMrn, certificateId);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Service:
        {
          if (version) {
            return this.servicesService.revokeServiceCert(certificateRevocation, orgMrn, entityMrn, version, certificateId);
          } else {
            return this.servicesService.revokeServiceCert1(certificateRevocation, orgMrn, entityMrn, certificateId);
          }
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.User:
        {
          return this.usersService.revokeUserCert(certificateRevocation, orgMrn, entityMrn, certificateId);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Vessel:
        {
          return this.vesselsService.revokeVesselCert(certificateRevocation, orgMrn, entityMrn, certificateId);
        }
      case _menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.MMS:
        {
          return this.mmsService.revokeMMSCert(certificateRevocation, orgMrn, entityMrn, certificateId);
        }
      default:
        {
          throw new Error('Unknown item type');
        }
    }
  }
  static #_ = this.ɵfac = function CertificateService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || CertificateService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.OrganizationControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.DeviceControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.ServiceControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.UserControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.VesselControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_2__.MmsControllerService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
    token: CertificateService,
    factory: CertificateService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 43755:
/*!******************************************************!*\
  !*** ./src/app/common/shared/file-helper.service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileHelperService: () => (/* binding */ FileHelperService)
/* harmony export */ });
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! file-saver */ 82514);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jszip */ 89207);
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ngx-translate/core */ 48070);




class FileHelperService {
  constructor(translate) {
    this.translate = translate;
  }
  downloadPemCertificate(certificateBundle, entityName, notifierService) {
    try {
      const nameNoSpaces = entityName.split(' ').join('_');
      const zip = new jszip__WEBPACK_IMPORTED_MODULE_1__();
      zip.file("Certificate_" + nameNoSpaces + ".pem", certificateBundle.certificate);
      if (certificateBundle.privateKey) {
        zip.file("PrivateKey_" + nameNoSpaces + ".pem", certificateBundle.privateKey);
      }
      if (certificateBundle.publicKey) {
        zip.file("PublicKey_" + nameNoSpaces + ".pem", certificateBundle.publicKey);
      }
      if (certificateBundle.pkcs12Keystore) {
        zip.file("Keystore_" + nameNoSpaces + ".p12", certificateBundle.pkcs12Keystore);
      }
      if (certificateBundle.keystorePassword) {
        zip.file("KeystorePassword_" + nameNoSpaces + ".txt", certificateBundle.keystorePassword);
      }
      zip.generateAsync({
        type: "blob"
      }).then(function (content) {
        file_saver__WEBPACK_IMPORTED_MODULE_0__.saveAs(content, "Certificate_" + nameNoSpaces + ".zip");
      });
    } catch (error) {
      notifierService.notify('error', this.translate.instant('error.file.downloadcert') + error);
    }
  }
  downloadXml(xmlFile, notifierService) {
    if (!xmlFile) {
      notifierService.notify('error', this.translate.instant('error.file.empty'));
      return;
    }
    let fileContent = xmlFile.content;
    let fileName = xmlFile.name;
    let fileType = xmlFile.contentContentType;
    this.downloadFile(fileContent, fileType, fileName, notifierService);
  }
  downloadDoc(docFile, notifierService) {
    if (!docFile) {
      notifierService.notify('error', this.translate.instant('error.file.empty'));
      return;
    }
    // TODO: I belive it is wrong that "content" is an array of strings. Please be wary of this may change in the future
    if (docFile.filecontent.length > 1 && docFile.filecontent.length < 10) {
      notifierService.notify('error', this.translate.instant('error.file.wrongformat') + docFile.name);
      return;
    }
    let fileContent = docFile.filecontent.toString();
    let fileName = docFile.name;
    let fileType = docFile.filecontentContentType;
    this.downloadBase64File(fileContent, fileType, fileName, notifierService);
  }
  downloadBase64File(base64Content, fileType, fileName, notifierService) {
    try {
      let byteArray = this.convertBase64ToByteArray(base64Content);
      let blob = new Blob([byteArray], {
        type: fileType
      });
      file_saver__WEBPACK_IMPORTED_MODULE_0__.saveAs(blob, fileName);
    } catch (error) {
      notifierService.notify('error', this.translate.instant('error.file.downloaderror') + error);
    }
  }
  downloadFile(content, fileType, fileName, notifierService) {
    try {
      let blob = new Blob([content], {
        type: fileType
      });
      file_saver__WEBPACK_IMPORTED_MODULE_0__.saveAs(blob, fileName);
    } catch (error) {
      notifierService.notify('error', this.translate.instant('error.file.downloaderror') + error);
    }
  }
  convertBase64ToByteArray(base64Content) {
    let byteCharacters = window.atob(base64Content);
    let byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    return new Uint8Array(byteNumbers);
  }
  static #_ = this.ɵfac = function FileHelperService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || FileHelperService)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵinject"](_ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__.TranslateService));
  };
  static #_2 = this.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjectable"]({
    token: FileHelperService,
    factory: FileHelperService.ɵfac,
    providedIn: 'root'
  });
}

/***/ }),

/***/ 90058:
/*!************************************************!*\
  !*** ./src/app/common/shared/shared.module.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SharedModule: () => (/* binding */ SharedModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 87477);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ 48070);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 1888);



class SharedModule {
  static #_ = this.ɵfac = function SharedModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || SharedModule)();
  };
  static #_2 = this.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: SharedModule
  });
  static #_3 = this.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__.TranslateModule]
  });
}
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](SharedModule, {
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
    exports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__.TranslateModule]
  });
})();

/***/ }),

/***/ 40868:
/*!*****************************************!*\
  !*** ./src/app/common/sortMenuOrder.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sortColumnForMenu: () => (/* binding */ sortColumnForMenu)
/* harmony export */ });
const sortColumnForMenu = (a, b) => {
  return a.order > b.order ? -1 : 1;
};

/***/ }),

/***/ 71066:
/*!*****************************************!*\
  !*** ./src/app/common/timeConverter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertTime: () => (/* binding */ convertTime)
/* harmony export */ });
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const convertTime = s => {
  return new Date(s).toLocaleString();
};

/***/ }),

/***/ 23987:
/*!*******************************************!*\
  !*** ./src/app/common/translateHelper.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLangs: () => (/* binding */ addLangs),
/* harmony export */   changeLang: () => (/* binding */ changeLang),
/* harmony export */   getLang: () => (/* binding */ getLang),
/* harmony export */   loadLang: () => (/* binding */ loadLang)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./languages */ 72170);
/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
export const applyTranslateToMenu = (translate: TranslateService, menu: object[]) => {
    menu.forEach(e => {
      applyTranslateToSingleMenu(translate, e);
    });
};

export const applyTranslateToSingleMenu = (translate: TranslateService, menu: object) => {
    if (menu['title']) {
        translate.get(menu['title']).subscribe(res => menu['title'] = res);
    }
    if (menu['children']) {
        menu['children'].forEach(ee => {
        if (ee['title']) {
            translate.get(ee['title']).subscribe(res => ee['title'] = res);
        }
        });
    }
};
*/
const addLangs = translate => {
  translate.addLangs(_languages__WEBPACK_IMPORTED_MODULE_0__.langs);
};
const loadLang = translate => {
  const storedLocale = localStorage.getItem('locale');
  const locale = storedLocale && _languages__WEBPACK_IMPORTED_MODULE_0__.langs.includes(storedLocale) ? localStorage.getItem('locale') : 'en-GB';
  if (locale !== null) {
    translate.setDefaultLang(locale);
    translate.use(locale);
    return locale;
  }
  throw new Error('Locale not found');
};
const changeLang = (translate, language) => {
  translate.use(language);
  translate.setDefaultLang(language);
  localStorage.setItem('locale', language);
};
const getLang = code => {
  return _languages__WEBPACK_IMPORTED_MODULE_0__.languages.find(lang => lang.code === code)?.name || 'English';
};

/***/ }),

/***/ 18168:
/*!*************************************!*\
  !*** ./src/app/common/variables.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ORG_ADMIN_AT_MIR: () => (/* binding */ ORG_ADMIN_AT_MIR)
/* harmony export */ });
const ORG_ADMIN_AT_MIR = 'ORGADMIN';

/***/ }),

/***/ 14994:
/*!***************************************************************!*\
  !*** ./src/app/components/cert-table/cert-table.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CertTableComponent: () => (/* binding */ CertTableComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var _smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../smart-table/smart-table.component */ 18962);
/* harmony import */ var src_app_common_columnForCertificate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/common/columnForCertificate */ 21197);
/* harmony import */ var src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/common/menuType */ 95166);





const _c0 = a0 => [a0];
function CertTableComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](0, "app-smart-table", 0);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("labels", ctx_r0.columnsForActive)("data", ctx_r0.data)("selectedIds", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction1"](7, _c0, ctx_r0.serial))("onDelete", ctx_r0.revoke)("onDownload", ctx_r0.download)("onAdd", ctx_r0.add)("itemType", ctx_r0.itemType);
  }
}
function CertTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](0, "app-smart-table", 1);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("labels", ctx_r0.columnsForRevoked)("data", ctx_r0.data)("itemType", ctx_r0.itemType);
  }
}
function CertTableComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "h1");
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtextInterpolate1"]("The given context is wrong! : ", ctx_r0.context, "");
  }
}
class CertTableComponent {
  constructor() {
    this.context = 'active';
    this.data = [];
    this.onAdd = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onDownload = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.onRevoke = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.itemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.Certificate;
    this.download = selected => {
      this.onDownload.emit(selected);
    };
    this.add = () => {
      this.onAdd.emit();
    };
    this.revoke = selected => {
      this.onRevoke.emit(selected);
    };
    this.empty = [];
    this.columnsForActive = src_app_common_columnForCertificate__WEBPACK_IMPORTED_MODULE_1__.ActiveCertificatesColumn;
    this.columnsForRevoked = src_app_common_columnForCertificate__WEBPACK_IMPORTED_MODULE_1__.RevokedCertificatesColumn;
  }
  static #_ = this.ɵfac = function CertTableComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || CertTableComponent)();
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({
    type: CertTableComponent,
    selectors: [["app-cert-table"]],
    inputs: {
      context: "context",
      data: "data",
      serial: "serial"
    },
    outputs: {
      onAdd: "onAdd",
      onDownload: "onDownload",
      onRevoke: "onRevoke"
    },
    standalone: true,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵStandaloneFeature"]],
    decls: 3,
    vars: 1,
    consts: [["deleteText", "Revoke", "placeholder", "There is no issued certificate.", 3, "labels", "data", "selectedIds", "onDelete", "onDownload", "onAdd", "itemType"], ["placeholder", "There is no revoked certificate.", 3, "labels", "data", "itemType"]],
    template: function CertTableComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtemplate"](0, CertTableComponent_Conditional_0_Template, 1, 9, "app-smart-table", 0)(1, CertTableComponent_Conditional_1_Template, 1, 3, "app-smart-table", 1)(2, CertTableComponent_Conditional_2_Template, 2, 1, "h1");
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵconditional"](ctx.context === "active" ? 0 : ctx.context === "revoked" ? 1 : 2);
      }
    },
    dependencies: [_smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_0__.SmartTableComponent],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 99850:
/*!*************************************************!*\
  !*** ./src/app/components/components.module.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ComponentsModule: () => (/* binding */ ComponentsModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 87477);
/* harmony import */ var _common_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/shared/shared.module */ 90058);
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @clr/angular */ 81577);
/* harmony import */ var _item_form_item_form_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item-form/item-form.component */ 74662);
/* harmony import */ var _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-view/item-view.component */ 25642);
/* harmony import */ var _smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./smart-table/smart-table.component */ 18962);
/* harmony import */ var _smart_expandable_table_smart_expandable_table_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./smart-expandable-table/smart-expandable-table.component */ 53426);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 1888);








class ComponentsModule {
  static #_ = this.ɵfac = function ComponentsModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || ComponentsModule)();
  };
  static #_2 = this.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineNgModule"]({
    type: ComponentsModule
  });
  static #_3 = this.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjector"]({
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _common_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__.SharedModule, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClarityModule, _item_form_item_form_component__WEBPACK_IMPORTED_MODULE_1__.ItemFormComponent, _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__.ItemViewComponent, _smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_3__.SmartTableComponent, _smart_expandable_table_smart_expandable_table_component__WEBPACK_IMPORTED_MODULE_4__.SmartExpandableTableComponent]
  });
}
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵsetNgModuleScope"](ComponentsModule, {
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _common_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__.SharedModule, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClarityModule, _item_form_item_form_component__WEBPACK_IMPORTED_MODULE_1__.ItemFormComponent, _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__.ItemViewComponent, _smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_3__.SmartTableComponent, _smart_expandable_table_smart_expandable_table_component__WEBPACK_IMPORTED_MODULE_4__.SmartExpandableTableComponent],
    exports: [_item_form_item_form_component__WEBPACK_IMPORTED_MODULE_1__.ItemFormComponent, _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__.ItemViewComponent, _smart_table_smart_table_component__WEBPACK_IMPORTED_MODULE_3__.SmartTableComponent, _smart_expandable_table_smart_expandable_table_component__WEBPACK_IMPORTED_MODULE_4__.SmartExpandableTableComponent]
  });
})();

/***/ }),

/***/ 74662:
/*!*************************************************************!*\
  !*** ./src/app/components/item-form/item-form.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemFormComponent: () => (/* binding */ ItemFormComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ 84576);
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @clr/angular */ 81577);
/* harmony import */ var src_app_common_columnForMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/common/columnForMenu */ 14943);
/* harmony import */ var src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/common/filterObject */ 61224);
/* harmony import */ var src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/common/menuType */ 95166);
/* harmony import */ var src_app_common_mrnRegex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/common/mrnRegex */ 70579);
/* harmony import */ var src_app_common_shared_shared_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/common/shared/shared.module */ 90058);
/* harmony import */ var src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/backend-api/identity-registry */ 9136);
/* harmony import */ var src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/auth/auth.service */ 84595);
/* harmony import */ var gramli_angular_notifier__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! gramli-angular-notifier */ 1059);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ngx-translate/core */ 48070);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/common */ 87477);
















function ItemFormComponent_div_8_Conditional_1_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.error);
  }
}
function ItemFormComponent_div_8_Conditional_1_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1, "Please enter a value");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
}
function ItemFormComponent_div_8_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-input-container")(1, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](3, "input", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("ngModelChange", function ItemFormComponent_div_8_Conditional_1_Template_input_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresetView"](ctx_r1.onMrnChange($event));
    })("keydown", function ItemFormComponent_div_8_Conditional_1_Template_input_keydown_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresetView"](ctx_r1.onMrnKeyDown($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](4, "clr-control-helper");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](6, ItemFormComponent_div_8_Conditional_1_Conditional_6_Template, 2, 1, "clr-control-error")(7, ItemFormComponent_div_8_Conditional_1_Conditional_7_Template, 2, 0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("type", menu_r3.value.type)("formControlName", menu_r3.key)("required", menu_r3.value.required === true)("placeholder", ctx_r1.mrnPrefix);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](menu_r3.value.error ? 6 : 7);
  }
}
function ItemFormComponent_div_8_Conditional_2_option_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "option", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("value", option_r4.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](option_r4.title);
  }
}
function ItemFormComponent_div_8_Conditional_2_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.error);
  }
}
function ItemFormComponent_div_8_Conditional_2_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1, "Please enter a value");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
}
function ItemFormComponent_div_8_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-select-container")(1, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](3, "select", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](4, ItemFormComponent_div_8_Conditional_2_option_4_Template, 2, 2, "option", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](5, "clr-control-helper");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](7, ItemFormComponent_div_8_Conditional_2_Conditional_7_Template, 2, 1, "clr-control-error")(8, ItemFormComponent_div_8_Conditional_2_Conditional_8_Template, 2, 0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate2"]("", menu_r3.value.title, " ", menu_r3.key, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("formControlName", menu_r3.key)("required", menu_r3.value.required === true);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("ngForOf", menu_r3.value.options);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](menu_r3.value.error ? 7 : 8);
  }
}
function ItemFormComponent_div_8_Conditional_3_option_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "option", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const role_r5 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("value", role_r5.permission);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](role_r5.permission);
  }
}
function ItemFormComponent_div_8_Conditional_3_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.error);
  }
}
function ItemFormComponent_div_8_Conditional_3_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1, "Please enter a value");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
}
function ItemFormComponent_div_8_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-select-container")(1, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](3, "select", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](4, ItemFormComponent_div_8_Conditional_3_option_4_Template, 2, 2, "option", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](5, "clr-control-helper");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](7, ItemFormComponent_div_8_Conditional_3_Conditional_7_Template, 2, 1, "clr-control-error")(8, ItemFormComponent_div_8_Conditional_3_Conditional_8_Template, 2, 0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("formControlName", menu_r3.key)("required", menu_r3.value.required === true);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("ngForOf", ctx_r1.roles);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](menu_r3.value.error ? 7 : 8);
  }
}
function ItemFormComponent_div_8_Conditional_4_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.error);
  }
}
function ItemFormComponent_div_8_Conditional_4_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1, "Please enter a value");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
}
function ItemFormComponent_div_8_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "clr-input-container")(1, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](3, "input", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](4, "clr-control-helper");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](6, ItemFormComponent_div_8_Conditional_4_Conditional_6_Template, 2, 1, "clr-control-error")(7, ItemFormComponent_div_8_Conditional_4_Conditional_7_Template, 2, 0, "clr-control-error");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("type", menu_r3.value.type)("formControlName", menu_r3.key)("required", menu_r3.value.required === true);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate"](menu_r3.value.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](menu_r3.value.error ? 6 : 7);
  }
}
function ItemFormComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](1, ItemFormComponent_div_8_Conditional_1_Template, 8, 9, "clr-input-container")(2, ItemFormComponent_div_8_Conditional_2_Template, 9, 9, "clr-select-container")(3, ItemFormComponent_div_8_Conditional_3_Template, 9, 8, "clr-select-container")(4, ItemFormComponent_div_8_Conditional_4_Template, 8, 8, "clr-input-container");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](menu_r3.key === "mrn" ? 1 : menu_r3.key === "roleName" ? 2 : menu_r3.key === "permissions" ? 3 : 4);
  }
}
function ItemFormComponent_Conditional_10_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "button", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function ItemFormComponent_Conditional_10_Conditional_5_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r7);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresetView"](ctx_r1.cancel());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1, "Cancel");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
}
function ItemFormComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "div", 8)(1, "button", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function ItemFormComponent_Conditional_10_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r6);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresetView"](ctx_r1.submit());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](2, "Submit");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](3, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function ItemFormComponent_Conditional_10_Template_button_click_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r6);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresetView"](ctx_r1.resetForm());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](4, "Reset");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](5, ItemFormComponent_Conditional_10_Conditional_5_Template, 2, 0, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](!ctx_r1.isForNew ? 5 : -1);
  }
}
class ItemFormComponent {
  constructor(formBuilder, roleService, authService, notifierService, translate) {
    this.formBuilder = formBuilder;
    this.roleService = roleService;
    this.authService = authService;
    this.notifierService = notifierService;
    this.translate = translate;
    /**
       * menu type of an active page
       */
    this.itemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.None;
    /**
     * a boolean indicating its use for creating entity
     */
    this.isForNew = false;
    this.item = {};
    /**
     * an mrn of organization owning the chosen entity
     */
    this.mrnPrefix = 'urn:mrn:';
    this.title = '';
    this.onCancel = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    this.onSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    this.viewContext = 'edit';
    this.itemForm = new _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormGroup({});
    this.columnForMenu = {};
    this.isEditing = false;
    this.roles = [];
    this.id = '';
    this.onSubmitIsGiven = true;
    this.submit = () => {
      // Filter attributes with undefined values
      if (this.isValid()) {
        const filteredAttributes = (0,src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_1__.filterUndefinedAttributes)(this.itemForm.value);
        if (this.isForNew) {
          this.onSubmit.emit(filteredAttributes);
        } else {
          const updated = (0,src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_1__.appendUpdatedAttributes)(this.item, filteredAttributes);
          this.onSubmit.emit(updated);
        }
      }
    };
    this.isValid = () => {
      if (!this.itemForm.valid) {
        this.itemForm.markAllAsTouched();
        this.clrForm?.markAsTouched();
        this.notifierService.notify('error', this.translate.instant('error.form.invalid'));
        return false;
      }
      if (this.itemForm.value.mrn === this.mrnPrefix) {
        this.notifierService.notify('error', this.translate.instant('error.form.invalidmrn'));
        return false;
      }
      return true;
    };
    this.getFormValue = () => {
      if (this.isValid()) {
        return (0,src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_1__.filterUndefinedAttributes)(this.itemForm.value);
      } else return undefined;
    };
    this.resetForm = () => {
      this.setForm();
      if (!this.isForNew) {
        this.itemForm.patchValue(this.item);
      } else if (this.itemType !== src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.Role) {
        this.item = {
          mrn: this.mrnPrefix
        };
        this.itemForm.patchValue(this.item);
      }
    };
    this.cancel = () => {
      this.onCancel.emit();
    };
    /**
     * creating a form taking given menu type account into
     */
    this.setForm = () => {
      let formElements = {};
      Object.entries(src_app_common_columnForMenu__WEBPACK_IMPORTED_MODULE_0__.ColumnForResource[this.itemType.toString()]).map(([key, value]) => {
        if (!value.visibleFrom) return;
        if (value.visibleFrom && !value.visibleFrom.includes(this.viewContext)) return;
        if (key === 'mrn') {
          const mrnReg = new RegExp((0,src_app_common_mrnRegex__WEBPACK_IMPORTED_MODULE_3__.mrnRegex)());
          formElements[key] = ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.required, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.pattern(mrnReg)]];
        } else {
          formElements[key] = ['', value.required ? _angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.required : undefined];
        }
        this.columnForMenu[key] = value;
      });
      this.itemForm = this.formBuilder.group(formElements);
    };
    /**
     * a function returning whether the resource type requires short ID or not
     * @param resourceType type of resource
     * @returns whether the resource type requires short ID or not
     */
    this.needShortId = resourceType => {
      return this.getShortIdType(resourceType) !== undefined;
    };
    /**
     * a function fetching its short ID
     * @param resourceType type of resource
     * @returns whether the resource type requires short ID or not
     */
    this.getShortIdType = resourceType => {
      return this.columnForMenu[resourceType] ? this.columnForMenu[resourceType].shortIdType : undefined;
    };
    this.sortColumnForMenu = (a, b) => {
      return a.order > b.order ? -1 : 1;
    };
    this.capitalize = s => s[0].toUpperCase() + s.slice(1);
  }
  ngOnInit() {
    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
    //Add 'implements OnInit' to the class.
    if (this.itemType !== src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.OrgCandidate) {
      this.authService.getOrgMrn().then(orgMrn => {
        this.roleService.getRoles(orgMrn).subscribe(roles => {
          this.roles = roles;
        });
      });
    }
  }
  ngOnChanges(simpleChange) {
    if (this.isForNew) {
      this.viewContext = 'edit-new';
    }
    if (this.itemType !== src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.None) {
      this.setForm();
      if (this.item) {
        this.itemForm.patchValue(this.item);
      }
    }
    if (this.title.length === 0 && this.itemType !== src_app_common_menuType__WEBPACK_IMPORTED_MODULE_2__.ItemType.None) {
      if (this.isForNew) {
        this.title = 'New ' + this.capitalize(this.itemType);
      } else {
        this.title = 'Edit ' + this.capitalize(this.itemType);
      }
    }
    // Check if onSubmit is given
    if (this.onSubmit.observers.length !== 0) {
      this.onSubmitIsGiven = true;
    } else {
      this.onSubmitIsGiven = false;
    }
  }
  onMrnKeyDown(event) {
    const newValue = event.target.value;
    if (newValue.includes(this.mrnPrefix)) {
      this.item['mrn'] = newValue;
    } else {
      event.target.value = this.mrnPrefix;
    }
  }
  onMrnChange(value) {
    if (!value.startsWith(this.mrnPrefix)) {
      this.item.mrn = this.mrnPrefix;
    } else {
      this.item.mrn = value;
    }
  }
  static #_ = this.ɵfac = function ItemFormComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || ItemFormComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_5__.RoleControllerService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_6__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](gramli_angular_notifier__WEBPACK_IMPORTED_MODULE_9__.NotifierService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__.TranslateService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineComponent"]({
    type: ItemFormComponent,
    selectors: [["app-item-form"]],
    viewQuery: function ItemFormComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵviewQuery"](_clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrForm, 7);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵloadQuery"]()) && (ctx.clrForm = _t.first);
      }
    },
    inputs: {
      itemType: "itemType",
      isForNew: "isForNew",
      item: "item",
      mrnPrefix: "mrnPrefix",
      title: "title"
    },
    outputs: {
      onCancel: "onCancel",
      onSubmit: "onSubmit"
    },
    standalone: true,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵNgOnChangesFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵStandaloneFeature"]],
    decls: 11,
    vars: 7,
    consts: [[1, "clr-row"], [1, "clr-col-lg-12", "clr-col-md-8", "clr-col-12"], [1, "card"], [1, "card-header"], [1, "card-block"], [1, "card-text"], ["clrForm", "", 1, "ng-untouched", 3, "formGroup"], [4, "ngFor", "ngForOf"], [1, "card-footer"], ["clrInput", "", 3, "ngModelChange", "keydown", "type", "formControlName", "required", "placeholder"], ["clrSelect", "", 3, "formControlName", "required"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["clrInput", "", 3, "type", "formControlName", "required"], ["type", "submit", 1, "btn", "btn-primary", 3, "click"], [1, "btn", "btn-warning", 3, "click"], [1, "btn", "btn-danger"], [1, "btn", "btn-danger", 3, "click"]],
    template: function ItemFormComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](5, "div", 4)(6, "div", 5)(7, "form", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](8, ItemFormComponent_div_8_Template, 5, 1, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵpipe"](9, "keyvalue");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](10, ItemFormComponent_Conditional_10_Template, 6, 1, "div", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]()()();
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate1"](" ", ctx.title, " ");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("formGroup", ctx.itemForm);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵpipeBind2"](9, 4, ctx.columnForMenu, ctx.sortColumnForMenu));
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵconditional"](ctx.onSubmitIsGiven ? 10 : -1);
      }
    },
    dependencies: [src_app_common_shared_shared_module__WEBPACK_IMPORTED_MODULE_4__.SharedModule, _angular_common__WEBPACK_IMPORTED_MODULE_12__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_12__.KeyValuePipe, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrFormsModule, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrLabel, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrControlError, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrControlHelper, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrForm, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrInput, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrInputContainer, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrSelect, _clr_angular__WEBPACK_IMPORTED_MODULE_11__.ClrSelectContainer, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgSelectOption, _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ɵNgSelectMultipleOption"], _angular_forms__WEBPACK_IMPORTED_MODULE_8__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.SelectControlValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.RequiredValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.ReactiveFormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormGroupDirective, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormControlName],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 25642:
/*!*************************************************************!*\
  !*** ./src/app/components/item-view/item-view.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemViewComponent: () => (/* binding */ ItemViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/common/menuType */ 95166);
/* harmony import */ var _cert_table_cert_table_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cert-table/cert-table.component */ 14994);
/* harmony import */ var src_app_common_columnForMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/common/columnForMenu */ 14943);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/forms */ 84576);
/* harmony import */ var src_app_common_sortMenuOrder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/common/sortMenuOrder */ 40868);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/common */ 87477);
/* harmony import */ var src_app_common_shared_shared_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/common/shared/shared.module */ 90058);
/* harmony import */ var src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/common/timeConverter */ 71066);
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @clr/angular */ 81577);
/* harmony import */ var src_app_common_certificateUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/common/certificateUtil */ 84114);
/* harmony import */ var src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/backend-api/identity-registry */ 9136);
/* harmony import */ var src_app_common_certRevokeInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/common/certRevokeInfo */ 58021);
/* harmony import */ var src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/common/filterObject */ 61224);
/* harmony import */ var _item_form_item_form_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../item-form/item-form.component */ 74662);
/* harmony import */ var src_app_common_mrnUtil__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/common/mrnUtil */ 43830);
/* harmony import */ var src_app_common_variables__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/common/variables */ 18168);
/* harmony import */ var src_app_common_shared_certificate_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/common/shared/certificate.service */ 59125);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ngx-translate/core */ 48070);
/* harmony import */ var gramli_angular_notifier__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! gramli-angular-notifier */ 1059);
/* harmony import */ var src_app_common_shared_file_helper_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/common/shared/file-helper.service */ 43755);
/* harmony import */ var src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/auth/auth.service */ 84595);


























const _c0 = ["certModal"];
const _c1 = ["revokeModal"];
const _c2 = ["migrateModal"];
function ItemViewComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](0, " Organization details ");
  }
}
function ItemViewComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](0);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"](" ", ctx_r1.capitalize(ctx_r1.itemType), " details ");
  }
}
function ItemViewComponent_div_9_Conditional_5_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r1.convertTimeString(ctx_r1.item[menu_r3.key]));
  }
}
function ItemViewComponent_div_9_Conditional_5_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "span", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"](2).$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("width", 400, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r1.item[menu_r3.key]);
  }
}
function ItemViewComponent_div_9_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](0, ItemViewComponent_div_9_Conditional_5_Conditional_0_Template, 2, 3, "span", 39)(1, ItemViewComponent_div_9_Conditional_5_Conditional_1_Template, 2, 3, "span", 39);
  }
  if (rf & 2) {
    const menu_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx_r1.isTimestampFormat(menu_r3.key) ? 0 : 1);
  }
}
function ItemViewComponent_div_9_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](0, "span", 40);
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("width", 400, "px");
  }
}
function ItemViewComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 36)(1, "label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](3, "div", 38)(4, "div", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](5, ItemViewComponent_div_9_Conditional_5_Template, 2, 1)(6, ItemViewComponent_div_9_Conditional_6_Template, 1, 2, "span", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const menu_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](menu_r3.value.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx_r1.item[menu_r3.key] ? 5 : 6);
  }
}
function ItemViewComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 36)(1, "label", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "Active certificates");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](3, "div", 5)(4, "app-cert-table", 42);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("onAdd", function ItemViewComponent_Conditional_11_Template_app_cert_table_onAdd_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.openCertModal());
    })("onDownload", function ItemViewComponent_Conditional_11_Template_app_cert_table_onDownload_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.clickDownloadBtn($event));
    })("onRevoke", function ItemViewComponent_Conditional_11_Template_app_cert_table_onRevoke_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.clickRevokeBtn($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](5, "div", 36)(6, "label", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](7, "Revoked certificates");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](8, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](9, "app-cert-table", 43);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("data", ctx_r1.activeCertificates)("serial", ctx_r1.serial);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("data", ctx_r1.revokedCertificates);
  }
}
function ItemViewComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](0, "app-item-form", 12, 3);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("isForNew", true)("itemType", ctx_r1.userItemType)("item", ctx_r1.adminUser)("mrnPrefix", ctx_r1.adminUserMrnPrefix);
  }
}
function ItemViewComponent_Conditional_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "button", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Conditional_14_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r5);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.clickMigrateBtn());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1, "Migrate");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function ItemViewComponent_Conditional_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "button", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Conditional_15_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r6);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.approve());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1, "Approve");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function ItemViewComponent_Conditional_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "button", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Conditional_16_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r7);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.edit());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1, "Edit");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
}
function ItemViewComponent_Conditional_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 21)(1, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "Here is your certificate bundle. You can download it by clicking the button below.");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
}
function ItemViewComponent_Conditional_36_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "h3", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"]("Revoke ", ctx_r1.selectedActiveCerts.length, " certificates");
  }
}
function ItemViewComponent_Conditional_37_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "h3", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate1"]("Revoke ", ctx_r1.selectedActiveCerts.length, " certificate");
  }
}
function ItemViewComponent_For_51_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "clr-radio-wrapper")(1, "input", 46);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_For_51_Template_input_click_1_listener() {
      const reason_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r8).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx_r1.revokeReason = reason_r9);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](2, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const reason_r9 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](reason_r9.title);
  }
}
function ItemViewComponent_Conditional_57_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](3, "div")(4, "a", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](5, "More info");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtextInterpolate"](ctx_r1.revokeReason.description);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("href", ctx_r1.revokeReason.reference, _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵsanitizeUrl"]);
  }
}
function ItemViewComponent_Conditional_58_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div")(1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](2, "Select reason name");
    _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
  }
}
class ItemViewComponent {
  constructor(certificateService, translate, notifier, fileHelper, authService, locale) {
    this.certificateService = certificateService;
    this.translate = translate;
    this.notifier = notifier;
    this.fileHelper = fileHelper;
    this.locale = locale;
    this.itemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.None;
    this.item = {};
    this.orgMrn = '';
    this.mrnPrefix = 'urn:mrn:';
    this.instanceVersion = undefined;
    this.serial = undefined;
    this.onEdit = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onMigrate = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onDelete = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onRefresh = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onApprove = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.onDownloadCert = new _angular_core__WEBPACK_IMPORTED_MODULE_16__.EventEmitter();
    this.viewContext = 'detail';
    this.columnForMenu = {};
    this.itemId = "";
    this.activeCertificates = [];
    this.revokedCertificates = [];
    this.revokeModalOpened = false;
    this.certModalOpened = false;
    this.fromBrowser = true;
    this.revokeReason = undefined;
    this.revokeReasons = [];
    this.selectedActiveCerts = [];
    this.revokeAt = undefined;
    this.reasonTitle = "";
    this.certificateBundle = undefined;
    this.migrateModalOpened = false;
    this.newServiceMrn = "";
    this.userItemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.User;
    this.adminUser = {
      permissions: src_app_common_variables__WEBPACK_IMPORTED_MODULE_12__.ORG_ADMIN_AT_MIR
    };
    this.adminUserMrnPrefix = 'urn:mrn:mcp:';
    this.setForm = () => {
      Object.entries(src_app_common_columnForMenu__WEBPACK_IMPORTED_MODULE_2__.ColumnForResource[this.itemType.toString()]).map(([key, value]) => {
        if (!value.visibleFrom) return;
        if (value.visibleFrom && !value.visibleFrom.includes(this.viewContext)) return;
        this.columnForMenu[key] = value;
      });
    };
    this.assignCertificatesByStatus = certificates => {
      this.activeCertificates = [];
      this.revokedCertificates = [];
      certificates.sort((a, b) => a.start < b.start ? 1 : -1);
      certificates.map(cert => {
        cert.revoked ? this.revokedCertificates.push(cert) : this.activeCertificates.push(cert);
      });
      this.revokedCertificates = this.updateRevokeReason(this.revokedCertificates);
    };
    this.updateRevokeReason = revokedCerts => {
      return revokedCerts.map(cert => ({
        ...cert,
        revokeReason: this.revokeReasons.filter(reason => reason.value === cert.revokeReason)[0].title
      }));
    };
    this.sortColumnForMenu = (a, b) => {
      return (0,src_app_common_sortMenuOrder__WEBPACK_IMPORTED_MODULE_3__.sortColumnForMenu)(a, b);
    };
    this.edit = () => {
      this.onEdit.emit(this.item);
    };
    this.migrate = () => {
      this.onMigrate.emit(this.newServiceMrn);
    };
    this.approve = () => {
      if (this.newAdminUserForm?.isValid()) {
        this.adminUser = this.newAdminUserForm?.getFormValue();
        this.onApprove.emit({
          ...this.item,
          adminUser: this.adminUser
        });
      }
    };
    this.deleteItem = () => {
      this.onDelete.emit(this.item);
    };
    this.convertTimeString = time => {
      return (0,src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_5__.convertTime)(time);
    };
    this.openCertModal = () => {
      if (this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.Service && this.instanceVersion) {
        this.notifier.notify('error', this.translate.instant('error.form.requiremigrate'));
        return;
      }
      this.certModal?.open();
      this.certModalOpened = true;
      this.issue();
    };
    this.issue = () => {
      (0,src_app_common_certificateUtil__WEBPACK_IMPORTED_MODULE_6__.issueNewWithLocalKeys)(this.certificateService, this.itemType, this.itemId, this.orgMrn, this.fromBrowser, this.instanceVersion).then(cert => {
        this.certificateBundle = cert;
        this.notifier.notify('success', this.translate.instant('success.resource.create'));
      });
    };
    this.revokeCerts = selected => {
      // conversion to date object
      this.revokeAt = new Date(Date.parse(this.revokeAt.toLocaleString()));
      const certificateRevocation = {
        revokedAt: this.revokeAt,
        revocationReason: this.revokeReason?.value
      };
      selected.forEach(cert => {
        this.certificateService.revokeCertificate(this.itemType, this.item.mrn, this.orgMrn, cert.serialNumber, certificateRevocation, this.instanceVersion).subscribe(res => {
          this.notifier.notify('success', this.translate.instant('success.certificate.revoke'));
          this.cancel();
        }, err => {
          this.notifier.notify('error', this.translate.instant('error.certificate.revoke'));
        });
      });
    };
    this.clickDownloadBtn = selected => {
      if (selected.length === 0) {
        this.notifier.notify('warning', this.translate.instant('error.selection.noSelection'));
        return;
      }
      selected.forEach(certificate => {
        const endText = (0,_angular_common__WEBPACK_IMPORTED_MODULE_17__.formatDate)(certificate.end, 'yyyy-MM-ddTHH-mm-ss', this.locale);
        this.fileHelper.downloadPemCertificate({
          certificate: certificate.certificate
        }, this.item.mrn + '_exp_' + endText, this.notifier);
      });
    };
    this.clickRevokeBtn = selected => {
      if (this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.Service && this.instanceVersion) {
        this.notifier.notify('error', this.translate.instant('error.form.requiremigrate'));
        return;
      }
      if (selected.length === 0) {
        this.notifier.notify('warning', this.translate.instant('error.selection.noSelection'));
        return;
      }
      this.revokeModalOpened = true;
      this.selectedActiveCerts = selected;
    };
    this.clickMigrateBtn = () => {
      this.migrateModal?.open();
      this.migrateModalOpened = true;
      this.newServiceMrn = this.item.mrn + ":" + this.instanceVersion;
    };
    this.cancel = () => {
      this.certModal?.close();
      this.certModalOpened = false;
      this.revokeModal?.close();
      this.revokeModalOpened = false;
      this.migrateModal?.close();
      this.migrateModalOpened = false;
      this.onRefresh.emit();
      this.newServiceMrn = "";
      this.certificateBundle = undefined;
    };
    this.refreshData = () => {
      this.onRefresh.emit();
    };
    this.issueFromBrowser = () => {
      this.fromBrowser = true;
    };
    this.issueManualKeystore = () => {
      this.fromBrowser = false;
    };
    this.capitalize = s => s[0].toUpperCase() + s.slice(1);
    for (const reason in src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_7__.CertificateRevocation.RevocationReasonEnum) {
      this.revokeReasons.push((0,src_app_common_certRevokeInfo__WEBPACK_IMPORTED_MODULE_8__.getReasonOptionFromRevocationReason)(reason.toLocaleLowerCase()));
    }
    this.revokeReasons.sort((a, b) => a.value.localeCompare(b.value));
    authService.getOrgMrn().then(orgMrn => {
      this.orgMrn = orgMrn;
    });
  }
  ngOnChanges(simpleChange) {
    if (!simpleChange.item || !simpleChange.item.currentValue) return;
    this.item = simpleChange.item.currentValue && simpleChange.item.currentValue;
    if (this.item && this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.Role) {
      this.itemId = this.item.id;
      this.setForm();
    } else if (this.item && this.item.mrn) {
      this.itemId = this.item.mrn;
      if (this.item.instanceVersion) {
        this.instanceVersion = this.item.instanceVersion;
      }
      if (this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.Vessel) {
        this.item = (0,src_app_common_filterObject__WEBPACK_IMPORTED_MODULE_9__.migrateVesselAttributes)(this.item);
      }
      this.setForm();
      if (this.item.certificates) {
        this.assignCertificatesByStatus(this.item.certificates);
      }
    }
    if (this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.OrgCandidate) {
      this.adminUserMrnPrefix = (0,src_app_common_mrnUtil__WEBPACK_IMPORTED_MODULE_11__.getMrnPrefixFromOrgMrn)(this.item.mrn);
    }
  }
  isTimestampFormat(key) {
    return src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.timestampKeys.includes(key);
  }
  download() {
    if (this.certificateBundle) {
      this.fileHelper.downloadPemCertificate(this.certificateBundle, this.itemId, this.notifier);
      this.notifier.notify('success', this.translate.instant('success.certificate.chosen'));
    }
  }
  static #_ = this.ɵfac = function ItemViewComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || ItemViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](src_app_common_shared_certificate_service__WEBPACK_IMPORTED_MODULE_13__.CertificateService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_ngx_translate_core__WEBPACK_IMPORTED_MODULE_18__.TranslateService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](gramli_angular_notifier__WEBPACK_IMPORTED_MODULE_19__.NotifierService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](src_app_common_shared_file_helper_service__WEBPACK_IMPORTED_MODULE_14__.FileHelperService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_15__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_16__.LOCALE_ID));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵdefineComponent"]({
    type: ItemViewComponent,
    selectors: [["app-item-view"]],
    viewQuery: function ItemViewComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_c0, 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_c1, 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_c2, 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵviewQuery"](_item_form_item_form_component__WEBPACK_IMPORTED_MODULE_10__.ItemFormComponent, 5);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.certModal = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.revokeModal = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.migrateModal = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵloadQuery"]()) && (ctx.newAdminUserForm = _t.first);
      }
    },
    inputs: {
      itemType: "itemType",
      item: "item",
      orgMrn: "orgMrn",
      mrnPrefix: "mrnPrefix",
      instanceVersion: "instanceVersion",
      serial: "serial"
    },
    outputs: {
      onEdit: "onEdit",
      onMigrate: "onMigrate",
      onDelete: "onDelete",
      onRefresh: "onRefresh",
      onApprove: "onApprove",
      onDownloadCert: "onDownloadCert"
    },
    standalone: true,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵNgOnChangesFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵStandaloneFeature"]],
    decls: 102,
    vars: 18,
    consts: [["certModal", ""], ["revokeModal", ""], ["migrateModal", ""], ["newAdminUserForm", ""], [1, "clr-row"], [1, "clr-col-lg-12", "clr-col-md-8", "clr-col-12"], [1, "card"], [1, "card-header"], [1, "card-block"], [1, "card-text"], [1, "clr-form", "clr-form-horizontal"], ["class", "clr-form-horizontal clr-form-control clr-row", 4, "ngFor", "ngForOf"], ["title", "New administrator user", 3, "isForNew", "itemType", "item", "mrnPrefix"], [1, "card-footer"], [1, "btn", "btn-primary"], [1, "btn", "btn-success"], [1, "btn", "btn-danger", 3, "click"], ["clrModalSize", "lg", 1, "modal", 3, "clrModalOpenChange", "clrModalOpen"], [1, "modal-title"], ["aria-label", "Close", "type", "button", 1, "close", 3, "click"], [1, "modal-body"], [1, "clr-col-sm-12", "clr-col-md-12"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-primary", 3, "click"], ["type", "button", 1, "btn", "btn-outline", 3, "click"], [1, "clr-col-4"], [1, "clr-col-8"], ["type", "date", "autocomplete", "off", "clrDate", "", "name", "demo", 3, "ngModelChange", "ngModel"], [1, "clr-form"], [1, "clr-form-control"], ["for", "basic", 1, "clr-control-label"], [1, "clr-control-container"], [1, "clr-input-wrapper"], ["type", "text", "id", "basic", "placeholder", "Enter value here", 1, "clr-input", 3, "value"], ["shape", "exclamation-circle", 1, "clr-validate-icon"], [1, "clr-subtext"], [1, "clr-form-horizontal", "clr-form-control", "clr-row"], [1, "clr-control-label", "clr-col-12", "clr-col-md-2"], ["ng-reflect-ng-class", "clr-col-md-10 clr-col-12", 1, "clr-control-container", "clr-col-md-10", "clr-col-12"], ["clrinput", "", "type", "string", "ng-reflect-name", "mrn", "ng-reflect-required", "true", "required", "", "aria-describedby", "clr-form-control-1-helper", 1, "clr-input", "ng-untouched", "ng-pristine", "ng-invalid", "ng-star-inserted", 3, "width"], ["clrinput", "", "type", "string", "ng-reflect-name", "mrn", "ng-reflect-required", "true", "required", "", "aria-describedby", "clr-form-control-1-helper", 1, "clr-input", "ng-untouched", "ng-pristine", "ng-invalid", "ng-star-inserted"], [1, "clr-control-label"], ["context", "active", 3, "onAdd", "onDownload", "onRevoke", "data", "serial"], ["context", "revoked", 3, "data"], [1, "btn", "btn-primary", 3, "click"], [1, "btn", "btn-success", 3, "click"], ["type", "radio", "clrRadio", "", "name", "options", "required", "", 3, "click"], ["target", "_blank", 3, "href"]],
    template: function ItemViewComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵgetCurrentView"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](0, "div", 4)(1, "div", 5)(2, "div", 6)(3, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](4, ItemViewComponent_Conditional_4_Template, 1, 0)(5, ItemViewComponent_Conditional_5_Template, 1, 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](6, "div", 8)(7, "div", 9)(8, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](9, ItemViewComponent_div_9_Template, 7, 2, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵpipe"](10, "keyvalue");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](11, ItemViewComponent_Conditional_11_Template, 10, 3)(12, ItemViewComponent_Conditional_12_Template, 2, 4, "app-item-form", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](13, "div", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](14, ItemViewComponent_Conditional_14_Template, 2, 0, "button", 14)(15, ItemViewComponent_Conditional_15_Template, 2, 0, "button", 15)(16, ItemViewComponent_Conditional_16_Template, 2, 0, "button", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](17, "button", 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_17_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.deleteItem());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](18, "Delete");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](19, "clr-modal", 17, 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayListener"]("clrModalOpenChange", function ItemViewComponent_Template_clr_modal_clrModalOpenChange_19_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayBindingSet"](ctx.certModalOpened, $event) || (ctx.certModalOpened = $event);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"]($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](21, "div", 18)(22, "button", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_22_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](23, "h3", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](24, "Issue a new certificate");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](25, "div", 20);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](26, ItemViewComponent_Conditional_26_Template, 3, 0, "div", 21);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](27, "div", 22)(28, "button", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_28_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.download());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](29, "Download certificate");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](30, "button", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_30_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](31, "Close");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](32, "clr-modal", 17, 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayListener"]("clrModalOpenChange", function ItemViewComponent_Template_clr_modal_clrModalOpenChange_32_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayBindingSet"](ctx.revokeModalOpened, $event) || (ctx.revokeModalOpened = $event);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"]($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](34, "div", 18)(35, "button", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_35_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](36, ItemViewComponent_Conditional_36_Template, 2, 1, "h3", 18)(37, ItemViewComponent_Conditional_37_Template, 2, 1, "h3", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](38, "div", 20)(39, "div", 21)(40, "div", 4)(41, "span")(42, "b");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](43, "Warning: chosen certificates will no longer be valid when they are revoked!");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](44, "div", 4)(45, "div", 25)(46, "div")(47, "h5");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](48, "Reason name");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](49, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrepeaterCreate"](50, ItemViewComponent_For_51_Template, 4, 1, "clr-radio-wrapper", null, _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrepeaterTrackByIdentity"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](52, "div", 26)(53, "div")(54, "h5");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](55, "Explanation");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](56, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtemplate"](57, ItemViewComponent_Conditional_57_Template, 6, 2)(58, ItemViewComponent_Conditional_58_Template, 3, 0, "div");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](59, "div", 4)(60, "div", 25)(61, "div")(62, "h5");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](63, "Revoke at");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](64, "div", 26)(65, "clr-date-container")(66, "input", 27);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayListener"]("ngModelChange", function ItemViewComponent_Template_input_ngModelChange_66_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayBindingSet"](ctx.revokeAt, $event) || (ctx.revokeAt = $event);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"]($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](67, "div", 4)(68, "div")(69, "p");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](70, "Choose revocation reason and date to proceed.");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](71, "div", 22)(72, "button", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_72_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.revokeCerts(ctx.selectedActiveCerts));
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](73, "Revoke");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](74, "button", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_74_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](75, "Cancel");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](76, "clr-modal", 17, 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayListener"]("clrModalOpenChange", function ItemViewComponent_Template_clr_modal_clrModalOpenChange_76_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayBindingSet"](ctx.migrateModalOpened, $event) || (ctx.migrateModalOpened = $event);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"]($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](78, "div", 18)(79, "button", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_79_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](80, " Migrate service ");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](81, "div", 20)(82, "div", 21)(83, "div", 4)(84, "span");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](85, "This migration allows you to remove the version from an existing service's MRN by assigning a new MRN that includes the version. It simplifies version management and future updates, making it easier for users to maintain and update services. The MRN below is given as an example, but you can edit it as you want.");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](86, "div", 4)(87, "form", 28)(88, "div", 29)(89, "label", 30);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](90, "Recommended new MRN for your service");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](91, "div", 31)(92, "div", 32);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelement"](93, "input", 33)(94, "cds-icon", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](95, "span", 35);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](96, "New MRN can have the version of service inside.");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()()()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](97, "div", 22)(98, "button", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_98_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.migrate());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](99, "Migrate");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementStart"](100, "button", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵlistener"]("click", function ItemViewComponent_Template_button_click_100_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrestoreView"](_r1);
          return _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵresetView"](ctx.cancel());
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtext"](101, "Cancel");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵelementEnd"]()()();
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.itemType === "orgcandidate" ? 4 : 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵpipeBind2"](10, 15, ctx.columnForMenu, ctx.sortColumnForMenu));
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.itemType !== "role" && ctx.itemType !== "orgcandidate" ? 11 : -1);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.itemType === "orgcandidate" ? 12 : -1);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.itemType === "service" && ctx.instanceVersion ? 14 : ctx.itemType === "orgcandidate" ? 15 : 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayProperty"]("clrModalOpen", ctx.certModalOpened);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.certificateBundle ? 26 : -1);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayProperty"]("clrModalOpen", ctx.revokeModalOpened);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.selectedActiveCerts.length > 1 ? 36 : 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](14);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵrepeater"](ctx.revokeReasons);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](7);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵconditional"](ctx.revokeReason ? 57 : 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](9);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayProperty"]("ngModel", ctx.revokeAt);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](10);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵtwoWayProperty"]("clrModalOpen", ctx.migrateModalOpened);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵadvance"](17);
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵstyleProp"]("width", 400, "px");
        _angular_core__WEBPACK_IMPORTED_MODULE_16__["ɵɵproperty"]("value", ctx.newServiceMrn);
      }
    },
    dependencies: [src_app_common_shared_shared_module__WEBPACK_IMPORTED_MODULE_4__.SharedModule, _angular_common__WEBPACK_IMPORTED_MODULE_17__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_17__.KeyValuePipe, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrModalModule, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrModal, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrModalBody, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.CdsIconCustomTag, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrRadioModule, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrLabel, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrRadio, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrRadioWrapper, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrDatepickerModule, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrDateContainer, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrDateInput, _clr_angular__WEBPACK_IMPORTED_MODULE_20__.ClrDateInputValidator, _item_form_item_form_component__WEBPACK_IMPORTED_MODULE_10__.ItemFormComponent, _cert_table_cert_table_component__WEBPACK_IMPORTED_MODULE_1__.CertTableComponent, _angular_forms__WEBPACK_IMPORTED_MODULE_21__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_21__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_21__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_21__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_21__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_21__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_21__.NgForm],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 53426:
/*!***************************************************************************************!*\
  !*** ./src/app/components/smart-expandable-table/smart-expandable-table.component.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmartExpandableTableComponent: () => (/* binding */ SmartExpandableTableComponent)
/* harmony export */ });
/* harmony import */ var _Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/@babel+runtime@7.25.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 18540);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @clr/angular */ 81577);
/* harmony import */ var src_app_common_menuType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/common/menuType */ 95166);
/* harmony import */ var _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../item-view/item-view.component */ 25642);
/* harmony import */ var src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/common/timeConverter */ 71066);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ 44424);
/* harmony import */ var src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/auth/auth.service */ 84595);
/* harmony import */ var src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/backend-api/identity-registry */ 9136);











function SmartExpandableTableComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div")(1, "button", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_0_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.back());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2, "Back");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](3, "div", 2)(4, "div", 3)(5, "app-item-view", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("onEdit", function SmartExpandableTableComponent_Conditional_0_Template_app_item_view_onEdit_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.edit(ctx_r1.selectedItem));
    })("onDelete", function SmartExpandableTableComponent_Conditional_0_Template_app_item_view_onDelete_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.deleteItem(ctx_r1.selectedItem));
    })("onRefresh", function SmartExpandableTableComponent_Conditional_0_Template_app_item_view_onRefresh_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.refreshData());
    })("onMigrate", function SmartExpandableTableComponent_Conditional_0_Template_app_item_view_onMigrate_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.migrate($event));
    })("onApprove", function SmartExpandableTableComponent_Conditional_0_Template_app_item_view_onApprove_5_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.approve($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("itemType", ctx_r1.itemType)("item", ctx_r1.selectedItem);
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 9)(1, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_1_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.onAdd());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "cds-icon", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r1.addText, " ");
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 9)(1, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_2_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r5);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.onDelete(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "cds-icon", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_2_Template_button_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r5);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.onDownload(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](5, "cds-icon", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r1.deleteText, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r1.downloadText, "");
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 9)(1, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_3_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r6);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.onDelete(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](2, "cds-icon", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate1"](" ", ctx_r1.deleteText, "");
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-action-bar");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](1, SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_1_Template, 4, 1, "div", 9)(2, SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_2_Template, 7, 2, "div", 9)(3, SmartExpandableTableComponent_Conditional_1_Conditional_1_Conditional_3_Template, 4, 1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.onAdd !== undefined ? 1 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.onDelete !== undefined && ctx_r1.onDownload !== undefined ? 2 : ctx_r1.onDelete !== undefined ? 3 : -1);
  }
}
function SmartExpandableTableComponent_Conditional_1_For_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-column");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const column_r7 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](column_r7);
  }
}
function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-cell", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template_clr_dg_cell_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r8);
      const datum_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.userRowSelect(datum_r9));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const itemName_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
    const datum_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](ctx_r1.convertTimeString(datum_r9[itemName_r10]));
  }
}
function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-cell", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template_clr_dg_cell_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r11);
      const datum_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.userRowSelect(datum_r9));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const itemName_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
    const datum_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](datum_r9[itemName_r10]);
  }
}
function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](0, SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template, 2, 1, "clr-dg-cell")(1, SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template, 2, 1, "clr-dg-cell");
  }
  if (rf & 2) {
    const itemName_r10 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.isTimestampFormat(itemName_r10) ? 0 : 1);
  }
}
function SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-row", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterCreate"](1, SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_For_2_Template, 2, 1, null, null, _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterTrackByIdentity"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const datum_r9 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("clrDgItem", datum_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeater"](ctx_r1.labelKeys);
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_7_clr_dg_detail_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-dg-detail")(1, "clr-dg-detail-header");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](3, "clr-dg-detail-body");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](4, "app-item-view", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const detail_r12 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](detail_r12.mrn);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("itemType", ctx_r1.itemType)("item", detail_r12);
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](0, SmartExpandableTableComponent_Conditional_1_Conditional_7_clr_dg_detail_0_Template, 5, 3, "clr-dg-detail", 16);
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_9_For_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_9_For_5_Template_button_click_0_listener() {
      const i_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r14).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.loadData(i_r15));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const i_r15 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", i_r15 == ctx_r1.currentPageNumber);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](i_r15 + 1);
  }
}
function SmartExpandableTableComponent_Conditional_1_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "div", 8)(1, "div", 18)(2, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_9_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r13);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.changePageRange(-1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](3, " \u00AB ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterCreate"](4, SmartExpandableTableComponent_Conditional_1_Conditional_9_For_5_Template, 2, 2, "button", 20, _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterTrackByIdentity"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](6, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("click", function SmartExpandableTableComponent_Conditional_1_Conditional_9_Template_button_click_6_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r13);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.changePageRange(1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](7, " \u00BB ");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", ctx_r1.currentPageRange === 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeater"](ctx_r1.visiblePageNumbers);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("disabled", (ctx_r1.currentPageRange + 1) * ctx_r1.elementsPerPage >= ctx_r1.totalPages);
  }
}
function SmartExpandableTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "clr-datagrid", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtwoWayListener"]("clrDgSelectedChange", function SmartExpandableTableComponent_Conditional_1_Template_clr_datagrid_clrDgSelectedChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r3);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtwoWayBindingSet"](ctx_r1.selected, $event) || (ctx_r1.selected = $event);
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"]($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("clrDgRefresh", function SmartExpandableTableComponent_Conditional_1_Template_clr_datagrid_clrDgRefresh_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrestoreView"](_r3);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresetView"](ctx_r1.refresh($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](1, SmartExpandableTableComponent_Conditional_1_Conditional_1_Template, 4, 2, "clr-dg-action-bar");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterCreate"](2, SmartExpandableTableComponent_Conditional_1_For_3_Template, 2, 1, "clr-dg-column", null, _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeaterTrackByIdentity"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "clr-dg-placeholder", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](6, SmartExpandableTableComponent_Conditional_1_clr_dg_row_6_Template, 3, 1, "clr-dg-row", 7)(7, SmartExpandableTableComponent_Conditional_1_Conditional_7_Template, 1, 0, "clr-dg-detail");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](8, "clr-dg-footer");
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](9, SmartExpandableTableComponent_Conditional_1_Conditional_9_Template, 8, 2, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtwoWayProperty"]("clrDgSelected", ctx_r1.selected);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("clrDgLoading", ctx_r1.isLoading);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.onAdd || ctx_r1.onDelete || ctx_r1.onDownload ? 1 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵrepeater"](ctx_r1.labelTitles);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtextInterpolate"](ctx_r1.placeholder);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("clrDgItemsOf", ctx_r1.data);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.detailView ? 7 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx_r1.totalPages > 1 ? 9 : -1);
  }
}
class SmartExpandableTableComponent {
  constructor(router, authService, roleService) {
    this.router = router;
    this.authService = authService;
    this.roleService = roleService;
    this.itemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Device;
    this.labels = undefined;
    this.placeholder = 'We couldn\'t find any data!';
    this.deleteText = 'Delete';
    this.downloadText = 'Download';
    this.addText = 'Add';
    this.totalPages = 0;
    this.totalElements = 0;
    this.getData = itemType => new Promise((resolve, reject) => resolve([]));
    this.onRowSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onRevokeCerts = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onDownloadCerts = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onEdit = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onMigrate = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onRefresh = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.onApprove = new _angular_core__WEBPACK_IMPORTED_MODULE_6__.EventEmitter();
    this.data = undefined;
    this.selected = [];
    this.detail = {};
    this.selectedItem = {};
    this.expanded = false;
    this.detailView = false;
    this.labelKeys = [];
    this.labelTitles = [];
    this.isLoading = false;
    this.pageNumbers = [];
    this.currentPageNumber = 0;
    this.currentPageRange = 0;
    this.visiblePageNumbers = [];
    this.elementsPerPage = 10;
    this.roles = [];
    this.userRowSelect = selectedItem => {
      this.expanded = true;
      this.selectedItem = selectedItem;
      this.onRowSelect.emit(selectedItem);
    };
    this.back = () => {
      this.expanded = false;
      this.selectedItem = {};
    };
    this.edit = selectedItem => {
      this.expanded = true;
      this.selectedItem = selectedItem;
      this.onEdit.emit(selectedItem);
    };
    this.approve = selectedItem => {
      this.onApprove.emit(selectedItem);
    };
    this.migrate = newServiceMrn => {
      this.onMigrate.emit({
        ...this.selectedItem,
        newServiceMrn: newServiceMrn
      });
    };
    this.deleteItem = selectedItem => {
      this.onDelete?.call(this, [selectedItem]);
    };
    this.convertTimeString = time => {
      return (0,src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_3__.convertTime)(time);
    };
    this.refreshData = () => {
      this.loadData().then(() => {
        if (this.selectedItem && this.selectedItem.mrn) {
          const updatedItem = this.data?.find(item => this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Service ? item.mrn === this.selectedItem.mrn && item.instanceVersion === this.selectedItem.instanceVersion : this.itemType === src_app_common_menuType__WEBPACK_IMPORTED_MODULE_1__.ItemType.Role ? item.id === this.selectedItem.id : item.mrn === this.selectedItem.mrn);
          if (updatedItem) {
            this.selectedItem = updatedItem;
          }
        }
      });
    };
    this.isLoading = true;
  }
  ngOnInit() {
    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
    //Add 'implements OnInit' to the class.
    if (this.labels) {
      this.labelKeys = Object.keys(this.labels);
      this.labelTitles = Object.values(this.labels).map(label => label.title);
    }
    this.authService.getOrgMrn().then(orgMrn => {
      this.roleService.getRoles(orgMrn).subscribe(roles => {
        this.roles = roles;
      });
    });
  }
  ngOnChanges(changes) {
    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
    //Add '${implements OnChanges}' to the class.
    // apply updates of total pages for pagination
    if (changes['totalPages']) {
      this.pageNumbers = Array(this.totalPages).fill(0).map((x, i) => i);
    }
    this.updateVisiblePageNumbers();
  }
  updateVisiblePageNumbers() {
    const startPage = this.currentPageRange * this.elementsPerPage;
    const endPage = Math.min(startPage + this.elementsPerPage, this.totalPages);
    this.visiblePageNumbers = Array.from({
      length: endPage - startPage
    }, (_, index) => startPage + index);
  }
  /**
   * Change the page range (left or right)
   * @param direction -1 for left, +1 for right
   */
  changePageRange(direction) {
    this.currentPageRange += direction;
    this.updateVisiblePageNumbers();
  }
  loadData(pageNumber = this.currentPageNumber) {
    var _this = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.data = (yield _this.getData(_this.itemType, pageNumber, _this.elementsPerPage)) || [];
      if (pageNumber !== _this.currentPageNumber) {
        _this.currentPageNumber = pageNumber;
      }
      _this.isLoading = false;
    })();
  }
  // this function is for background loading of data
  refresh(state) {
    var _this2 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this2.data) {
        _this2.loadData();
      }
    })();
  }
  isTimestampFormat(key) {
    return src_app_common_menuType__WEBPACK_IMPORTED_MODULE_1__.timestampKeys.includes(key);
  }
  static #_ = this.ɵfac = function SmartExpandableTableComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || SmartExpandableTableComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_7__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_4__.AuthService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](src_app_backend_api_identity_registry__WEBPACK_IMPORTED_MODULE_5__.RoleControllerService));
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({
    type: SmartExpandableTableComponent,
    selectors: [["app-smart-expandable-table"]],
    inputs: {
      itemType: "itemType",
      labels: "labels",
      placeholder: "placeholder",
      onDownload: "onDownload",
      onDelete: "onDelete",
      onAdd: "onAdd",
      deleteText: "deleteText",
      downloadText: "downloadText",
      addText: "addText",
      totalPages: "totalPages",
      totalElements: "totalElements",
      getData: "getData"
    },
    outputs: {
      onRowSelect: "onRowSelect",
      onRevokeCerts: "onRevokeCerts",
      onDownloadCerts: "onDownloadCerts",
      onEdit: "onEdit",
      onMigrate: "onMigrate",
      onRefresh: "onRefresh",
      onApprove: "onApprove"
    },
    standalone: true,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵNgOnChangesFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵStandaloneFeature"]],
    decls: 2,
    vars: 1,
    consts: [[3, "clrDgSelected", "clrDgLoading"], [1, "btn", "btn-sm", "btn-secondary", 3, "click"], [1, "clr-row"], [1, "clr-col-lg-12", "clr-col-md-8", "clr-col-12"], [3, "onEdit", "onDelete", "onRefresh", "onMigrate", "onApprove", "itemType", "item"], [3, "clrDgSelectedChange", "clrDgRefresh", "clrDgSelected", "clrDgLoading"], [1, "datagrid-empty"], [3, "clrDgItem", 4, "clrDgItems", "clrDgItemsOf"], [1, "clr-row", "clr-justify-content-center"], [1, "btn-group"], ["type", "button", 1, "btn", "btn-sm", "btn-secondary", 3, "click"], ["shape", "plus"], ["shape", "times"], ["shape", "download"], [3, "clrDgItem"], [3, "click"], [4, "clrIfDetail"], [3, "itemType", "item"], [1, "btn-group", "btn-outline-primary", "btn-sm"], [1, "btn", 3, "click", "disabled"], [1, "btn", 3, "disabled"]],
    template: function SmartExpandableTableComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtemplate"](0, SmartExpandableTableComponent_Conditional_0_Template, 6, 2)(1, SmartExpandableTableComponent_Conditional_1_Template, 10, 7, "clr-datagrid", 0);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵconditional"](ctx.expanded ? 0 : 1);
      }
    },
    dependencies: [_clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClarityModule, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagrid, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridActionBar, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridCell, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridColumn, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridDetail, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridDetailBody, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridDetailHeader, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridFooter, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridItems, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridPlaceholder, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridRow, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrIfDetail, _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrDatagridCellRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrDatagridHeaderRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrDatagridMainRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrDatagridRowRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrActionableOompaLoompa"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrDatagridWillyWonka"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__["ÇlrExpandableOompaLoompa"], _clr_angular__WEBPACK_IMPORTED_MODULE_8__.CdsIconCustomTag, _clr_angular__WEBPACK_IMPORTED_MODULE_8__.ClrDatagridModule, _item_view_item_view_component__WEBPACK_IMPORTED_MODULE_2__.ItemViewComponent],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 18962:
/*!*****************************************************************!*\
  !*** ./src/app/components/smart-table/smart-table.component.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmartTableComponent: () => (/* binding */ SmartTableComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 1888);
/* harmony import */ var _clr_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @clr/angular */ 81577);
/* harmony import */ var _cds_core_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cds/core/icon */ 52960);
/* harmony import */ var _cds_core_icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cds/core/icon */ 10853);
/* harmony import */ var _cds_core_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @cds/core/icon */ 34839);
/* harmony import */ var _cds_core_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @cds/core/icon */ 47849);
/* harmony import */ var src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/common/menuType */ 95166);
/* harmony import */ var src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/common/timeConverter */ 71066);







const _c0 = () => [10, 20, 50, 100];
function SmartTableComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-spinner");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1, "Loading");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
}
function SmartTableComponent_Conditional_1_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 7)(1, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_Conditional_1_Conditional_1_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r3);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.onAdd());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "cds-icon", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r1.addText, " ");
  }
}
function SmartTableComponent_Conditional_1_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 7)(1, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_Conditional_1_Conditional_2_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.onDelete(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "cds-icon", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](4, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_Conditional_1_Conditional_2_Template_button_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r4);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.onDownload(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](5, "cds-icon", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r1.deleteText, "");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r1.downloadText, "");
  }
}
function SmartTableComponent_Conditional_1_Conditional_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 7)(1, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_Conditional_1_Conditional_3_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r5);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.onDelete(ctx_r1.selected));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](2, "cds-icon", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate1"](" ", ctx_r1.deleteText, "");
  }
}
function SmartTableComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-dg-action-bar");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, SmartTableComponent_Conditional_1_Conditional_1_Conditional_1_Template, 4, 1, "div", 7)(2, SmartTableComponent_Conditional_1_Conditional_1_Conditional_2_Template, 7, 2, "div", 7)(3, SmartTableComponent_Conditional_1_Conditional_1_Conditional_3_Template, 4, 1, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵconditional"](ctx_r1.onAdd !== undefined ? 1 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵconditional"](ctx_r1.onDelete !== undefined && ctx_r1.onDownload !== undefined ? 2 : ctx_r1.onDelete !== undefined ? 3 : -1);
  }
}
function SmartTableComponent_Conditional_1_For_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-dg-column");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const column_r6 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](column_r6);
  }
}
function SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-dg-cell", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template_clr_dg_cell_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r7);
      const datum_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.userRowSelect(datum_r8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const itemName_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]().$implicit;
    const datum_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]().$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r1.convertTimeString(datum_r8[itemName_r9]));
  }
}
function SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-dg-cell", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("click", function SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template_clr_dg_cell_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r10);
      const datum_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2).$implicit;
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"](ctx_r1.userRowSelect(datum_r8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const itemName_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]().$implicit;
    const datum_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](datum_r8[itemName_r9]);
  }
}
function SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](0, SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_0_Template, 2, 1, "clr-dg-cell")(1, SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Conditional_1_Template, 2, 1, "clr-dg-cell");
  }
  if (rf & 2) {
    const itemName_r9 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵconditional"](ctx_r1.isTimestampFormat(itemName_r9) ? 0 : 1);
  }
}
function SmartTableComponent_Conditional_1_clr_dg_row_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-dg-row", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeaterCreate"](1, SmartTableComponent_Conditional_1_clr_dg_row_6_For_2_Template, 2, 1, null, null, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeaterTrackByIdentity"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const datum_r8 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("clrDgItem", datum_r8);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeater"](ctx_r1.labelKeys);
  }
}
function SmartTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "clr-datagrid", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtwoWayListener"]("clrDgSelectedChange", function SmartTableComponent_Conditional_1_Template_clr_datagrid_clrDgSelectedChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrestoreView"](_r1);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtwoWayBindingSet"](ctx_r1.selected, $event) || (ctx_r1.selected = $event);
      return _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵresetView"]($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, SmartTableComponent_Conditional_1_Conditional_1_Template, 4, 2, "clr-dg-action-bar");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeaterCreate"](2, SmartTableComponent_Conditional_1_For_3_Template, 2, 1, "clr-dg-column", null, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeaterTrackByIdentity"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](4, "clr-dg-placeholder", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](6, SmartTableComponent_Conditional_1_clr_dg_row_6_Template, 3, 1, "clr-dg-row", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](7, "clr-dg-footer")(8, "clr-dg-pagination", 5, 0)(10, "clr-dg-page-size", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](11, " items per page");
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](12);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const pagination_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵreference"](9);
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtwoWayProperty"]("clrDgSelected", ctx_r1.selected);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵconditional"](ctx_r1.onAdd || ctx_r1.onDelete || ctx_r1.onDownload ? 1 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵrepeater"](ctx_r1.labelTitles);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx_r1.placeholder);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("clrDgItemsOf", ctx_r1.data);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("clrDgPageSize", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("clrPageSizeOptions", _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpureFunction0"](9, _c0));
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate3"](" ", pagination_r11.firstItem + 1, " - ", pagination_r11.lastItem + 1, " of ", pagination_r11.totalItems, " certificates ");
  }
}
_cds_core_icon__WEBPACK_IMPORTED_MODULE_3__.ClarityIcons.addIcons(_cds_core_icon__WEBPACK_IMPORTED_MODULE_4__.downloadIcon, _cds_core_icon__WEBPACK_IMPORTED_MODULE_5__.timesIcon, _cds_core_icon__WEBPACK_IMPORTED_MODULE_6__.plusIcon);
class SmartTableComponent {
  constructor() {
    this.data = [];
    this.itemType = src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.ItemType.Device;
    this.labels = {};
    this.placeholder = 'We couldn\'t find any data!';
    this.deleteText = 'Delete';
    this.downloadText = 'Download';
    this.addText = 'Add';
    this.selectedIds = [];
    this.onRowSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
    this.selected = [];
    this.detail = {};
    this.isLoading = false;
    this.labelKeys = [];
    this.labelTitles = [];
    this.userRowSelect = selected => {
      if (this.onRowSelect) {
        this.onRowSelect.emit(selected);
      }
    };
    this.convertTimeString = time => {
      return (0,src_app_common_timeConverter__WEBPACK_IMPORTED_MODULE_1__.convertTime)(time);
    };
    this.isLoading = true;
  }
  ngOnChanges(changes) {
    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
    //Add '${implements OnChanges}' to the class.
    if (changes['data'].currentValue.length > 0) {
      this.labelKeys = Object.keys(this.labels);
      this.labelTitles = Object.values(this.labels).map(label => label.title);
    }
    this.isLoading = false;
    if (this.data.length > 0 && this.selectedIds.length > 0) {
      this.selected = this.data.filter(item => this.selectedIds[0] === item.serialNumber);
    }
  }
  isTimestampFormat(key) {
    return src_app_common_menuType__WEBPACK_IMPORTED_MODULE_0__.timestampKeys.includes(key);
  }
  static #_ = this.ɵfac = function SmartTableComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || SmartTableComponent)();
  };
  static #_2 = this.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
    type: SmartTableComponent,
    selectors: [["app-smart-table"]],
    inputs: {
      data: "data",
      itemType: "itemType",
      labels: "labels",
      placeholder: "placeholder",
      onDownload: "onDownload",
      onDelete: "onDelete",
      onAdd: "onAdd",
      deleteText: "deleteText",
      downloadText: "downloadText",
      addText: "addText",
      selectedIds: "selectedIds"
    },
    outputs: {
      onRowSelect: "onRowSelect"
    },
    standalone: true,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵNgOnChangesFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵStandaloneFeature"]],
    decls: 2,
    vars: 1,
    consts: [["pagination", ""], [3, "clrDgSelected"], [3, "clrDgSelectedChange", "clrDgSelected"], [1, "datagrid-empty"], [3, "clrDgItem", 4, "clrDgItems", "clrDgItemsOf"], [3, "clrDgPageSize"], [3, "clrPageSizeOptions"], [1, "btn-group"], ["type", "button", 1, "btn", "btn-sm", "btn-secondary", 3, "click"], ["shape", "plus"], ["shape", "times"], ["shape", "download"], [3, "clrDgItem"], [3, "click"]],
    template: function SmartTableComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](0, SmartTableComponent_Conditional_0_Template, 2, 0, "clr-spinner")(1, SmartTableComponent_Conditional_1_Template, 13, 10, "clr-datagrid", 1);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵconditional"](ctx.isLoading ? 0 : 1);
      }
    },
    dependencies: [_clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClarityModule, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagrid, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridActionBar, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridCell, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridColumn, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridFooter, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridItems, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridPageSize, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridPagination, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridPlaceholder, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridRow, _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrDatagridCellRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrDatagridHeaderRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrDatagridMainRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrDatagridRowRenderer"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrActionableOompaLoompa"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrDatagridWillyWonka"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__["ÇlrExpandableOompaLoompa"], _clr_angular__WEBPACK_IMPORTED_MODULE_7__.CdsIconCustomTag, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrSpinner, _clr_angular__WEBPACK_IMPORTED_MODULE_7__.ClrDatagridModule],
    styles: ["/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */"]
  });
}

/***/ }),

/***/ 5938:
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/asn1js@3.0.5/node_modules/asn1js/build/index.es.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Any: () => (/* binding */ Any),
/* harmony export */   BaseBlock: () => (/* binding */ BaseBlock),
/* harmony export */   BaseStringBlock: () => (/* binding */ BaseStringBlock),
/* harmony export */   BitString: () => (/* binding */ BitString),
/* harmony export */   BmpString: () => (/* binding */ BmpString),
/* harmony export */   Boolean: () => (/* binding */ Boolean),
/* harmony export */   CharacterString: () => (/* binding */ CharacterString),
/* harmony export */   Choice: () => (/* binding */ Choice),
/* harmony export */   Constructed: () => (/* binding */ Constructed),
/* harmony export */   DATE: () => (/* binding */ DATE),
/* harmony export */   DateTime: () => (/* binding */ DateTime),
/* harmony export */   Duration: () => (/* binding */ Duration),
/* harmony export */   EndOfContent: () => (/* binding */ EndOfContent),
/* harmony export */   Enumerated: () => (/* binding */ Enumerated),
/* harmony export */   GeneralString: () => (/* binding */ GeneralString),
/* harmony export */   GeneralizedTime: () => (/* binding */ GeneralizedTime),
/* harmony export */   GraphicString: () => (/* binding */ GraphicString),
/* harmony export */   HexBlock: () => (/* binding */ HexBlock),
/* harmony export */   IA5String: () => (/* binding */ IA5String),
/* harmony export */   Integer: () => (/* binding */ Integer),
/* harmony export */   Null: () => (/* binding */ Null),
/* harmony export */   NumericString: () => (/* binding */ NumericString),
/* harmony export */   ObjectIdentifier: () => (/* binding */ ObjectIdentifier),
/* harmony export */   OctetString: () => (/* binding */ OctetString),
/* harmony export */   Primitive: () => (/* binding */ Primitive),
/* harmony export */   PrintableString: () => (/* binding */ PrintableString),
/* harmony export */   RawData: () => (/* binding */ RawData),
/* harmony export */   RelativeObjectIdentifier: () => (/* binding */ RelativeObjectIdentifier),
/* harmony export */   Repeated: () => (/* binding */ Repeated),
/* harmony export */   Sequence: () => (/* binding */ Sequence),
/* harmony export */   Set: () => (/* binding */ Set),
/* harmony export */   TIME: () => (/* binding */ TIME),
/* harmony export */   TeletexString: () => (/* binding */ TeletexString),
/* harmony export */   TimeOfDay: () => (/* binding */ TimeOfDay),
/* harmony export */   UTCTime: () => (/* binding */ UTCTime),
/* harmony export */   UniversalString: () => (/* binding */ UniversalString),
/* harmony export */   Utf8String: () => (/* binding */ Utf8String),
/* harmony export */   ValueBlock: () => (/* binding */ ValueBlock),
/* harmony export */   VideotexString: () => (/* binding */ VideotexString),
/* harmony export */   ViewWriter: () => (/* binding */ ViewWriter),
/* harmony export */   VisibleString: () => (/* binding */ VisibleString),
/* harmony export */   compareSchema: () => (/* binding */ compareSchema),
/* harmony export */   fromBER: () => (/* binding */ fromBER),
/* harmony export */   verifySchema: () => (/* binding */ verifySchema)
/* harmony export */ });
/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pvtsutils */ 84727);
/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvutils */ 58172);
/*!
 * Copyright (c) 2014, GMO GlobalSign
 * Copyright (c) 2015-2022, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */



function assertBigInt() {
  if (typeof BigInt === "undefined") {
    throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
  }
}
function concat(buffers) {
  let outputLength = 0;
  let prevLength = 0;
  for (let i = 0; i < buffers.length; i++) {
    const buffer = buffers[i];
    outputLength += buffer.byteLength;
  }
  const retView = new Uint8Array(outputLength);
  for (let i = 0; i < buffers.length; i++) {
    const buffer = buffers[i];
    retView.set(new Uint8Array(buffer), prevLength);
    prevLength += buffer.byteLength;
  }
  return retView.buffer;
}
function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof Uint8Array)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
    return false;
  }
  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }
  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }
  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }
  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }
  return true;
}
class ViewWriter {
  constructor() {
    this.items = [];
  }
  write(buf) {
    this.items.push(buf);
  }
  final() {
    return concat(this.items);
  }
}
const powers2 = [new Uint8Array([1])];
const digitsString = "0123456789";
const NAME = "name";
const VALUE_HEX_VIEW = "valueHexView";
const IS_HEX_ONLY = "isHexOnly";
const ID_BLOCK = "idBlock";
const TAG_CLASS = "tagClass";
const TAG_NUMBER = "tagNumber";
const IS_CONSTRUCTED = "isConstructed";
const FROM_BER = "fromBER";
const TO_BER = "toBER";
const LOCAL = "local";
const EMPTY_STRING = "";
const EMPTY_BUFFER = new ArrayBuffer(0);
const EMPTY_VIEW = new Uint8Array(0);
const END_OF_CONTENT_NAME = "EndOfContent";
const OCTET_STRING_NAME = "OCTET STRING";
const BIT_STRING_NAME = "BIT STRING";
function HexBlock(BaseClass) {
  var _a;
  return _a = class Some extends BaseClass {
    constructor(...args) {
      var _a;
      super(...args);
      const params = args[0] || {};
      this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;
      this.valueHexView = params.valueHex ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;
    }
    get valueHex() {
      return this.valueHexView.slice().buffer;
    }
    set valueHex(value) {
      this.valueHexView = new Uint8Array(value);
    }
    fromBER(inputBuffer, inputOffset, inputLength) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      if (!checkBufferParams(this, view, inputOffset, inputLength)) {
        return -1;
      }
      const endLength = inputOffset + inputLength;
      this.valueHexView = view.subarray(inputOffset, endLength);
      if (!this.valueHexView.length) {
        this.warnings.push("Zero buffer length");
        return inputOffset;
      }
      this.blockLength = inputLength;
      return endLength;
    }
    toBER(sizeOnly = false) {
      if (!this.isHexOnly) {
        this.error = "Flag 'isHexOnly' is not set, abort";
        return EMPTY_BUFFER;
      }
      if (sizeOnly) {
        return new ArrayBuffer(this.valueHexView.byteLength);
      }
      return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;
    }
    toJSON() {
      return {
        ...super.toJSON(),
        isHexOnly: this.isHexOnly,
        valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView)
      };
    }
  }, _a.NAME = "hexBlock", _a;
}
class LocalBaseBlock {
  constructor({
    blockLength = 0,
    error = EMPTY_STRING,
    warnings = [],
    valueBeforeDecode = EMPTY_VIEW
  } = {}) {
    this.blockLength = blockLength;
    this.error = error;
    this.warnings = warnings;
    this.valueBeforeDecodeView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(valueBeforeDecode);
  }
  static blockName() {
    return this.NAME;
  }
  get valueBeforeDecode() {
    return this.valueBeforeDecodeView.slice().buffer;
  }
  set valueBeforeDecode(value) {
    this.valueBeforeDecodeView = new Uint8Array(value);
  }
  toJSON() {
    return {
      blockName: this.constructor.NAME,
      blockLength: this.blockLength,
      error: this.error,
      warnings: this.warnings,
      valueBeforeDecode: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBeforeDecodeView)
    };
  }
}
LocalBaseBlock.NAME = "baseBlock";
class ValueBlock extends LocalBaseBlock {
  fromBER(inputBuffer, inputOffset, inputLength) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
  toBER(sizeOnly, writer) {
    throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
  }
}
ValueBlock.NAME = "valueBlock";
class LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {
  constructor({
    idBlock = {}
  } = {}) {
    var _a, _b, _c, _d;
    super();
    if (idBlock) {
      this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;
      this.valueHexView = idBlock.valueHex ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;
      this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
      this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
      this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
    } else {
      this.tagClass = -1;
      this.tagNumber = -1;
      this.isConstructed = false;
    }
  }
  toBER(sizeOnly = false) {
    let firstOctet = 0;
    switch (this.tagClass) {
      case 1:
        firstOctet |= 0x00;
        break;
      case 2:
        firstOctet |= 0x40;
        break;
      case 3:
        firstOctet |= 0x80;
        break;
      case 4:
        firstOctet |= 0xC0;
        break;
      default:
        this.error = "Unknown tag class";
        return EMPTY_BUFFER;
    }
    if (this.isConstructed) firstOctet |= 0x20;
    if (this.tagNumber < 31 && !this.isHexOnly) {
      const retView = new Uint8Array(1);
      if (!sizeOnly) {
        let number = this.tagNumber;
        number &= 0x1F;
        firstOctet |= number;
        retView[0] = firstOctet;
      }
      return retView.buffer;
    }
    if (!this.isHexOnly) {
      const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.tagNumber, 7);
      const encodedView = new Uint8Array(encodedBuf);
      const size = encodedBuf.byteLength;
      const retView = new Uint8Array(size + 1);
      retView[0] = firstOctet | 0x1F;
      if (!sizeOnly) {
        for (let i = 0; i < size - 1; i++) retView[i + 1] = encodedView[i] | 0x80;
        retView[size] = encodedView[size - 1];
      }
      return retView.buffer;
    }
    const retView = new Uint8Array(this.valueHexView.byteLength + 1);
    retView[0] = firstOctet | 0x1F;
    if (!sizeOnly) {
      const curView = this.valueHexView;
      for (let i = 0; i < curView.length - 1; i++) retView[i + 1] = curView[i] | 0x80;
      retView[this.valueHexView.byteLength] = curView[curView.length - 1];
    }
    return retView.buffer;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    const tagClassMask = intBuffer[0] & 0xC0;
    switch (tagClassMask) {
      case 0x00:
        this.tagClass = 1;
        break;
      case 0x40:
        this.tagClass = 2;
        break;
      case 0x80:
        this.tagClass = 3;
        break;
      case 0xC0:
        this.tagClass = 4;
        break;
      default:
        this.error = "Unknown tag class";
        return -1;
    }
    this.isConstructed = (intBuffer[0] & 0x20) === 0x20;
    this.isHexOnly = false;
    const tagNumberMask = intBuffer[0] & 0x1F;
    if (tagNumberMask !== 0x1F) {
      this.tagNumber = tagNumberMask;
      this.blockLength = 1;
    } else {
      let count = 1;
      let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
      let tagNumberBufferMaxLength = 255;
      while (intBuffer[count] & 0x80) {
        intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
        count++;
        if (count >= intBuffer.length) {
          this.error = "End of input reached before message was fully decoded";
          return -1;
        }
        if (count === tagNumberBufferMaxLength) {
          tagNumberBufferMaxLength += 255;
          const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);
          for (let i = 0; i < intTagNumberBuffer.length; i++) tempBufferView[i] = intTagNumberBuffer[i];
          intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
        }
      }
      this.blockLength = count + 1;
      intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
      const tempBufferView = new Uint8Array(count);
      for (let i = 0; i < count; i++) tempBufferView[i] = intTagNumberBuffer[i];
      intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
      intTagNumberBuffer.set(tempBufferView);
      if (this.blockLength <= 9) this.tagNumber = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(intTagNumberBuffer, 7);else {
        this.isHexOnly = true;
        this.warnings.push("Tag too long, represented as hex-coded");
      }
    }
    if (this.tagClass === 1 && this.isConstructed) {
      switch (this.tagNumber) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 9:
        case 13:
        case 14:
        case 23:
        case 24:
        case 31:
        case 32:
        case 33:
        case 34:
          this.error = "Constructed encoding used for primitive type";
          return -1;
      }
    }
    return inputOffset + this.blockLength;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      tagClass: this.tagClass,
      tagNumber: this.tagNumber,
      isConstructed: this.isConstructed
    };
  }
}
LocalIdentificationBlock.NAME = "identificationBlock";
class LocalLengthBlock extends LocalBaseBlock {
  constructor({
    lenBlock = {}
  } = {}) {
    var _a, _b, _c;
    super();
    this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;
    this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
    this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, view, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);
    if (intBuffer.length === 0) {
      this.error = "Zero buffer length";
      return -1;
    }
    if (intBuffer[0] === 0xFF) {
      this.error = "Length block 0xFF is reserved by standard";
      return -1;
    }
    this.isIndefiniteForm = intBuffer[0] === 0x80;
    if (this.isIndefiniteForm) {
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    this.longFormUsed = !!(intBuffer[0] & 0x80);
    if (this.longFormUsed === false) {
      this.length = intBuffer[0];
      this.blockLength = 1;
      return inputOffset + this.blockLength;
    }
    const count = intBuffer[0] & 0x7F;
    if (count > 8) {
      this.error = "Too big integer";
      return -1;
    }
    if (count + 1 > intBuffer.length) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    const lenOffset = inputOffset + 1;
    const lengthBufferView = view.subarray(lenOffset, lenOffset + count);
    if (lengthBufferView[count - 1] === 0x00) this.warnings.push("Needlessly long encoded length");
    this.length = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(lengthBufferView, 8);
    if (this.longFormUsed && this.length <= 127) this.warnings.push("Unnecessary usage of long length form");
    this.blockLength = count + 1;
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly = false) {
    let retBuf;
    let retView;
    if (this.length > 127) this.longFormUsed = true;
    if (this.isIndefiniteForm) {
      retBuf = new ArrayBuffer(1);
      if (sizeOnly === false) {
        retView = new Uint8Array(retBuf);
        retView[0] = 0x80;
      }
      return retBuf;
    }
    if (this.longFormUsed) {
      const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.length, 8);
      if (encodedBuf.byteLength > 127) {
        this.error = "Too big length";
        return EMPTY_BUFFER;
      }
      retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
      if (sizeOnly) return retBuf;
      const encodedView = new Uint8Array(encodedBuf);
      retView = new Uint8Array(retBuf);
      retView[0] = encodedBuf.byteLength | 0x80;
      for (let i = 0; i < encodedBuf.byteLength; i++) retView[i + 1] = encodedView[i];
      return retBuf;
    }
    retBuf = new ArrayBuffer(1);
    if (sizeOnly === false) {
      retView = new Uint8Array(retBuf);
      retView[0] = this.length;
    }
    return retBuf;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      longFormUsed: this.longFormUsed,
      length: this.length
    };
  }
}
LocalLengthBlock.NAME = "lengthBlock";
const typeStore = {};
class BaseBlock extends LocalBaseBlock {
  constructor({
    name = EMPTY_STRING,
    optional = false,
    primitiveSchema,
    ...parameters
  } = {}, valueBlockType) {
    super(parameters);
    this.name = name;
    this.optional = optional;
    if (primitiveSchema) {
      this.primitiveSchema = primitiveSchema;
    }
    this.idBlock = new LocalIdentificationBlock(parameters);
    this.lenBlock = new LocalLengthBlock(parameters);
    this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter();
    if (!writer) {
      prepareIndefiniteForm(this);
    }
    const idBlockBuf = this.idBlock.toBER(sizeOnly);
    _writer.write(idBlockBuf);
    if (this.lenBlock.isIndefiniteForm) {
      _writer.write(new Uint8Array([0x80]).buffer);
      this.valueBlock.toBER(sizeOnly, _writer);
      _writer.write(new ArrayBuffer(2));
    } else {
      const valueBlockBuf = this.valueBlock.toBER(sizeOnly);
      this.lenBlock.length = valueBlockBuf.byteLength;
      const lenBlockBuf = this.lenBlock.toBER(sizeOnly);
      _writer.write(lenBlockBuf);
      _writer.write(valueBlockBuf);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      idBlock: this.idBlock.toJSON(),
      lenBlock: this.lenBlock.toJSON(),
      valueBlock: this.valueBlock.toJSON(),
      name: this.name,
      optional: this.optional
    };
    if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();
    return object;
  }
  toString(encoding = "ascii") {
    if (encoding === "ascii") {
      return this.onAsciiEncoding();
    }
    return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.toBER());
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;
  }
  isEqual(other) {
    if (this === other) {
      return true;
    }
    if (!(other instanceof this.constructor)) {
      return false;
    }
    const thisRaw = this.toBER();
    const otherRaw = other.toBER();
    return pvutils__WEBPACK_IMPORTED_MODULE_1__.isEqualBuffer(thisRaw, otherRaw);
  }
}
BaseBlock.NAME = "BaseBlock";
function prepareIndefiniteForm(baseBlock) {
  if (baseBlock instanceof typeStore.Constructed) {
    for (const value of baseBlock.valueBlock.value) {
      if (prepareIndefiniteForm(value)) {
        baseBlock.lenBlock.isIndefiniteForm = true;
      }
    }
  }
  return !!baseBlock.lenBlock.isIndefiniteForm;
}
class BaseStringBlock extends BaseBlock {
  constructor({
    value = EMPTY_STRING,
    ...parameters
  } = {}, stringValueBlockType) {
    super(parameters, stringValueBlockType);
    if (value) {
      this.fromString(value);
    }
  }
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    this.fromBuffer(this.valueBlock.valueHexView);
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : '${this.valueBlock.value}'`;
  }
}
BaseStringBlock.NAME = "BaseStringBlock";
class LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {
  constructor({
    isHexOnly = true,
    ...parameters
  } = {}) {
    super(parameters);
    this.isHexOnly = isHexOnly;
  }
}
LocalPrimitiveValueBlock.NAME = "PrimitiveValueBlock";
var _a$w;
class Primitive extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalPrimitiveValueBlock);
    this.idBlock.isConstructed = false;
  }
}
_a$w = Primitive;
(() => {
  typeStore.Primitive = _a$w;
})();
Primitive.NAME = "PRIMITIVE";
function localChangeType(inputObject, newType) {
  if (inputObject instanceof newType) {
    return inputObject;
  }
  const newObject = new newType();
  newObject.idBlock = inputObject.idBlock;
  newObject.lenBlock = inputObject.lenBlock;
  newObject.warnings = inputObject.warnings;
  newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
  return newObject;
}
function localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {
  const incomingOffset = inputOffset;
  let returnObject = new BaseBlock({}, ValueBlock);
  const baseBlock = new LocalBaseBlock();
  if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {
    returnObject.error = baseBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);
  if (!intBuffer.length) {
    returnObject.error = "Zero buffer length";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.idBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.idBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.idBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.idBlock.blockLength;
  resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
  if (returnObject.lenBlock.warnings.length) {
    returnObject.warnings.concat(returnObject.lenBlock.warnings);
  }
  if (resultOffset === -1) {
    returnObject.error = returnObject.lenBlock.error;
    return {
      offset: -1,
      result: returnObject
    };
  }
  inputOffset = resultOffset;
  inputLength -= returnObject.lenBlock.blockLength;
  if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {
    returnObject.error = "Indefinite length form used for primitive encoding form";
    return {
      offset: -1,
      result: returnObject
    };
  }
  let newASN1Type = BaseBlock;
  switch (returnObject.idBlock.tagClass) {
    case 1:
      if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {
        returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
        return {
          offset: -1,
          result: returnObject
        };
      }
      switch (returnObject.idBlock.tagNumber) {
        case 0:
          if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {
            returnObject.error = "Type [UNIVERSAL 0] is reserved";
            return {
              offset: -1,
              result: returnObject
            };
          }
          newASN1Type = typeStore.EndOfContent;
          break;
        case 1:
          newASN1Type = typeStore.Boolean;
          break;
        case 2:
          newASN1Type = typeStore.Integer;
          break;
        case 3:
          newASN1Type = typeStore.BitString;
          break;
        case 4:
          newASN1Type = typeStore.OctetString;
          break;
        case 5:
          newASN1Type = typeStore.Null;
          break;
        case 6:
          newASN1Type = typeStore.ObjectIdentifier;
          break;
        case 10:
          newASN1Type = typeStore.Enumerated;
          break;
        case 12:
          newASN1Type = typeStore.Utf8String;
          break;
        case 13:
          newASN1Type = typeStore.RelativeObjectIdentifier;
          break;
        case 14:
          newASN1Type = typeStore.TIME;
          break;
        case 15:
          returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
          return {
            offset: -1,
            result: returnObject
          };
        case 16:
          newASN1Type = typeStore.Sequence;
          break;
        case 17:
          newASN1Type = typeStore.Set;
          break;
        case 18:
          newASN1Type = typeStore.NumericString;
          break;
        case 19:
          newASN1Type = typeStore.PrintableString;
          break;
        case 20:
          newASN1Type = typeStore.TeletexString;
          break;
        case 21:
          newASN1Type = typeStore.VideotexString;
          break;
        case 22:
          newASN1Type = typeStore.IA5String;
          break;
        case 23:
          newASN1Type = typeStore.UTCTime;
          break;
        case 24:
          newASN1Type = typeStore.GeneralizedTime;
          break;
        case 25:
          newASN1Type = typeStore.GraphicString;
          break;
        case 26:
          newASN1Type = typeStore.VisibleString;
          break;
        case 27:
          newASN1Type = typeStore.GeneralString;
          break;
        case 28:
          newASN1Type = typeStore.UniversalString;
          break;
        case 29:
          newASN1Type = typeStore.CharacterString;
          break;
        case 30:
          newASN1Type = typeStore.BmpString;
          break;
        case 31:
          newASN1Type = typeStore.DATE;
          break;
        case 32:
          newASN1Type = typeStore.TimeOfDay;
          break;
        case 33:
          newASN1Type = typeStore.DateTime;
          break;
        case 34:
          newASN1Type = typeStore.Duration;
          break;
        default:
          {
            const newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();
            newObject.idBlock = returnObject.idBlock;
            newObject.lenBlock = returnObject.lenBlock;
            newObject.warnings = returnObject.warnings;
            returnObject = newObject;
          }
      }
      break;
    case 2:
    case 3:
    case 4:
    default:
      {
        newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;
      }
  }
  returnObject = localChangeType(returnObject, newASN1Type);
  resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
  returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
  return {
    offset: resultOffset,
    result: returnObject
  };
}
function fromBER(inputBuffer) {
  if (!inputBuffer.byteLength) {
    const result = new BaseBlock({}, ValueBlock);
    result.error = "Input buffer has zero length";
    return {
      offset: -1,
      result
    };
  }
  return localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
}
function checkLen(indefiniteLength, length) {
  if (indefiniteLength) {
    return 1;
  }
  return length;
}
class LocalConstructedValueBlock extends ValueBlock {
  constructor({
    value = [],
    isIndefiniteForm = false,
    ...parameters
  } = {}) {
    super(parameters);
    this.value = value;
    this.isIndefiniteForm = isIndefiniteForm;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, view, inputOffset, inputLength)) {
      return -1;
    }
    this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);
    if (this.valueBeforeDecodeView.length === 0) {
      this.warnings.push("Zero buffer length");
      return inputOffset;
    }
    let currentOffset = inputOffset;
    while (checkLen(this.isIndefiniteForm, inputLength) > 0) {
      const returnObject = localFromBER(view, currentOffset, inputLength);
      if (returnObject.offset === -1) {
        this.error = returnObject.result.error;
        this.warnings.concat(returnObject.result.warnings);
        return -1;
      }
      currentOffset = returnObject.offset;
      this.blockLength += returnObject.result.blockLength;
      inputLength -= returnObject.result.blockLength;
      this.value.push(returnObject.result);
      if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {
        break;
      }
    }
    if (this.isIndefiniteForm) {
      if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {
        this.value.pop();
      } else {
        this.warnings.push("No EndOfContent block encoded");
      }
    }
    return currentOffset;
  }
  toBER(sizeOnly, writer) {
    const _writer = writer || new ViewWriter();
    for (let i = 0; i < this.value.length; i++) {
      this.value[i].toBER(sizeOnly, _writer);
    }
    if (!writer) {
      return _writer.final();
    }
    return EMPTY_BUFFER;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      isIndefiniteForm: this.isIndefiniteForm,
      value: []
    };
    for (const value of this.value) {
      object.value.push(value.toJSON());
    }
    return object;
  }
}
LocalConstructedValueBlock.NAME = "ConstructedValueBlock";
var _a$v;
class Constructed extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalConstructedValueBlock);
    this.idBlock.isConstructed = true;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);
    if (resultOffset === -1) {
      this.error = this.valueBlock.error;
      return resultOffset;
    }
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;
    return resultOffset;
  }
  onAsciiEncoding() {
    const values = [];
    for (const value of this.valueBlock.value) {
      values.push(value.toString("ascii").split("\n").map(o => `  ${o}`).join("\n"));
    }
    const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;
    return values.length ? `${blockName} :\n${values.join("\n")}` : `${blockName} :`;
  }
}
_a$v = Constructed;
(() => {
  typeStore.Constructed = _a$v;
})();
Constructed.NAME = "CONSTRUCTED";
class LocalEndOfContentValueBlock extends ValueBlock {
  fromBER(inputBuffer, inputOffset, inputLength) {
    return inputOffset;
  }
  toBER(sizeOnly) {
    return EMPTY_BUFFER;
  }
}
LocalEndOfContentValueBlock.override = "EndOfContentValueBlock";
var _a$u;
class EndOfContent extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalEndOfContentValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 0;
  }
}
_a$u = EndOfContent;
(() => {
  typeStore.EndOfContent = _a$u;
})();
EndOfContent.NAME = END_OF_CONTENT_NAME;
var _a$t;
class Null extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, ValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 5;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (this.lenBlock.length > 0) this.warnings.push("Non-zero length of value block for Null type");
    if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;
    if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;
    this.blockLength += inputLength;
    if (inputOffset + inputLength > inputBuffer.byteLength) {
      this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
      return -1;
    }
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    const retBuf = new ArrayBuffer(2);
    if (!sizeOnly) {
      const retView = new Uint8Array(retBuf);
      retView[0] = 0x05;
      retView[1] = 0x00;
    }
    if (writer) {
      writer.write(retBuf);
    }
    return retBuf;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME}`;
  }
}
_a$t = Null;
(() => {
  typeStore.Null = _a$t;
})();
Null.NAME = "NULL";
class LocalBooleanValueBlock extends HexBlock(ValueBlock) {
  constructor({
    value,
    ...parameters
  } = {}) {
    super(parameters);
    if (parameters.valueHex) {
      this.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(parameters.valueHex);
    } else {
      this.valueHexView = new Uint8Array(1);
    }
    if (value) {
      this.value = value;
    }
  }
  get value() {
    for (const octet of this.valueHexView) {
      if (octet > 0) {
        return true;
      }
    }
    return false;
  }
  set value(value) {
    this.valueHexView[0] = value ? 0xFF : 0x00;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
    if (inputLength > 1) this.warnings.push("Boolean value encoded in more then 1 octet");
    this.isHexOnly = true;
    pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);
    this.blockLength = inputLength;
    return inputOffset + inputLength;
  }
  toBER() {
    return this.valueHexView.slice();
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
}
LocalBooleanValueBlock.NAME = "BooleanValueBlock";
var _a$s;
class Boolean extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalBooleanValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 1;
  }
  getValue() {
    return this.valueBlock.value;
  }
  setValue(value) {
    this.valueBlock.value = value;
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.getValue}`;
  }
}
_a$s = Boolean;
(() => {
  typeStore.Boolean = _a$s;
})();
Boolean.NAME = "BOOLEAN";
class LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
  constructor({
    isConstructed = false,
    ...parameters
  } = {}) {
    super(parameters);
    this.isConstructed = isConstructed;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = 0;
    if (this.isConstructed) {
      this.isHexOnly = false;
      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (let i = 0; i < this.value.length; i++) {
        const currentBlockName = this.value[i].constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME) {
          if (this.isIndefiniteForm) break;else {
            this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== OCTET_STRING_NAME) {
          this.error = "OCTET STRING may consists of OCTET STRINGs only";
          return -1;
        }
      }
    } else {
      this.isHexOnly = true;
      resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
      this.blockLength = inputLength;
    }
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
    return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      isConstructed: this.isConstructed
    };
  }
}
LocalOctetStringValueBlock.NAME = "OctetStringValueBlock";
var _a$r;
class OctetString extends BaseBlock {
  constructor({
    idBlock = {},
    lenBlock = {},
    ...parameters
  } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalOctetStringValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 4;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    if (inputLength === 0) {
      if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;
      if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;
      return inputOffset;
    }
    if (!this.valueBlock.isConstructed) {
      const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
      const buf = view.subarray(inputOffset, inputOffset + inputLength);
      try {
        if (buf.byteLength) {
          const asn = localFromBER(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength) {
            this.valueBlock.value = [asn.result];
          }
        }
      } catch (e) {}
    }
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed.prototype.onAsciiEncoding.call(this);
    }
    return `${this.constructor.NAME} : ${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueHexView)}`;
  }
  getValue() {
    if (!this.idBlock.isConstructed) {
      return this.valueBlock.valueHexView.slice().buffer;
    }
    const array = [];
    for (const content of this.valueBlock.value) {
      if (content instanceof OctetString) {
        array.push(content.valueBlock.valueHexView);
      }
    }
    return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.concat(array);
  }
}
_a$r = OctetString;
(() => {
  typeStore.OctetString = _a$r;
})();
OctetString.NAME = OCTET_STRING_NAME;
class LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
  constructor({
    unusedBits = 0,
    isConstructed = false,
    ...parameters
  } = {}) {
    super(parameters);
    this.unusedBits = unusedBits;
    this.isConstructed = isConstructed;
    this.blockLength = this.valueHexView.byteLength;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    let resultOffset = -1;
    if (this.isConstructed) {
      resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
      if (resultOffset === -1) return resultOffset;
      for (const value of this.value) {
        const currentBlockName = value.constructor.NAME;
        if (currentBlockName === END_OF_CONTENT_NAME) {
          if (this.isIndefiniteForm) break;else {
            this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
            return -1;
          }
        }
        if (currentBlockName !== BIT_STRING_NAME) {
          this.error = "BIT STRING may consists of BIT STRINGs only";
          return -1;
        }
        const valueBlock = value.valueBlock;
        if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {
          this.error = "Using of \"unused bits\" inside constructive BIT STRING allowed for least one only";
          return -1;
        }
        this.unusedBits = valueBlock.unusedBits;
      }
      return resultOffset;
    }
    const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.unusedBits = intBuffer[0];
    if (this.unusedBits > 7) {
      this.error = "Unused bits for BitString must be in range 0-7";
      return -1;
    }
    if (!this.unusedBits) {
      const buf = intBuffer.subarray(1);
      try {
        if (buf.byteLength) {
          const asn = localFromBER(buf, 0, buf.byteLength);
          if (asn.offset !== -1 && asn.offset === inputLength - 1) {
            this.value = [asn.result];
          }
        }
      } catch (e) {}
    }
    this.valueHexView = intBuffer.subarray(1);
    this.blockLength = intBuffer.length;
    return inputOffset + inputLength;
  }
  toBER(sizeOnly, writer) {
    if (this.isConstructed) {
      return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
    }
    if (sizeOnly) {
      return new ArrayBuffer(this.valueHexView.byteLength + 1);
    }
    if (!this.valueHexView.byteLength) {
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(this.valueHexView.length + 1);
    retView[0] = this.unusedBits;
    retView.set(this.valueHexView, 1);
    return retView.buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      unusedBits: this.unusedBits,
      isConstructed: this.isConstructed
    };
  }
}
LocalBitStringValueBlock.NAME = "BitStringValueBlock";
var _a$q;
class BitString extends BaseBlock {
  constructor({
    idBlock = {},
    lenBlock = {},
    ...parameters
  } = {}) {
    var _b, _c;
    (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);
    super({
      idBlock: {
        isConstructed: parameters.isConstructed,
        ...idBlock
      },
      lenBlock: {
        ...lenBlock,
        isIndefiniteForm: !!parameters.isIndefiniteForm
      },
      ...parameters
    }, LocalBitStringValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 3;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    this.valueBlock.isConstructed = this.idBlock.isConstructed;
    this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
    return super.fromBER(inputBuffer, inputOffset, inputLength);
  }
  onAsciiEncoding() {
    if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {
      return Constructed.prototype.onAsciiEncoding.call(this);
    } else {
      const bits = [];
      const valueHex = this.valueBlock.valueHexView;
      for (const byte of valueHex) {
        bits.push(byte.toString(2).padStart(8, "0"));
      }
      const bitsStr = bits.join("");
      return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;
    }
  }
}
_a$q = BitString;
(() => {
  typeStore.BitString = _a$q;
})();
BitString.NAME = BIT_STRING_NAME;
var _a$p;
function viewAdd(first, second) {
  const c = new Uint8Array([0]);
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  let firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value = 0;
  const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;
  let counter = 0;
  for (let i = max; i >= 0; i--, counter++) {
    switch (true) {
      case counter < secondViewCopy.length:
        value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
        break;
      default:
        value = firstViewCopy[firstViewCopyLength - counter] + c[0];
    }
    c[0] = value / 10;
    switch (true) {
      case counter >= firstViewCopy.length:
        firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);
        break;
      default:
        firstViewCopy[firstViewCopyLength - counter] = value % 10;
    }
  }
  if (c[0] > 0) firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, firstViewCopy);
  return firstViewCopy;
}
function power2(n) {
  if (n >= powers2.length) {
    for (let p = powers2.length; p <= n; p++) {
      const c = new Uint8Array([0]);
      let digits = powers2[p - 1].slice(0);
      for (let i = digits.length - 1; i >= 0; i--) {
        const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);
        c[0] = newValue[0] / 10;
        digits[i] = newValue[0] % 10;
      }
      if (c[0] > 0) digits = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, digits);
      powers2.push(digits);
    }
  }
  return powers2[n];
}
function viewSub(first, second) {
  let b = 0;
  const firstView = new Uint8Array(first);
  const secondView = new Uint8Array(second);
  const firstViewCopy = firstView.slice(0);
  const firstViewCopyLength = firstViewCopy.length - 1;
  const secondViewCopy = secondView.slice(0);
  const secondViewCopyLength = secondViewCopy.length - 1;
  let value;
  let counter = 0;
  for (let i = secondViewCopyLength; i >= 0; i--, counter++) {
    value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
    switch (true) {
      case value < 0:
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
        break;
      default:
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
    }
  }
  if (b > 0) {
    for (let i = firstViewCopyLength - secondViewCopyLength + 1; i >= 0; i--, counter++) {
      value = firstViewCopy[firstViewCopyLength - counter] - b;
      if (value < 0) {
        b = 1;
        firstViewCopy[firstViewCopyLength - counter] = value + 10;
      } else {
        b = 0;
        firstViewCopy[firstViewCopyLength - counter] = value;
        break;
      }
    }
  }
  return firstViewCopy.slice();
}
class LocalIntegerValueBlock extends HexBlock(ValueBlock) {
  constructor({
    value,
    ...parameters
  } = {}) {
    super(parameters);
    this._valueDec = 0;
    if (parameters.valueHex) {
      this.setValueHex();
    }
    if (value !== undefined) {
      this.valueDec = value;
    }
  }
  setValueHex() {
    if (this.valueHexView.length >= 4) {
      this.warnings.push("Too big Integer for decoding, hex only");
      this.isHexOnly = true;
      this._valueDec = 0;
    } else {
      this.isHexOnly = false;
      if (this.valueHexView.length > 0) {
        this._valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);
      }
    }
  }
  set valueDec(v) {
    this._valueDec = v;
    this.isHexOnly = false;
    this.valueHexView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_1__.utilEncodeTC(v));
  }
  get valueDec() {
    return this._valueDec;
  }
  fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {
    const offset = this.fromBER(inputBuffer, inputOffset, inputLength);
    if (offset === -1) return offset;
    const view = this.valueHexView;
    if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {
      this.valueHexView = view.subarray(1);
    } else {
      if (expectedLength !== 0) {
        if (view.length < expectedLength) {
          if (expectedLength - view.length > 1) expectedLength = view.length + 1;
          this.valueHexView = view.subarray(expectedLength - view.length);
        }
      }
    }
    return offset;
  }
  toDER(sizeOnly = false) {
    const view = this.valueHexView;
    switch (true) {
      case (view[0] & 0x80) !== 0:
        {
          const updatedView = new Uint8Array(this.valueHexView.length + 1);
          updatedView[0] = 0x00;
          updatedView.set(view, 1);
          this.valueHexView = updatedView;
        }
        break;
      case view[0] === 0x00 && (view[1] & 0x80) === 0:
        {
          this.valueHexView = this.valueHexView.subarray(1);
        }
        break;
    }
    return this.toBER(sizeOnly);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
    if (resultOffset === -1) {
      return resultOffset;
    }
    this.setValueHex();
    return resultOffset;
  }
  toBER(sizeOnly) {
    return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
  toString() {
    const firstBit = this.valueHexView.length * 8 - 1;
    let digits = new Uint8Array(this.valueHexView.length * 8 / 3);
    let bitNumber = 0;
    let currentByte;
    const asn1View = this.valueHexView;
    let result = "";
    let flag = false;
    for (let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--) {
      currentByte = asn1View[byteNumber];
      for (let i = 0; i < 8; i++) {
        if ((currentByte & 1) === 1) {
          switch (bitNumber) {
            case firstBit:
              digits = viewSub(power2(bitNumber), digits);
              result = "-";
              break;
            default:
              digits = viewAdd(digits, power2(bitNumber));
          }
        }
        bitNumber++;
        currentByte >>= 1;
      }
    }
    for (let i = 0; i < digits.length; i++) {
      if (digits[i]) flag = true;
      if (flag) result += digitsString.charAt(digits[i]);
    }
    if (flag === false) result += digitsString.charAt(0);
    return result;
  }
}
_a$p = LocalIntegerValueBlock;
LocalIntegerValueBlock.NAME = "IntegerValueBlock";
(() => {
  Object.defineProperty(_a$p.prototype, "valueHex", {
    set: function (v) {
      this.valueHexView = new Uint8Array(v);
      this.setValueHex();
    },
    get: function () {
      return this.valueHexView.slice().buffer;
    }
  });
})();
var _a$o;
class Integer extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalIntegerValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 2;
  }
  toBigInt() {
    assertBigInt();
    return BigInt(this.valueBlock.toString());
  }
  static fromBigInt(value) {
    assertBigInt();
    const bigIntValue = BigInt(value);
    const writer = new ViewWriter();
    const hex = bigIntValue.toString(16).replace(/^-/, "");
    const view = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(hex));
    if (bigIntValue < 0) {
      const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));
      first[0] |= 0x80;
      const firstInt = BigInt(`0x${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(first)}`);
      const secondInt = firstInt + bigIntValue;
      const second = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(secondInt.toString(16)));
      second[0] |= 0x80;
      writer.write(second);
    } else {
      if (view[0] & 0x80) {
        writer.write(new Uint8Array([0]));
      }
      writer.write(view);
    }
    const res = new Integer({
      valueHex: writer.final()
    });
    return res;
  }
  convertToDER() {
    const integer = new Integer({
      valueHex: this.valueBlock.valueHexView
    });
    integer.valueBlock.toDER();
    return integer;
  }
  convertFromDER() {
    return new Integer({
      valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView
    });
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;
  }
}
_a$o = Integer;
(() => {
  typeStore.Integer = _a$o;
})();
Integer.NAME = "INTEGER";
var _a$n;
class Enumerated extends Integer {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 10;
  }
}
_a$n = Enumerated;
(() => {
  typeStore.Enumerated = _a$n;
})();
Enumerated.NAME = "ENUMERATED";
class LocalSidValueBlock extends HexBlock(ValueBlock) {
  constructor({
    valueDec = -1,
    isFirstSid = false,
    ...parameters
  } = {}) {
    super(parameters);
    this.valueDec = valueDec;
    this.isFirstSid = isFirstSid;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (!inputLength) {
      return inputOffset;
    }
    const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
      return -1;
    }
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i = 0; i < inputLength; i++) {
      this.valueHexView[i] = intBuffer[i] & 0x7F;
      this.blockLength++;
      if ((intBuffer[i] & 0x80) === 0x00) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i = 0; i < this.blockLength; i++) {
      tempView[i] = this.valueHexView[i];
    }
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0x00) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  set valueBigInt(value) {
    assertBigInt();
    let bits = BigInt(value).toString(2);
    while (bits.length % 7) {
      bits = "0" + bits;
    }
    const bytes = new Uint8Array(bits.length / 7);
    for (let i = 0; i < bytes.length; i++) {
      bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);
    }
    this.fromBER(bytes.buffer, 0, bytes.length);
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView = new Uint8Array(this.blockLength);
      for (let i = 0; i < this.blockLength - 1; i++) retView[i] = curView[i] | 0x80;
      retView[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView.buffer;
    }
    const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i = 0; i < len; i++) retView[i] = encodedView[i] | 0x80;
      retView[len] = encodedView[len];
    }
    return retView;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);else {
      if (this.isFirstSid) {
        let sidValue = this.valueDec;
        if (this.valueDec <= 39) result = "0.";else {
          if (this.valueDec <= 79) {
            result = "1.";
            sidValue -= 40;
          } else {
            result = "2.";
            sidValue -= 80;
          }
        }
        result += sidValue.toString();
      } else result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec,
      isFirstSid: this.isFirstSid
    };
  }
}
LocalSidValueBlock.NAME = "sidBlock";
class LocalObjectIdentifierValueBlock extends ValueBlock {
  constructor({
    value = EMPTY_STRING,
    ...parameters
  } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalSidValueBlock();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      if (this.value.length === 0) sidBlock.isFirstSid = true;
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly) {
    const retBuffers = [];
    for (let i = 0; i < this.value.length; i++) {
      const valueBuf = this.value[i].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i].error;
        return EMPTY_BUFFER;
      }
      retBuffers.push(valueBuf);
    }
    return concat(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    let flag = false;
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      if (flag) {
        const sidBlock = this.value[0];
        let plus = 0;
        switch (sidBlock.valueDec) {
          case 0:
            break;
          case 1:
            plus = 40;
            break;
          case 2:
            plus = 80;
            break;
          default:
            this.value = [];
            return;
        }
        const parsedSID = parseInt(sid, 10);
        if (isNaN(parsedSID)) return;
        sidBlock.valueDec = parsedSID + plus;
        flag = false;
      } else {
        const sidBlock = new LocalSidValueBlock();
        if (sid > Number.MAX_SAFE_INTEGER) {
          assertBigInt();
          const sidValue = BigInt(sid);
          sidBlock.valueBigInt = sidValue;
        } else {
          sidBlock.valueDec = parseInt(sid, 10);
          if (isNaN(sidBlock.valueDec)) return;
        }
        if (!this.value.length) {
          sidBlock.isFirstSid = true;
          flag = true;
        }
        this.value.push(sidBlock);
      }
    } while (pos2 !== -1);
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i = 0; i < this.value.length; i++) {
      isHexOnly = this.value[i].isHexOnly;
      let sidStr = this.value[i].toString();
      if (i !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        if (this.value[i].isFirstSid) result = `2.{${sidStr} - 80}`;else result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i = 0; i < this.value.length; i++) {
      object.sidArray.push(this.value[i].toJSON());
    }
    return object;
  }
}
LocalObjectIdentifierValueBlock.NAME = "ObjectIdentifierValueBlock";
var _a$m;
class ObjectIdentifier extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalObjectIdentifierValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 6;
  }
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
}
_a$m = ObjectIdentifier;
(() => {
  typeStore.ObjectIdentifier = _a$m;
})();
ObjectIdentifier.NAME = "OBJECT IDENTIFIER";
class LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {
  constructor({
    valueDec = 0,
    ...parameters
  } = {}) {
    super(parameters);
    this.valueDec = valueDec;
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    if (inputLength === 0) return inputOffset;
    const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    if (!checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;
    const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
    this.valueHexView = new Uint8Array(inputLength);
    for (let i = 0; i < inputLength; i++) {
      this.valueHexView[i] = intBuffer[i] & 0x7F;
      this.blockLength++;
      if ((intBuffer[i] & 0x80) === 0x00) break;
    }
    const tempView = new Uint8Array(this.blockLength);
    for (let i = 0; i < this.blockLength; i++) tempView[i] = this.valueHexView[i];
    this.valueHexView = tempView;
    if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
      this.error = "End of input reached before message was fully decoded";
      return -1;
    }
    if (this.valueHexView[0] === 0x00) this.warnings.push("Needlessly long format of SID encoding");
    if (this.blockLength <= 8) this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);else {
      this.isHexOnly = true;
      this.warnings.push("Too big SID for decoding, hex only");
    }
    return inputOffset + this.blockLength;
  }
  toBER(sizeOnly) {
    if (this.isHexOnly) {
      if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);
      const curView = this.valueHexView;
      const retView = new Uint8Array(this.blockLength);
      for (let i = 0; i < this.blockLength - 1; i++) retView[i] = curView[i] | 0x80;
      retView[this.blockLength - 1] = curView[this.blockLength - 1];
      return retView.buffer;
    }
    const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);
    if (encodedBuf.byteLength === 0) {
      this.error = "Error during encoding SID value";
      return EMPTY_BUFFER;
    }
    const retView = new Uint8Array(encodedBuf.byteLength);
    if (!sizeOnly) {
      const encodedView = new Uint8Array(encodedBuf);
      const len = encodedBuf.byteLength - 1;
      for (let i = 0; i < len; i++) retView[i] = encodedView[i] | 0x80;
      retView[len] = encodedView[len];
    }
    return retView.buffer;
  }
  toString() {
    let result = "";
    if (this.isHexOnly) result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);else {
      result = this.valueDec.toString();
    }
    return result;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      valueDec: this.valueDec
    };
  }
}
LocalRelativeSidValueBlock.NAME = "relativeSidBlock";
class LocalRelativeObjectIdentifierValueBlock extends ValueBlock {
  constructor({
    value = EMPTY_STRING,
    ...parameters
  } = {}) {
    super(parameters);
    this.value = [];
    if (value) {
      this.fromString(value);
    }
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    let resultOffset = inputOffset;
    while (inputLength > 0) {
      const sidBlock = new LocalRelativeSidValueBlock();
      resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
      if (resultOffset === -1) {
        this.blockLength = 0;
        this.error = sidBlock.error;
        return resultOffset;
      }
      this.blockLength += sidBlock.blockLength;
      inputLength -= sidBlock.blockLength;
      this.value.push(sidBlock);
    }
    return resultOffset;
  }
  toBER(sizeOnly, writer) {
    const retBuffers = [];
    for (let i = 0; i < this.value.length; i++) {
      const valueBuf = this.value[i].toBER(sizeOnly);
      if (valueBuf.byteLength === 0) {
        this.error = this.value[i].error;
        return EMPTY_BUFFER;
      }
      retBuffers.push(valueBuf);
    }
    return concat(retBuffers);
  }
  fromString(string) {
    this.value = [];
    let pos1 = 0;
    let pos2 = 0;
    let sid = "";
    do {
      pos2 = string.indexOf(".", pos1);
      if (pos2 === -1) sid = string.substring(pos1);else sid = string.substring(pos1, pos2);
      pos1 = pos2 + 1;
      const sidBlock = new LocalRelativeSidValueBlock();
      sidBlock.valueDec = parseInt(sid, 10);
      if (isNaN(sidBlock.valueDec)) return true;
      this.value.push(sidBlock);
    } while (pos2 !== -1);
    return true;
  }
  toString() {
    let result = "";
    let isHexOnly = false;
    for (let i = 0; i < this.value.length; i++) {
      isHexOnly = this.value[i].isHexOnly;
      let sidStr = this.value[i].toString();
      if (i !== 0) result = `${result}.`;
      if (isHexOnly) {
        sidStr = `{${sidStr}}`;
        result += sidStr;
      } else result += sidStr;
    }
    return result;
  }
  toJSON() {
    const object = {
      ...super.toJSON(),
      value: this.toString(),
      sidArray: []
    };
    for (let i = 0; i < this.value.length; i++) object.sidArray.push(this.value[i].toJSON());
    return object;
  }
}
LocalRelativeObjectIdentifierValueBlock.NAME = "RelativeObjectIdentifierValueBlock";
var _a$l;
class RelativeObjectIdentifier extends BaseBlock {
  constructor(parameters = {}) {
    super(parameters, LocalRelativeObjectIdentifierValueBlock);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 13;
  }
  getValue() {
    return this.valueBlock.toString();
  }
  setValue(value) {
    this.valueBlock.fromString(value);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.getValue()
    };
  }
}
_a$l = RelativeObjectIdentifier;
(() => {
  typeStore.RelativeObjectIdentifier = _a$l;
})();
RelativeObjectIdentifier.NAME = "RelativeObjectIdentifier";
var _a$k;
class Sequence extends Constructed {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 16;
  }
}
_a$k = Sequence;
(() => {
  typeStore.Sequence = _a$k;
})();
Sequence.NAME = "SEQUENCE";
var _a$j;
class Set extends Constructed {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 17;
  }
}
_a$j = Set;
(() => {
  typeStore.Set = _a$j;
})();
Set.NAME = "SET";
class LocalStringValueBlock extends HexBlock(ValueBlock) {
  constructor({
    ...parameters
  } = {}) {
    super(parameters);
    this.isHexOnly = true;
    this.value = EMPTY_STRING;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      value: this.value
    };
  }
}
LocalStringValueBlock.NAME = "StringValueBlock";
class LocalSimpleStringValueBlock extends LocalStringValueBlock {}
LocalSimpleStringValueBlock.NAME = "SimpleStringValueBlock";
class LocalSimpleStringBlock extends BaseStringBlock {
  constructor({
    ...parameters
  } = {}) {
    super(parameters, LocalSimpleStringValueBlock);
  }
  fromBuffer(inputBuffer) {
    this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));
  }
  fromString(inputString) {
    const strLen = inputString.length;
    const view = this.valueBlock.valueHexView = new Uint8Array(strLen);
    for (let i = 0; i < strLen; i++) view[i] = inputString.charCodeAt(i);
    this.valueBlock.value = inputString;
  }
}
LocalSimpleStringBlock.NAME = "SIMPLE STRING";
class LocalUtf8StringValueBlock extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
    try {
      this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf8String(inputBuffer);
    } catch (ex) {
      this.warnings.push(`Error during "decodeURIComponent": ${ex}, using raw string`);
      this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBinary(inputBuffer);
    }
  }
  fromString(inputString) {
    this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf8String(inputString));
    this.valueBlock.value = inputString;
  }
}
LocalUtf8StringValueBlock.NAME = "Utf8StringValueBlock";
var _a$i;
class Utf8String extends LocalUtf8StringValueBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 12;
  }
}
_a$i = Utf8String;
(() => {
  typeStore.Utf8String = _a$i;
})();
Utf8String.NAME = "UTF8String";
class LocalBmpStringValueBlock extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf16String(inputBuffer);
    this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);
  }
  fromString(inputString) {
    this.valueBlock.value = inputString;
    this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf16String(inputString));
  }
}
LocalBmpStringValueBlock.NAME = "BmpStringValueBlock";
var _a$h;
class BmpString extends LocalBmpStringValueBlock {
  constructor({
    ...parameters
  } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 30;
  }
}
_a$h = BmpString;
(() => {
  typeStore.BmpString = _a$h;
})();
BmpString.NAME = "BMPString";
class LocalUniversalStringValueBlock extends LocalSimpleStringBlock {
  fromBuffer(inputBuffer) {
    const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
    const valueView = new Uint8Array(copyBuffer);
    for (let i = 0; i < valueView.length; i += 4) {
      valueView[i] = valueView[i + 3];
      valueView[i + 1] = valueView[i + 2];
      valueView[i + 2] = 0x00;
      valueView[i + 3] = 0x00;
    }
    this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
  }
  fromString(inputString) {
    const strLength = inputString.length;
    const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);
    for (let i = 0; i < strLength; i++) {
      const codeBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(inputString.charCodeAt(i), 8);
      const codeView = new Uint8Array(codeBuf);
      if (codeView.length > 4) continue;
      const dif = 4 - codeView.length;
      for (let j = codeView.length - 1; j >= 0; j--) valueHexView[i * 4 + j + dif] = codeView[j];
    }
    this.valueBlock.value = inputString;
  }
}
LocalUniversalStringValueBlock.NAME = "UniversalStringValueBlock";
var _a$g;
class UniversalString extends LocalUniversalStringValueBlock {
  constructor({
    ...parameters
  } = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 28;
  }
}
_a$g = UniversalString;
(() => {
  typeStore.UniversalString = _a$g;
})();
UniversalString.NAME = "UniversalString";
var _a$f;
class NumericString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 18;
  }
}
_a$f = NumericString;
(() => {
  typeStore.NumericString = _a$f;
})();
NumericString.NAME = "NumericString";
var _a$e;
class PrintableString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 19;
  }
}
_a$e = PrintableString;
(() => {
  typeStore.PrintableString = _a$e;
})();
PrintableString.NAME = "PrintableString";
var _a$d;
class TeletexString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 20;
  }
}
_a$d = TeletexString;
(() => {
  typeStore.TeletexString = _a$d;
})();
TeletexString.NAME = "TeletexString";
var _a$c;
class VideotexString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 21;
  }
}
_a$c = VideotexString;
(() => {
  typeStore.VideotexString = _a$c;
})();
VideotexString.NAME = "VideotexString";
var _a$b;
class IA5String extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 22;
  }
}
_a$b = IA5String;
(() => {
  typeStore.IA5String = _a$b;
})();
IA5String.NAME = "IA5String";
var _a$a;
class GraphicString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 25;
  }
}
_a$a = GraphicString;
(() => {
  typeStore.GraphicString = _a$a;
})();
GraphicString.NAME = "GraphicString";
var _a$9;
class VisibleString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 26;
  }
}
_a$9 = VisibleString;
(() => {
  typeStore.VisibleString = _a$9;
})();
VisibleString.NAME = "VisibleString";
var _a$8;
class GeneralString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 27;
  }
}
_a$8 = GeneralString;
(() => {
  typeStore.GeneralString = _a$8;
})();
GeneralString.NAME = "GeneralString";
var _a$7;
class CharacterString extends LocalSimpleStringBlock {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 29;
  }
}
_a$7 = CharacterString;
(() => {
  typeStore.CharacterString = _a$7;
})();
CharacterString.NAME = "CharacterString";
var _a$6;
class UTCTime extends VisibleString {
  constructor({
    value,
    valueDate,
    ...parameters
  } = {}) {
    super(parameters);
    this.year = 0;
    this.month = 0;
    this.day = 0;
    this.hour = 0;
    this.minute = 0;
    this.second = 0;
    if (value) {
      this.fromString(value);
      this.valueBlock.valueHexView = new Uint8Array(value.length);
      for (let i = 0; i < value.length; i++) this.valueBlock.valueHexView[i] = value.charCodeAt(i);
    }
    if (valueDate) {
      this.fromDate(valueDate);
      this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());
    }
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 23;
  }
  fromBuffer(inputBuffer) {
    this.fromString(String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer)));
  }
  toBuffer() {
    const str = this.toString();
    const buffer = new ArrayBuffer(str.length);
    const view = new Uint8Array(buffer);
    for (let i = 0; i < str.length; i++) view[i] = str.charCodeAt(i);
    return buffer;
  }
  fromDate(inputDate) {
    this.year = inputDate.getUTCFullYear();
    this.month = inputDate.getUTCMonth() + 1;
    this.day = inputDate.getUTCDate();
    this.hour = inputDate.getUTCHours();
    this.minute = inputDate.getUTCMinutes();
    this.second = inputDate.getUTCSeconds();
  }
  toDate() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
  }
  fromString(inputString) {
    const parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
    const parserArray = parser.exec(inputString);
    if (parserArray === null) {
      this.error = "Wrong input string for conversion";
      return;
    }
    const year = parseInt(parserArray[1], 10);
    if (year >= 50) this.year = 1900 + year;else this.year = 2000 + year;
    this.month = parseInt(parserArray[2], 10);
    this.day = parseInt(parserArray[3], 10);
    this.hour = parseInt(parserArray[4], 10);
    this.minute = parseInt(parserArray[5], 10);
    this.second = parseInt(parserArray[6], 10);
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = new Array(7);
      outputArray[0] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);
      outputArray[1] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2);
      outputArray[2] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2);
      outputArray[3] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2);
      outputArray[4] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2);
      outputArray[5] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2);
      outputArray[6] = "Z";
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  onAsciiEncoding() {
    return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      year: this.year,
      month: this.month,
      day: this.day,
      hour: this.hour,
      minute: this.minute,
      second: this.second
    };
  }
}
_a$6 = UTCTime;
(() => {
  typeStore.UTCTime = _a$6;
})();
UTCTime.NAME = "UTCTime";
var _a$5;
class GeneralizedTime extends UTCTime {
  constructor(parameters = {}) {
    var _b;
    super(parameters);
    (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 24;
  }
  fromDate(inputDate) {
    super.fromDate(inputDate);
    this.millisecond = inputDate.getUTCMilliseconds();
  }
  toDate() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
  }
  fromString(inputString) {
    let isUTC = false;
    let timeString = "";
    let dateTimeString = "";
    let fractionPart = 0;
    let parser;
    let hourDifference = 0;
    let minuteDifference = 0;
    if (inputString[inputString.length - 1] === "Z") {
      timeString = inputString.substring(0, inputString.length - 1);
      isUTC = true;
    } else {
      const number = new Number(inputString[inputString.length - 1]);
      if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
      timeString = inputString;
    }
    if (isUTC) {
      if (timeString.indexOf("+") !== -1) throw new Error("Wrong input string for conversion");
      if (timeString.indexOf("-") !== -1) throw new Error("Wrong input string for conversion");
    } else {
      let multiplier = 1;
      let differencePosition = timeString.indexOf("+");
      let differenceString = "";
      if (differencePosition === -1) {
        differencePosition = timeString.indexOf("-");
        multiplier = -1;
      }
      if (differencePosition !== -1) {
        differenceString = timeString.substring(differencePosition + 1);
        timeString = timeString.substring(0, differencePosition);
        if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error("Wrong input string for conversion");
        let number = parseInt(differenceString.substring(0, 2), 10);
        if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
        hourDifference = multiplier * number;
        if (differenceString.length === 4) {
          number = parseInt(differenceString.substring(2, 4), 10);
          if (isNaN(number.valueOf())) throw new Error("Wrong input string for conversion");
          minuteDifference = multiplier * number;
        }
      }
    }
    let fractionPointPosition = timeString.indexOf(".");
    if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(",");
    if (fractionPointPosition !== -1) {
      const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);
      if (isNaN(fractionPartCheck.valueOf())) throw new Error("Wrong input string for conversion");
      fractionPart = fractionPartCheck.valueOf();
      dateTimeString = timeString.substring(0, fractionPointPosition);
    } else dateTimeString = timeString;
    switch (true) {
      case dateTimeString.length === 8:
        parser = /(\d{4})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) throw new Error("Wrong input string for conversion");
        break;
      case dateTimeString.length === 10:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.minute = Math.floor(fractionResult);
          fractionResult = 60 * (fractionResult - this.minute);
          this.second = Math.floor(fractionResult);
          fractionResult = 1000 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 12:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          let fractionResult = 60 * fractionPart;
          this.second = Math.floor(fractionResult);
          fractionResult = 1000 * (fractionResult - this.second);
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      case dateTimeString.length === 14:
        parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
        if (fractionPointPosition !== -1) {
          const fractionResult = 1000 * fractionPart;
          this.millisecond = Math.floor(fractionResult);
        }
        break;
      default:
        throw new Error("Wrong input string for conversion");
    }
    const parserArray = parser.exec(dateTimeString);
    if (parserArray === null) throw new Error("Wrong input string for conversion");
    for (let j = 1; j < parserArray.length; j++) {
      switch (j) {
        case 1:
          this.year = parseInt(parserArray[j], 10);
          break;
        case 2:
          this.month = parseInt(parserArray[j], 10);
          break;
        case 3:
          this.day = parseInt(parserArray[j], 10);
          break;
        case 4:
          this.hour = parseInt(parserArray[j], 10) + hourDifference;
          break;
        case 5:
          this.minute = parseInt(parserArray[j], 10) + minuteDifference;
          break;
        case 6:
          this.second = parseInt(parserArray[j], 10);
          break;
        default:
          throw new Error("Wrong input string for conversion");
      }
    }
    if (isUTC === false) {
      const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
      this.year = tempDate.getUTCFullYear();
      this.month = tempDate.getUTCMonth();
      this.day = tempDate.getUTCDay();
      this.hour = tempDate.getUTCHours();
      this.minute = tempDate.getUTCMinutes();
      this.second = tempDate.getUTCSeconds();
      this.millisecond = tempDate.getUTCMilliseconds();
    }
  }
  toString(encoding = "iso") {
    if (encoding === "iso") {
      const outputArray = [];
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.year, 4));
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2));
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2));
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2));
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2));
      outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2));
      if (this.millisecond !== 0) {
        outputArray.push(".");
        outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.millisecond, 3));
      }
      outputArray.push("Z");
      return outputArray.join("");
    }
    return super.toString(encoding);
  }
  toJSON() {
    return {
      ...super.toJSON(),
      millisecond: this.millisecond
    };
  }
}
_a$5 = GeneralizedTime;
(() => {
  typeStore.GeneralizedTime = _a$5;
})();
GeneralizedTime.NAME = "GeneralizedTime";
var _a$4;
class DATE extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 31;
  }
}
_a$4 = DATE;
(() => {
  typeStore.DATE = _a$4;
})();
DATE.NAME = "DATE";
var _a$3;
class TimeOfDay extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 32;
  }
}
_a$3 = TimeOfDay;
(() => {
  typeStore.TimeOfDay = _a$3;
})();
TimeOfDay.NAME = "TimeOfDay";
var _a$2;
class DateTime extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 33;
  }
}
_a$2 = DateTime;
(() => {
  typeStore.DateTime = _a$2;
})();
DateTime.NAME = "DateTime";
var _a$1;
class Duration extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 34;
  }
}
_a$1 = Duration;
(() => {
  typeStore.Duration = _a$1;
})();
Duration.NAME = "Duration";
var _a;
class TIME extends Utf8String {
  constructor(parameters = {}) {
    super(parameters);
    this.idBlock.tagClass = 1;
    this.idBlock.tagNumber = 14;
  }
}
_a = TIME;
(() => {
  typeStore.TIME = _a;
})();
TIME.NAME = "TIME";
class Any {
  constructor({
    name = EMPTY_STRING,
    optional = false
  } = {}) {
    this.name = name;
    this.optional = optional;
  }
}
class Choice extends Any {
  constructor({
    value = [],
    ...parameters
  } = {}) {
    super(parameters);
    this.value = value;
  }
}
class Repeated extends Any {
  constructor({
    value = new Any(),
    local = false,
    ...parameters
  } = {}) {
    super(parameters);
    this.value = value;
    this.local = local;
  }
}
class RawData {
  constructor({
    data = EMPTY_VIEW
  } = {}) {
    this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);
  }
  get data() {
    return this.dataView.slice().buffer;
  }
  set data(value) {
    this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(value);
  }
  fromBER(inputBuffer, inputOffset, inputLength) {
    const endLength = inputOffset + inputLength;
    this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);
    return endLength;
  }
  toBER(sizeOnly) {
    return this.dataView.slice().buffer;
  }
}
function compareSchema(root, inputData, inputSchema) {
  if (inputSchema instanceof Choice) {
    for (let j = 0; j < inputSchema.value.length; j++) {
      const result = compareSchema(root, inputData, inputSchema.value[j]);
      if (result.verified) {
        return {
          verified: true,
          result: root
        };
      }
    }
    {
      const _result = {
        verified: false,
        result: {
          error: "Wrong values for Choice type"
        }
      };
      if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;
      return _result;
    }
  }
  if (inputSchema instanceof Any) {
    if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;
    return {
      verified: true,
      result: root
    };
  }
  if (root instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong root object"
      }
    };
  }
  if (inputData instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 data"
      }
    };
  }
  if (inputSchema instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (ID_BLOCK in inputSchema === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (FROM_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (TO_BER in inputSchema.idBlock === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  const encodedId = inputSchema.idBlock.toBER(false);
  if (encodedId.byteLength === 0) {
    return {
      verified: false,
      result: {
        error: "Error encoding idBlock for ASN.1 schema"
      }
    };
  }
  const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);
  if (decodedOffset === -1) {
    return {
      verified: false,
      result: {
        error: "Error decoding idBlock for ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
    return {
      verified: false,
      result: root
    };
  }
  if (!(IS_HEX_ONLY in inputSchema.idBlock)) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema"
      }
    };
  }
  if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
    return {
      verified: false,
      result: root
    };
  }
  if (inputSchema.idBlock.isHexOnly) {
    if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {
      return {
        verified: false,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
    }
    const schemaView = inputSchema.idBlock.valueHexView;
    const asn1View = inputData.idBlock.valueHexView;
    if (schemaView.length !== asn1View.length) {
      return {
        verified: false,
        result: root
      };
    }
    for (let i = 0; i < schemaView.length; i++) {
      if (schemaView[i] !== asn1View[1]) {
        return {
          verified: false,
          result: root
        };
      }
    }
  }
  if (inputSchema.name) {
    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
    if (inputSchema.name) root[inputSchema.name] = inputData;
  }
  if (inputSchema instanceof typeStore.Constructed) {
    let admission = 0;
    let result = {
      verified: false,
      result: {
        error: "Unknown error"
      }
    };
    let maxLength = inputSchema.valueBlock.value.length;
    if (maxLength > 0) {
      if (inputSchema.valueBlock.value[0] instanceof Repeated) {
        maxLength = inputData.valueBlock.value.length;
      }
    }
    if (maxLength === 0) {
      return {
        verified: true,
        result: root
      };
    }
    if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {
      let _optional = true;
      for (let i = 0; i < inputSchema.valueBlock.value.length; i++) _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);
      if (_optional) {
        return {
          verified: true,
          result: root
        };
      }
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) delete root[inputSchema.name];
      }
      root.error = "Inconsistent object length";
      return {
        verified: false,
        result: root
      };
    }
    for (let i = 0; i < maxLength; i++) {
      if (i - admission >= inputData.valueBlock.value.length) {
        if (inputSchema.valueBlock.value[i].optional === false) {
          const _result = {
            verified: false,
            result: root
          };
          root.error = "Inconsistent length between ASN.1 data and schema";
          if (inputSchema.name) {
            inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
            if (inputSchema.name) {
              delete root[inputSchema.name];
              _result.name = inputSchema.name;
            }
          }
          return _result;
        }
      } else {
        if (inputSchema.valueBlock.value[0] instanceof Repeated) {
          result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);
          if (result.verified === false) {
            if (inputSchema.valueBlock.value[0].optional) admission++;else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }
              return result;
            }
          }
          if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {
            let arrayRoot = {};
            if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;else arrayRoot = root;
            if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined") arrayRoot[inputSchema.valueBlock.value[0].name] = [];
            arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);
          }
        } else {
          result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);
          if (result.verified === false) {
            if (inputSchema.valueBlock.value[i].optional) admission++;else {
              if (inputSchema.name) {
                inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                if (inputSchema.name) delete root[inputSchema.name];
              }
              return result;
            }
          }
        }
      }
    }
    if (result.verified === false) {
      const _result = {
        verified: false,
        result: root
      };
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result.name = inputSchema.name;
        }
      }
      return _result;
    }
    return {
      verified: true,
      result: root
    };
  }
  if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {
    const asn1 = localFromBER(inputData.valueBlock.valueHexView);
    if (asn1.offset === -1) {
      const _result = {
        verified: false,
        result: asn1.result
      };
      if (inputSchema.name) {
        inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
        if (inputSchema.name) {
          delete root[inputSchema.name];
          _result.name = inputSchema.name;
        }
      }
      return _result;
    }
    return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
  }
  return {
    verified: true,
    result: root
  };
}
function verifySchema(inputBuffer, inputSchema) {
  if (inputSchema instanceof Object === false) {
    return {
      verified: false,
      result: {
        error: "Wrong ASN.1 schema type"
      }
    };
  }
  const asn1 = localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));
  if (asn1.offset === -1) {
    return {
      verified: false,
      result: asn1.result
    };
  }
  return compareSchema(asn1.result, asn1.result, inputSchema);
}


/***/ }),

/***/ 58565:
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/bit.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bitsToStringArray: () => (/* binding */ bitsToStringArray)
/* harmony export */ });
const bitsToStringArray = ["00000000", "00000001", "00000010", "00000011", "00000100", "00000101", "00000110", "00000111", "00001000", "00001001", "00001010", "00001011", "00001100", "00001101", "00001110", "00001111", "00010000", "00010001", "00010010", "00010011", "00010100", "00010101", "00010110", "00010111", "00011000", "00011001", "00011010", "00011011", "00011100", "00011101", "00011110", "00011111", "00100000", "00100001", "00100010", "00100011", "00100100", "00100101", "00100110", "00100111", "00101000", "00101001", "00101010", "00101011", "00101100", "00101101", "00101110", "00101111", "00110000", "00110001", "00110010", "00110011", "00110100", "00110101", "00110110", "00110111", "00111000", "00111001", "00111010", "00111011", "00111100", "00111101", "00111110", "00111111", "01000000", "01000001", "01000010", "01000011", "01000100", "01000101", "01000110", "01000111", "01001000", "01001001", "01001010", "01001011", "01001100", "01001101", "01001110", "01001111", "01010000", "01010001", "01010010", "01010011", "01010100", "01010101", "01010110", "01010111", "01011000", "01011001", "01011010", "01011011", "01011100", "01011101", "01011110", "01011111", "01100000", "01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010", "01111011", "01111100", "01111101", "01111110", "01111111", "10000000", "10000001", "10000010", "10000011", "10000100", "10000101", "10000110", "10000111", "10001000", "10001001", "10001010", "10001011", "10001100", "10001101", "10001110", "10001111", "10010000", "10010001", "10010010", "10010011", "10010100", "10010101", "10010110", "10010111", "10011000", "10011001", "10011010", "10011011", "10011100", "10011101", "10011110", "10011111", "10100000", "10100001", "10100010", "10100011", "10100100", "10100101", "10100110", "10100111", "10101000", "10101001", "10101010", "10101011", "10101100", "10101101", "10101110", "10101111", "10110000", "10110001", "10110010", "10110011", "10110100", "10110101", "10110110", "10110111", "10111000", "10111001", "10111010", "10111011", "10111100", "10111101", "10111110", "10111111", "11000000", "11000001", "11000010", "11000011", "11000100", "11000101", "11000110", "11000111", "11001000", "11001001", "11001010", "11001011", "11001100", "11001101", "11001110", "11001111", "11010000", "11010001", "11010010", "11010011", "11010100", "11010101", "11010110", "11010111", "11011000", "11011001", "11011010", "11011011", "11011100", "11011101", "11011110", "11011111", "11100000", "11100001", "11100010", "11100011", "11100100", "11100101", "11100110", "11100111", "11101000", "11101001", "11101010", "11101011", "11101100", "11101101", "11101110", "11101111", "11110000", "11110001", "11110010", "11110011", "11110100", "11110101", "11110110", "11110111", "11111000", "11111001", "11111010", "11111011", "11111100", "11111101", "11111110", "11111111"];

/***/ }),

/***/ 18860:
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/bit_stream.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BitStream: () => (/* binding */ BitStream)
/* harmony export */ });
/* harmony import */ var _bit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit */ 58565);
/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./byte_stream */ 34129);


class BitStream {
  constructor(parameters) {
    this.buffer = new ArrayBuffer(0);
    this.view = new Uint8Array(this.buffer);
    this.bitsCount = 0;
    if (parameters) {
      if ("byteStream" in parameters) {
        this.fromByteStream(parameters.byteStream);
      }
      if ("view" in parameters) {
        this.fromUint8Array(parameters.view);
      }
      if ("buffer" in parameters) {
        this.fromArrayBuffer(parameters.buffer);
      }
      if ("string" in parameters) {
        this.fromString(parameters.string);
      }
      if ("uint32" in parameters) {
        this.fromUint32(parameters.uint32);
      }
      if ("bitsCount" in parameters && parameters.bitsCount) {
        this.bitsCount = parameters.bitsCount;
      }
    }
  }
  clear() {
    this.buffer = new ArrayBuffer(0);
    this.view = new Uint8Array(this.buffer);
    this.bitsCount = 0;
  }
  fromByteStream(stream) {
    this.fromUint8Array(stream.view);
  }
  fromArrayBuffer(array) {
    this.buffer = array;
    this.view = new Uint8Array(array);
    this.bitsCount = this.view.length << 3;
  }
  fromUint8Array(array) {
    this.fromArrayBuffer(new Uint8Array(array).buffer);
  }
  fromString(string) {
    const stringLength = string.length;
    this.buffer = new ArrayBuffer((stringLength >> 3) + (stringLength % 8 ? 1 : 0));
    this.view = new Uint8Array(this.buffer);
    this.bitsCount = (stringLength >> 3) + 1 << 3;
    let byteIndex = 0;
    for (let i = 0; i < stringLength; i++) {
      if (string[i] == "1") this.view[byteIndex] |= 1 << 7 - i % 8;
      if (i && (i + 1) % 8 == 0) byteIndex++;
    }
    if (stringLength % 8) this.shiftRight(8 - stringLength % 8);
    this.bitsCount = stringLength;
  }
  fromUint32(uint32) {
    this.buffer = new ArrayBuffer(4);
    this.view = new Uint8Array(this.buffer);
    const value = new Uint32Array([uint32]);
    const view = new Uint8Array(value.buffer);
    for (let i = 3; i >= 0; i--) this.view[i] = view[3 - i];
    this.bitsCount = 32;
  }
  toString(start, length) {
    if (start == null) {
      start = 0;
    }
    if (start >= this.view.length || start < 0) {
      start = 0;
    }
    if (length == null) {
      length = this.view.length - start;
    }
    if (length >= this.view.length || length < 0) {
      length = this.view.length - start;
    }
    const result = [];
    for (let i = start; i < start + length; i++) {
      result.push(_bit__WEBPACK_IMPORTED_MODULE_0__.bitsToStringArray[this.view[i]]);
    }
    return result.join("").substring((this.view.length << 3) - this.bitsCount);
  }
  shiftRight(shift, needShrink = true) {
    if (this.view.length == 0) {
      return;
    }
    if (shift < 0 || shift > 8) {
      throw new Error("The \"shift\" parameter must be in range 0-8");
    }
    if (shift > this.bitsCount) {
      throw new Error("The \"shift\" parameter can not be bigger than \"this.bitsCount\"");
    }
    const shiftMask = 0xFF >> 8 - shift;
    this.view[this.view.length - 1] >>= shift;
    for (let i = this.view.length - 2; i >= 0; i--) {
      this.view[i + 1] |= (this.view[i] & shiftMask) << 8 - shift;
      this.view[i] >>= shift;
    }
    this.bitsCount -= shift;
    if (this.bitsCount == 0) {
      this.clear();
    }
    if (needShrink) {
      this.shrink();
    }
  }
  shiftLeft(shift) {
    if (this.view.length == 0) {
      return;
    }
    if (shift < 0 || shift > 8) {
      throw new Error("The \"shift\" parameter must be in range 0-8");
    }
    if (shift > this.bitsCount) {
      throw new Error("The \"shift\" parameter can not be bigger than \"this.bitsCount\"");
    }
    const bitsOffset = this.bitsCount & 0x07;
    if (bitsOffset > shift) {
      this.view[0] &= 0xFF >> bitsOffset + shift;
    } else {
      const view = this.view.slice(1);
      view[0] &= 0xFF >> shift - bitsOffset;
      this.buffer = view.buffer;
      this.view = view;
    }
    this.bitsCount -= shift;
    if (this.bitsCount == 0) {
      this.clear();
    }
  }
  slice(start = 0, end = 0) {
    let valueShift = 0;
    if (this.bitsCount % 8) {
      valueShift = 8 - this.bitsCount % 8;
    }
    start += valueShift;
    end += valueShift;
    const maxEnd = (this.view.length << 3) - 1;
    if (start < 0 || start > maxEnd) {
      return new BitStream();
    }
    if (!end) {
      end = maxEnd;
    }
    if (end < 0 || end > maxEnd) {
      return new BitStream();
    }
    if (end - start + 1 > this.bitsCount) {
      return new BitStream();
    }
    const startIndex = start >> 3;
    const startOffset = start & 0x07;
    const endIndex = end >> 3;
    const endOffset = end & 0x07;
    const bitsLength = endIndex - startIndex == 0 ? 1 : endIndex - startIndex + 1;
    const result = new BitStream({
      buffer: this.buffer.slice(startIndex, startIndex + bitsLength),
      bitsCount: bitsLength << 3
    });
    result.view[0] &= 0xFF >> startOffset;
    result.view[bitsLength] &= 0xFF << 7 - endOffset;
    if (7 - endOffset) {
      result.shiftRight(7 - endOffset, false);
    }
    result.bitsCount = end - start + 1;
    result.shrink();
    return result;
  }
  copy(start = 0, length = 0) {
    const maxEnd = (this.view.length << 3) - 1;
    if (start < 0 || start > maxEnd) {
      return new BitStream();
    }
    if (!length) {
      length = (this.view.length << 3) - start - 1;
    }
    if (length > this.bitsCount) {
      return new BitStream();
    }
    return this.slice(start, start + length - 1);
  }
  shrink() {
    const currentLength = (this.bitsCount >> 3) + (this.bitsCount % 8 ? 1 : 0);
    if (currentLength < this.view.length) {
      const view = this.view.slice(this.view.length - currentLength, this.view.length - currentLength + currentLength);
      this.view = view;
      this.buffer = view.buffer;
    }
  }
  reverseBytes() {
    for (let i = 0; i < this.view.length; i++) {
      this.view[i] = (this.view[i] * 0x0802 & 0x22110 | this.view[i] * 0x8020 & 0x88440) * 0x10101 >> 16;
    }
    if (this.bitsCount % 8) {
      const currentLength = (this.bitsCount >> 3) + (this.bitsCount % 8 ? 1 : 0);
      this.view[this.view.length - currentLength] >>= 8 - (this.bitsCount & 0x07);
    }
  }
  reverseValue() {
    const initialValue = this.toString();
    const initialValueLength = initialValue.length;
    const reversedValue = new Array(initialValueLength);
    for (let i = 0; i < initialValueLength; i++) {
      reversedValue[initialValueLength - 1 - i] = initialValue[i];
    }
    this.fromString(reversedValue.join(""));
  }
  getNumberValue() {
    const byteLength = this.view.length - 1;
    if (byteLength > 3) {
      return -1;
    }
    if (byteLength == -1) {
      return 0;
    }
    const value = new Uint32Array(1);
    const view = new Uint8Array(value.buffer);
    for (let i = byteLength; i >= 0; i--) {
      view[byteLength - i] = this.view[i];
    }
    return value[0];
  }
  findPattern(pattern, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: pattern.toString()
    });
    return stringStream.findPattern(stringPattern, start, length, backward);
  }
  findFirstIn(patterns, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findFirstIn(stringPatterns, start, length, backward);
  }
  findAllIn(patterns, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findAllIn(stringPatterns, start, length);
  }
  findAllPatternIn(pattern, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: pattern.toString()
    });
    return stringStream.findAllPatternIn(stringPattern, start, length);
  }
  findFirstNotIn(patterns, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findFirstNotIn(stringPatterns, start, length, backward);
  }
  findAllNotIn(patterns, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findAllNotIn(stringPatterns, start, length);
  }
  findFirstSequence(patterns, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findFirstSequence(stringPatterns, start, length, backward);
  }
  findAllSequences(patterns, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.findAllSequences(stringPatterns, start, length);
  }
  findPairedPatterns(leftPattern, rightPattern, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringLeftPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: leftPattern.toString()
    });
    const stringRightPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: rightPattern.toString()
    });
    return stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);
  }
  findPairedArrays(inputLeftPatterns, inputRightPatterns, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringLeftPatterns = new Array(inputLeftPatterns.length);
    for (let i = 0; i < inputLeftPatterns.length; i++) {
      stringLeftPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: inputLeftPatterns[i].toString()
      });
    }
    const stringRightPatterns = new Array(inputRightPatterns.length);
    for (let i = 0; i < inputRightPatterns.length; i++) {
      stringRightPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: inputRightPatterns[i].toString()
      });
    }
    return stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);
  }
  replacePattern(searchPattern, replacePattern, start, length) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringSearchPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: searchPattern.toString()
    });
    const stringReplacePattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: replacePattern.toString()
    });
    if (stringStream.replacePattern(stringSearchPattern, stringReplacePattern, start, length)) {
      this.fromString(stringStream.toString());
      return true;
    }
    return false;
  }
  skipPatterns(patterns, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.skipPatterns(stringPatterns, start, length, backward);
  }
  skipNotPatterns(patterns, start, length, backward) {
    const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
      string: this.toString()
    });
    const stringPatterns = new Array(patterns.length);
    for (let i = 0; i < patterns.length; i++) {
      stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({
        string: patterns[i].toString()
      });
    }
    return stringStream.skipNotPatterns(stringPatterns, start, length, backward);
  }
  append(stream) {
    this.fromString([this.toString(), stream.toString()].join(""));
  }
}

/***/ }),

/***/ 34129:
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/byte_stream.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ByteStream: () => (/* binding */ ByteStream)
/* harmony export */ });
class ByteStream {
  constructor(parameters = {}) {
    if ("view" in parameters) {
      this.fromUint8Array(parameters.view);
    } else if ("buffer" in parameters) {
      this.fromArrayBuffer(parameters.buffer);
    } else if ("string" in parameters) {
      this.fromString(parameters.string);
    } else if ("hexstring" in parameters) {
      this.fromHexString(parameters.hexstring);
    } else {
      if ("length" in parameters && parameters.length > 0) {
        this.length = parameters.length;
        if (parameters.stub) {
          for (let i = 0; i < this._view.length; i++) {
            this._view[i] = parameters.stub;
          }
        }
      } else {
        this.length = 0;
      }
    }
  }
  set buffer(value) {
    this._buffer = value;
    this._view = new Uint8Array(this._buffer);
  }
  get buffer() {
    return this._buffer;
  }
  set view(value) {
    this._buffer = new ArrayBuffer(value.length);
    this._view = new Uint8Array(this._buffer);
    this._view.set(value);
  }
  get view() {
    return this._view;
  }
  get length() {
    return this.view.byteLength;
  }
  set length(value) {
    this._buffer = new ArrayBuffer(value);
    this._view = new Uint8Array(this._buffer);
  }
  clear() {
    this._buffer = new ArrayBuffer(0);
    this._view = new Uint8Array(this._buffer);
  }
  fromArrayBuffer(array) {
    this._buffer = array;
    this._view = new Uint8Array(this._buffer);
  }
  fromUint8Array(array) {
    this.fromArrayBuffer(new Uint8Array(array).buffer);
  }
  fromString(string) {
    const stringLength = string.length;
    this.length = stringLength;
    for (let i = 0; i < stringLength; i++) this.view[i] = string.charCodeAt(i);
  }
  toString(start = 0, length = this.view.length - start) {
    let result = "";
    if (start >= this.view.length || start < 0) {
      start = 0;
    }
    if (length >= this.view.length || length < 0) {
      length = this.view.length - start;
    }
    for (let i = start; i < start + length; i++) result += String.fromCharCode(this.view[i]);
    return result;
  }
  fromHexString(hexString) {
    const stringLength = hexString.length;
    this.buffer = new ArrayBuffer(stringLength >> 1);
    this.view = new Uint8Array(this.buffer);
    const hexMap = new Map();
    hexMap.set("0", 0x00);
    hexMap.set("1", 0x01);
    hexMap.set("2", 0x02);
    hexMap.set("3", 0x03);
    hexMap.set("4", 0x04);
    hexMap.set("5", 0x05);
    hexMap.set("6", 0x06);
    hexMap.set("7", 0x07);
    hexMap.set("8", 0x08);
    hexMap.set("9", 0x09);
    hexMap.set("A", 0x0A);
    hexMap.set("a", 0x0A);
    hexMap.set("B", 0x0B);
    hexMap.set("b", 0x0B);
    hexMap.set("C", 0x0C);
    hexMap.set("c", 0x0C);
    hexMap.set("D", 0x0D);
    hexMap.set("d", 0x0D);
    hexMap.set("E", 0x0E);
    hexMap.set("e", 0x0E);
    hexMap.set("F", 0x0F);
    hexMap.set("f", 0x0F);
    let j = 0;
    let temp = 0x00;
    for (let i = 0; i < stringLength; i++) {
      if (!(i % 2)) {
        temp = hexMap.get(hexString.charAt(i)) << 4;
      } else {
        temp |= hexMap.get(hexString.charAt(i));
        this.view[j] = temp;
        j++;
      }
    }
  }
  toHexString(start = 0, length = this.view.length - start) {
    let result = "";
    if (start >= this.view.length || start < 0) {
      start = 0;
    }
    if (length >= this.view.length || length < 0) {
      length = this.view.length - start;
    }
    for (let i = start; i < start + length; i++) {
      const str = this.view[i].toString(16).toUpperCase();
      result = result + (str.length == 1 ? "0" : "") + str;
    }
    return result;
  }
  copy(start = 0, length = this.length - start) {
    if (!start && !this.length) {
      return new ByteStream();
    }
    if (start < 0 || start > this.length - 1) {
      throw new Error(`Wrong start position: ${start}`);
    }
    const stream = new ByteStream({
      buffer: this._buffer.slice(start, start + length)
    });
    return stream;
  }
  slice(start = 0, end = this.length) {
    if (!start && !this.length) {
      return new ByteStream();
    }
    if (start < 0 || start > this.length - 1) {
      throw new Error(`Wrong start position: ${start}`);
    }
    const stream = new ByteStream({
      buffer: this._buffer.slice(start, end)
    });
    return stream;
  }
  realloc(size) {
    const buffer = new ArrayBuffer(size);
    const view = new Uint8Array(buffer);
    if (size > this._view.length) view.set(this._view);else {
      view.set(new Uint8Array(this._buffer, 0, size));
    }
    this._buffer = buffer;
    this._view = new Uint8Array(this._buffer);
  }
  append(stream) {
    const initialSize = this.length;
    const streamViewLength = stream.length;
    const subarrayView = stream._view.subarray();
    this.realloc(initialSize + streamViewLength);
    this._view.set(subarrayView, initialSize);
  }
  insert(stream, start = 0, length = this.length - start) {
    if (start > this.length - 1) return false;
    if (length > this.length - start) {
      length = this.length - start;
    }
    if (length > stream.length) {
      length = stream.length;
    }
    if (length == stream.length) this._view.set(stream._view, start);else {
      this._view.set(stream._view.subarray(0, length), start);
    }
    return true;
  }
  isEqual(stream) {
    if (this.length != stream.length) return false;
    for (let i = 0; i < stream.length; i++) {
      if (this.view[i] != stream.view[i]) return false;
    }
    return true;
  }
  isEqualView(view) {
    if (view.length != this.view.length) return false;
    for (let i = 0; i < view.length; i++) {
      if (this.view[i] != view[i]) return false;
    }
    return true;
  }
  findPattern(pattern, start_, length_, backward_) {
    const {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    const patternLength = pattern.length;
    if (patternLength > length) {
      return -1;
    }
    const patternArray = [];
    for (let i = 0; i < patternLength; i++) patternArray.push(pattern.view[i]);
    for (let i = 0; i <= length - patternLength; i++) {
      let equal = true;
      const equalStart = backward ? start - patternLength - i : start + i;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patternArray[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        return backward ? start - patternLength - i : start + patternLength + i;
      }
    }
    return -1;
  }
  findFirstIn(patterns, start_, length_, backward_) {
    const {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    const result = {
      id: -1,
      position: backward ? 0 : start + length,
      length: 0
    };
    for (let i = 0; i < patterns.length; i++) {
      const position = this.findPattern(patterns[i], start, length, backward);
      if (position != -1) {
        let valid = false;
        const patternLength = patterns[i].length;
        if (backward) {
          if (position - patternLength >= result.position - result.length) valid = true;
        } else {
          if (position - patternLength <= result.position - result.length) valid = true;
        }
        if (valid) {
          result.position = position;
          result.id = i;
          result.length = patternLength;
        }
      }
    }
    return result;
  }
  findAllIn(patterns, start_, length_) {
    let {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      id: -1,
      position: start
    };
    do {
      const position = patternFound.position;
      patternFound = this.findFirstIn(patterns, patternFound.position, length);
      if (patternFound.id == -1) {
        break;
      }
      length -= patternFound.position - position;
      result.push({
        id: patternFound.id,
        position: patternFound.position
      });
    } while (true);
    return result;
  }
  findAllPatternIn(pattern, start_, length_) {
    const {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    const result = [];
    const patternLength = pattern.length;
    if (patternLength > length) {
      return -1;
    }
    const patternArray = Array.from(pattern.view);
    for (let i = 0; i <= length - patternLength; i++) {
      let equal = true;
      const equalStart = start + i;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patternArray[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        result.push(start + patternLength + i);
        i += patternLength - 1;
      }
    }
    return result;
  }
  findFirstNotIn(patterns, start_, length_, backward_) {
    let {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    const result = {
      left: {
        id: -1,
        position: start
      },
      right: {
        id: -1,
        position: 0
      },
      value: new ByteStream()
    };
    let currentLength = length;
    while (currentLength > 0) {
      result.right = this.findFirstIn(patterns, backward ? start - length + currentLength : start + length - currentLength, currentLength, backward);
      if (result.right.id == -1) {
        length = currentLength;
        if (backward) {
          start -= length;
        } else {
          start = result.left.position;
        }
        result.value = new ByteStream({
          buffer: this._buffer.slice(start, start + length)
        });
        break;
      }
      if (result.right.position != (backward ? result.left.position - patterns[result.right.id].length : result.left.position + patterns[result.right.id].length)) {
        if (backward) {
          start = result.right.position + patterns[result.right.id].length;
          length = result.left.position - result.right.position - patterns[result.right.id].length;
        } else {
          start = result.left.position;
          length = result.right.position - result.left.position - patterns[result.right.id].length;
        }
        result.value = new ByteStream({
          buffer: this._buffer.slice(start, start + length)
        });
        break;
      }
      result.left = result.right;
      currentLength -= patterns[result.right.id].length;
    }
    if (backward) {
      const temp = result.right;
      result.right = result.left;
      result.left = temp;
    }
    return result;
  }
  findAllNotIn(patterns, start_, length_) {
    let {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      left: {
        id: -1,
        position: start
      },
      right: {
        id: -1,
        position: start
      },
      value: new ByteStream()
    };
    do {
      const position = patternFound.right.position;
      patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);
      length -= patternFound.right.position - position;
      result.push({
        left: {
          id: patternFound.left.id,
          position: patternFound.left.position
        },
        right: {
          id: patternFound.right.id,
          position: patternFound.right.position
        },
        value: patternFound.value
      });
    } while (patternFound.right.id != -1);
    return result;
  }
  findFirstSequence(patterns, start_, length_, backward_) {
    let {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    const firstIn = this.skipNotPatterns(patterns, start, length, backward);
    if (firstIn == -1) {
      return {
        position: -1,
        value: new ByteStream()
      };
    }
    const firstNotIn = this.skipPatterns(patterns, firstIn, length - (backward ? start - firstIn : firstIn - start), backward);
    if (backward) {
      start = firstNotIn;
      length = firstIn - firstNotIn;
    } else {
      start = firstIn;
      length = firstNotIn - firstIn;
    }
    const value = new ByteStream({
      buffer: this._buffer.slice(start, start + length)
    });
    return {
      position: firstNotIn,
      value
    };
  }
  findAllSequences(patterns, start_, length_) {
    let {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    const result = [];
    let patternFound = {
      position: start,
      value: new ByteStream()
    };
    do {
      const position = patternFound.position;
      patternFound = this.findFirstSequence(patterns, patternFound.position, length);
      if (patternFound.position != -1) {
        length -= patternFound.position - position;
        result.push({
          position: patternFound.position,
          value: patternFound.value
        });
      }
    } while (patternFound.position != -1);
    return result;
  }
  findPairedPatterns(leftPattern, rightPattern, start_, length_) {
    const result = [];
    if (leftPattern.isEqual(rightPattern)) return result;
    const {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    let currentPositionLeft = 0;
    const leftPatterns = this.findAllPatternIn(leftPattern, start, length);
    if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {
      return result;
    }
    const rightPatterns = this.findAllPatternIn(rightPattern, start, length);
    if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {
      return result;
    }
    while (currentPositionLeft < leftPatterns.length) {
      if (rightPatterns.length == 0) {
        break;
      }
      if (leftPatterns[0] == rightPatterns[0]) {
        result.push({
          left: leftPatterns[0],
          right: rightPatterns[0]
        });
        leftPatterns.splice(0, 1);
        rightPatterns.splice(0, 1);
        continue;
      }
      if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {
        break;
      }
      while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {
        currentPositionLeft++;
        if (currentPositionLeft >= leftPatterns.length) {
          break;
        }
      }
      result.push({
        left: leftPatterns[currentPositionLeft - 1],
        right: rightPatterns[0]
      });
      leftPatterns.splice(currentPositionLeft - 1, 1);
      rightPatterns.splice(0, 1);
      currentPositionLeft = 0;
    }
    result.sort((a, b) => a.left - b.left);
    return result;
  }
  findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {
    const {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    const result = [];
    let currentPositionLeft = 0;
    const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);
    if (leftPatterns.length == 0) return result;
    const rightPatterns = this.findAllIn(inputRightPatterns, start, length);
    if (rightPatterns.length == 0) return result;
    while (currentPositionLeft < leftPatterns.length) {
      if (rightPatterns.length == 0) {
        break;
      }
      if (leftPatterns[0].position == rightPatterns[0].position) {
        result.push({
          left: leftPatterns[0],
          right: rightPatterns[0]
        });
        leftPatterns.splice(0, 1);
        rightPatterns.splice(0, 1);
        continue;
      }
      if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {
        break;
      }
      while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {
        currentPositionLeft++;
        if (currentPositionLeft >= leftPatterns.length) {
          break;
        }
      }
      result.push({
        left: leftPatterns[currentPositionLeft - 1],
        right: rightPatterns[0]
      });
      leftPatterns.splice(currentPositionLeft - 1, 1);
      rightPatterns.splice(0, 1);
      currentPositionLeft = 0;
    }
    result.sort((a, b) => a.left.position - b.left.position);
    return result;
  }
  replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {
    let result = [];
    let i;
    const output = {
      status: -1,
      searchPatternPositions: [],
      replacePatternPositions: []
    };
    const {
      start,
      length
    } = this.prepareFindParameters(start_, length_);
    if (findAllResult == null) {
      result = this.findAllIn([searchPattern], start, length);
      if (result.length == 0) {
        return output;
      }
    } else {
      result = findAllResult;
    }
    output.searchPatternPositions.push(...Array.from(result, element => element.position));
    const patternDifference = searchPattern.length - replacePattern.length;
    const changedBuffer = new ArrayBuffer(this.view.length - result.length * patternDifference);
    const changedView = new Uint8Array(changedBuffer);
    changedView.set(new Uint8Array(this.buffer, 0, start));
    for (i = 0; i < result.length; i++) {
      const currentPosition = i == 0 ? start : result[i - 1].position;
      changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);
      changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);
      output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);
    }
    i--;
    changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);
    this.buffer = changedBuffer;
    this.view = new Uint8Array(this.buffer);
    output.status = 1;
    return output;
  }
  skipPatterns(patterns, start_, length_, backward_) {
    const {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    let result = start;
    for (let k = 0; k < patterns.length; k++) {
      const patternLength = patterns[k].length;
      const equalStart = backward ? result - patternLength : result;
      let equal = true;
      for (let j = 0; j < patternLength; j++) {
        if (this.view[j + equalStart] != patterns[k].view[j]) {
          equal = false;
          break;
        }
      }
      if (equal) {
        k = -1;
        if (backward) {
          result -= patternLength;
          if (result <= 0) return result;
        } else {
          result += patternLength;
          if (result >= start + length) return result;
        }
      }
    }
    return result;
  }
  skipNotPatterns(patterns, start_, length_, backward_) {
    const {
      start,
      length,
      backward
    } = this.prepareFindParameters(start_, length_, backward_);
    let result = -1;
    for (let i = 0; i < length; i++) {
      for (let k = 0; k < patterns.length; k++) {
        const patternLength = patterns[k].length;
        const equalStart = backward ? start - i - patternLength : start + i;
        let equal = true;
        for (let j = 0; j < patternLength; j++) {
          if (this.view[j + equalStart] != patterns[k].view[j]) {
            equal = false;
            break;
          }
        }
        if (equal) {
          result = backward ? start - i : start + i;
          break;
        }
      }
      if (result != -1) {
        break;
      }
    }
    return result;
  }
  prepareFindParameters(start = null, length = null, backward = false) {
    if (start === null) {
      start = backward ? this.length : 0;
    }
    if (start > this.length) {
      start = this.length;
    }
    if (backward) {
      if (length === null) {
        length = start;
      }
      if (length > start) {
        length = start;
      }
    } else {
      if (length === null) {
        length = this.length - start;
      }
      if (length > this.length - start) {
        length = this.length - start;
      }
    }
    return {
      start,
      length,
      backward
    };
  }
}

/***/ }),

/***/ 31135:
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/helpers.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseByteMap: () => (/* binding */ parseByteMap)
/* harmony export */ });
function parseByteMap(stream, map, elements, start = null, length = null) {
  if (start === null) {
    start = 0;
  }
  if (start > stream.length - 1) {
    return [];
  }
  if (length === null) {
    length = stream.length - start;
  }
  if (length > stream.length - start) {
    length = stream.length - start;
  }
  let dataView;
  if (start == 0 && length == stream.length) {
    dataView = stream.view;
  } else {
    dataView = new Uint8Array(stream.buffer, start, length);
  }
  const resultArray = new Array(elements);
  let elementsCount = 0;
  let count = 0;
  const mapLength = map.length;
  while (count < length) {
    let structureLength = 0;
    resultArray[elementsCount] = {};
    for (let i = 0; i < mapLength; i++) {
      if (map[i].maxlength == 0) {
        if ("defaultValue" in map[i]) {
          resultArray[elementsCount][map[i].name] = map[i].defaultValue;
        }
        continue;
      }
      const array = new Uint8Array(map[i].maxlength);
      for (let j = 0; j < map[i].maxlength; j++) {
        array[j] = dataView[count++];
      }
      const result = map[i].func(array);
      if (result.status == -1) {
        if (resultArray.length == 1) {
          return [];
        }
        return resultArray.slice(0, resultArray.length - 1);
      }
      if (map[i].type != "check") {
        resultArray[elementsCount][map[i].name] = result.value;
      }
      count -= map[i].maxlength - result.length;
      structureLength += result.length;
    }
    resultArray[elementsCount++].structureLength = structureLength;
  }
  return resultArray;
}

/***/ }),

/***/ 5566:
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BitStream: () => (/* reexport safe */ _bit_stream__WEBPACK_IMPORTED_MODULE_3__.BitStream),
/* harmony export */   ByteStream: () => (/* reexport safe */ _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream),
/* harmony export */   SeqBitStream: () => (/* reexport safe */ _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__.SeqBitStream),
/* harmony export */   SeqStream: () => (/* reexport safe */ _seq_stream__WEBPACK_IMPORTED_MODULE_1__.SeqStream),
/* harmony export */   parseByteMap: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_2__.parseByteMap)
/* harmony export */ });
/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ 34129);
/* harmony import */ var _seq_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./seq_stream */ 97416);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ 31135);
/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bit_stream */ 18860);
/* harmony import */ var _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./seq_bit_stream */ 56872);






/***/ }),

/***/ 56872:
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/seq_bit_stream.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SeqBitStream: () => (/* binding */ SeqBitStream)
/* harmony export */ });
/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit_stream */ 18860);

class SeqBitStream {
  constructor(parameters = {}) {
    var _a;
    this._length = 0;
    this._start = 0;
    this.prevLength = 0;
    this.prevStart = 0;
    this.stream = ((_a = parameters.stream) === null || _a === void 0 ? void 0 : _a.slice()) || new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();
    this.appendBlock = parameters.appendBlock || 0;
    if (parameters.start && parameters.start > 0) {
      this.start = parameters.start;
    }
    if (parameters.length && parameters.length > 0) {
      this.length = parameters.length;
    }
    this.backward = parameters.backward || false;
  }
  set start(value) {
    if (value > this.stream.bitsCount) {
      return;
    }
    this._length -= this.backward ? this._start - value : value - this._start;
    this._start = value;
    this.prevStart = this._start;
    this.prevLength = this._length;
  }
  get start() {
    return this._start;
  }
  set length(value) {
    if (value > this.stream.bitsCount) {
      return;
    }
    this.prevLength = this._length;
    this._length = value;
  }
  get length() {
    return this._length;
  }
  set stream(value) {
    this._stream = value;
    this.prevLength = this._length;
    this._length = value.bitsCount;
    this.prevStart = this._start;
    this._start = this.backward ? this.length : 0;
  }
  get stream() {
    return this._stream;
  }
  getBits(length = null) {
    if (length === null) {
      length = 0;
    } else if (length === 0) {
      return new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();
    }
    if (this.start + length > this.stream.bitsCount) {
      length = this.stream.bitsCount - this.start;
    }
    let result;
    if (this.backward) {
      result = this.stream.copy(this.start - length, length);
      this.start -= result.bitsCount;
    } else {
      result = this.stream.copy(this.start, length);
      this.start += result.bitsCount;
    }
    return result;
  }
  getBitsString(length) {
    return this.getBits(length).toString();
  }
  getBitsReversedValue(length) {
    const initialValue = this.getBitsString(length);
    const initialValueLength = initialValue.length;
    let byteIndex;
    const initialOffset = 8 - initialValueLength % 8;
    const reversedValue = new Array(initialValueLength);
    const value = new Uint32Array(1);
    const valueView = new Uint8Array(value.buffer, 0, 4);
    let i;
    if (initialValueLength > 32) {
      return -1;
    }
    if (length == 32) {
      byteIndex = 3;
    } else {
      byteIndex = initialValueLength - 1 >> 3;
    }
    for (i = 0; i < initialValueLength; i++) {
      reversedValue[initialValueLength - 1 - i] = initialValue[i];
    }
    for (i = initialOffset; i < initialOffset + initialValueLength; i++) {
      if (reversedValue[i - initialOffset] == "1") {
        valueView[byteIndex] |= 0x01 << 7 - i % 8;
      }
      if (i && (i + 1) % 8 == 0) {
        byteIndex--;
      }
    }
    return value[0];
  }
  toString() {
    const streamToDisplay = this.stream.copy(this.start, this.length);
    return streamToDisplay.toString();
  }
}

/***/ }),

/***/ 97416:
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/bytestreamjs@2.0.1/node_modules/bytestreamjs/build/mjs/seq_stream.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SeqStream: () => (/* binding */ SeqStream)
/* harmony export */ });
/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ 34129);

const pow2_24 = 16777216;
class SeqStream {
  constructor(parameters = {}) {
    this._stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();
    this._length = 0;
    this._start = 0;
    this.backward = false;
    this.appendBlock = 0;
    this.prevLength = 0;
    this.prevStart = 0;
    if ("view" in parameters) {
      this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({
        view: parameters.view
      });
    } else if ("buffer" in parameters) {
      this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({
        buffer: parameters.buffer
      });
    } else if ("string" in parameters) {
      this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({
        string: parameters.string
      });
    } else if ("hexstring" in parameters) {
      this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({
        hexstring: parameters.hexstring
      });
    } else if ("stream" in parameters) {
      this.stream = parameters.stream.slice();
    } else {
      this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();
    }
    if ("backward" in parameters && parameters.backward) {
      this.backward = parameters.backward;
      this._start = this.stream.length;
    }
    if ("length" in parameters && parameters.length > 0) {
      this._length = parameters.length;
    }
    if ("start" in parameters && parameters.start && parameters.start > 0) {
      this._start = parameters.start;
    }
    if ("appendBlock" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {
      this.appendBlock = parameters.appendBlock;
    }
  }
  set stream(value) {
    this._stream = value;
    this.prevLength = this._length;
    this._length = value.length;
    this.prevStart = this._start;
    this._start = 0;
  }
  get stream() {
    return this._stream;
  }
  set length(value) {
    this.prevLength = this._length;
    this._length = value;
  }
  get length() {
    if (this.appendBlock) {
      return this.start;
    }
    return this._length;
  }
  set start(value) {
    if (value > this.stream.length) return;
    this.prevStart = this._start;
    this.prevLength = this._length;
    this._length -= this.backward ? this._start - value : value - this._start;
    this._start = value;
  }
  get start() {
    return this._start;
  }
  get buffer() {
    return this._stream.buffer.slice(0, this._length);
  }
  resetPosition() {
    this._start = this.prevStart;
    this._length = this.prevLength;
  }
  findPattern(pattern, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);
    if (result == -1) return result;
    if (this.backward) {
      if (result < this.start - pattern.length - gap) {
        return -1;
      }
    } else {
      if (result > this.start + pattern.length + gap) {
        return -1;
      }
    }
    this.start = result;
    return result;
  }
  findFirstIn(patterns, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);
    if (result.id == -1) return result;
    if (this.backward) {
      if (result.position < this.start - patterns[result.id].length - gap) {
        return {
          id: -1,
          position: this.backward ? 0 : this.start + this.length
        };
      }
    } else {
      if (result.position > this.start + patterns[result.id].length + gap) {
        return {
          id: -1,
          position: this.backward ? 0 : this.start + this.length
        };
      }
    }
    this.start = result.position;
    return result;
  }
  findAllIn(patterns) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.findAllIn(patterns, start, this.length);
  }
  findFirstNotIn(patterns, gap = null) {
    if (gap == null || gap > this._length) {
      gap = this._length;
    }
    const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);
    if (result.left.id == -1 && result.right.id == -1) {
      return result;
    }
    if (this.backward) {
      if (result.right.id != -1) {
        if (result.right.position < this._start - patterns[result.right.id].length - gap) {
          return {
            left: {
              id: -1,
              position: this._start
            },
            right: {
              id: -1,
              position: 0
            },
            value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()
          };
        }
      }
    } else {
      if (result.left.id != -1) {
        if (result.left.position > this._start + patterns[result.left.id].length + gap) {
          return {
            left: {
              id: -1,
              position: this._start
            },
            right: {
              id: -1,
              position: 0
            },
            value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()
          };
        }
      }
    }
    if (this.backward) {
      if (result.left.id == -1) {
        this.start = 0;
      } else {
        this.start = result.left.position;
      }
    } else {
      if (result.right.id == -1) {
        this.start = this._start + this._length;
      } else {
        this.start = result.right.position;
      }
    }
    return result;
  }
  findAllNotIn(patterns) {
    const start = this.backward ? this._start - this._length : this._start;
    return this._stream.findAllNotIn(patterns, start, this._length);
  }
  findFirstSequence(patterns, length = null, gap = null) {
    if (length == null || length > this._length) {
      length = this._length;
    }
    if (gap == null || gap > length) {
      gap = length;
    }
    const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);
    if (result.value.length == 0) {
      return result;
    }
    if (this.backward) {
      if (result.position < this._start - result.value.length - gap) {
        return {
          position: -1,
          value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()
        };
      }
    } else {
      if (result.position > this._start + result.value.length + gap) {
        return {
          position: -1,
          value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()
        };
      }
    }
    this.start = result.position;
    return result;
  }
  findAllSequences(patterns) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.findAllSequences(patterns, start, this.length);
  }
  findPairedPatterns(leftPattern, rightPattern, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const start = this.backward ? this.start - this.length : this.start;
    const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);
    if (result.length) {
      if (this.backward) {
        if (result[0].right < this.start - rightPattern.length - gap) {
          return [];
        }
      } else {
        if (result[0].left > this.start + leftPattern.length + gap) {
          return [];
        }
      }
    }
    return result;
  }
  findPairedArrays(leftPatterns, rightPatterns, gap = null) {
    if (gap == null || gap > this.length) {
      gap = this.length;
    }
    const start = this.backward ? this.start - this.length : this.start;
    const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);
    if (result.length) {
      if (this.backward) {
        if (result[0].right.position < this.start - rightPatterns[result[0].right.id].length - gap) {
          return [];
        }
      } else {
        if (result[0].left.position > this.start + leftPatterns[result[0].left.id].length + gap) {
          return [];
        }
      }
    }
    return result;
  }
  replacePattern(searchPattern, replacePattern) {
    const start = this.backward ? this.start - this.length : this.start;
    return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);
  }
  skipPatterns(patterns) {
    const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);
    this.start = result;
    return result;
  }
  skipNotPatterns(patterns) {
    const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);
    if (result == -1) return -1;
    this.start = result;
    return result;
  }
  append(stream) {
    this.beforeAppend(stream.length);
    this._stream.view.set(stream.view, this._start);
    this._length += stream.length * 2;
    this.start = this._start + stream.length;
    this.prevLength -= stream.length * 2;
  }
  appendView(view) {
    this.beforeAppend(view.length);
    this._stream.view.set(view, this._start);
    this._length += view.length * 2;
    this.start = this._start + view.length;
    this.prevLength -= view.length * 2;
  }
  appendChar(char) {
    this.beforeAppend(1);
    this._stream.view[this._start] = char;
    this._length += 2;
    this.start = this._start + 1;
    this.prevLength -= 2;
  }
  appendUint16(number) {
    this.beforeAppend(2);
    const value = new Uint16Array([number]);
    const view = new Uint8Array(value.buffer);
    this.stream.view[this._start] = view[1];
    this._stream.view[this._start + 1] = view[0];
    this._length += 4;
    this.start = this._start + 2;
    this.prevLength -= 4;
  }
  appendUint24(number) {
    this.beforeAppend(3);
    const value = new Uint32Array([number]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[2];
    this._stream.view[this._start + 1] = view[1];
    this._stream.view[this._start + 2] = view[0];
    this._length += 6;
    this.start = this._start + 3;
    this.prevLength -= 6;
  }
  appendUint32(number) {
    this.beforeAppend(4);
    const value = new Uint32Array([number]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[3];
    this._stream.view[this._start + 1] = view[2];
    this._stream.view[this._start + 2] = view[1];
    this._stream.view[this._start + 3] = view[0];
    this._length += 8;
    this.start = this._start + 4;
    this.prevLength -= 8;
  }
  appendInt16(number) {
    this.beforeAppend(2);
    const value = new Int16Array([number]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[1];
    this._stream.view[this._start + 1] = view[0];
    this._length += 4;
    this.start = this._start + 2;
    this.prevLength -= 4;
  }
  appendInt32(number) {
    this.beforeAppend(4);
    const value = new Int32Array([number]);
    const view = new Uint8Array(value.buffer);
    this._stream.view[this._start] = view[3];
    this._stream.view[this._start + 1] = view[2];
    this._stream.view[this._start + 2] = view[1];
    this._stream.view[this._start + 3] = view[0];
    this._length += 8;
    this.start = this._start + 4;
    this.prevLength -= 8;
  }
  getBlock(size, changeLength = true) {
    if (this._length <= 0) {
      return new Uint8Array(0);
    }
    if (this._length < size) {
      size = this._length;
    }
    let result;
    if (this.backward) {
      const view = this._stream.view.subarray(this._length - size, this._length);
      result = new Uint8Array(size);
      for (let i = 0; i < size; i++) {
        result[size - 1 - i] = view[i];
      }
    } else {
      result = this._stream.view.subarray(this._start, this._start + size);
    }
    if (changeLength) {
      this.start += this.backward ? -1 * size : size;
    }
    return result;
  }
  getUint16(changeLength = true) {
    const block = this.getBlock(2, changeLength);
    if (block.length < 2) return 0;
    return block[0] << 8 | block[1];
  }
  getInt16(changeLength = true) {
    const num = this.getUint16(changeLength);
    const negative = 0x8000;
    if (num & negative) {
      return -(negative - (num ^ negative));
    }
    return num;
  }
  getUint24(changeLength = true) {
    const block = this.getBlock(4, changeLength);
    if (block.length < 3) return 0;
    return block[0] << 16 | block[1] << 8 | block[2];
  }
  getUint32(changeLength = true) {
    const block = this.getBlock(4, changeLength);
    if (block.length < 4) return 0;
    return block[0] * pow2_24 + (block[1] << 16) + (block[2] << 8) + block[3];
  }
  getInt32(changeLength = true) {
    const num = this.getUint32(changeLength);
    const negative = 0x80000000;
    if (num & negative) {
      return -(negative - (num ^ negative));
    }
    return num;
  }
  beforeAppend(size) {
    if (this._start + size > this._stream.length) {
      if (size > this.appendBlock) {
        this.appendBlock = size + SeqStream.APPEND_BLOCK;
      }
      this._stream.realloc(this._stream.length + this.appendBlock);
    }
  }
}
SeqStream.APPEND_BLOCK = 1000;

/***/ }),

/***/ 82514:
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/file-saver@2.0.5/node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (a, b) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  "use strict";

  function b(a, b) {
    return "undefined" == typeof b ? b = {
      autoBom: !1
    } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
      autoBom: !b
    }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
      type: a.type
    }) : a;
  }
  function c(a, b, c) {
    var d = new XMLHttpRequest();
    d.open("GET", a), d.responseType = "blob", d.onload = function () {
      g(d.response, b, c);
    }, d.onerror = function () {
      console.error("could not download file");
    }, d.send();
  }
  function d(a) {
    var b = new XMLHttpRequest();
    b.open("HEAD", a, !1);
    try {
      b.send();
    } catch (a) {}
    return 200 <= b.status && 299 >= b.status;
  }
  function e(a) {
    try {
      a.dispatchEvent(new MouseEvent("click"));
    } catch (c) {
      var b = document.createEvent("MouseEvents");
      b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
    }
  }
  var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0,
    a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),
    g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : "download" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {
      var i = f.URL || f.webkitURL,
        j = document.createElement("a");
      g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
        i.revokeObjectURL(j.href);
      }, 4E4), setTimeout(function () {
        e(j);
      }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
      if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
        var i = document.createElement("a");
        i.href = f, i.target = "_blank", setTimeout(function () {
          e(i);
        });
      }
    } : function (b, d, e, g) {
      if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c(b, d, e);
      var h = "application/octet-stream" === b.type,
        i = /constructor/i.test(f.HTMLElement) || f.safari,
        j = /CriOS\/[\d]+/.test(navigator.userAgent);
      if ((j || h && i || a) && "undefined" != typeof FileReader) {
        var k = new FileReader();
        k.onloadend = function () {
          var a = k.result;
          a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
        }, k.readAsDataURL(b);
      } else {
        var l = f.URL || f.webkitURL,
          m = l.createObjectURL(b);
        g ? g.location = m : location.href = m, g = null, setTimeout(function () {
          l.revokeObjectURL(m);
        }, 4E4);
      }
    });
  f.saveAs = g.saveAs = g,  true && (module.exports = g);
});

/***/ }),

/***/ 89207:
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/jszip@3.10.1/node_modules/jszip/dist/jszip.min.js ***!
  \******************************************************************************/
/***/ ((module) => {

/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/

!function (e) {
  if (true) module.exports = e();else {}
}(function () {
  return function s(a, o, h) {
    function u(r, e) {
      if (!o[r]) {
        if (!a[r]) {
          var t = undefined;
          if (!e && t) return require(r, !0);
          if (l) return l(r, !0);
          var n = new Error("Cannot find module '" + r + "'");
          throw n.code = "MODULE_NOT_FOUND", n;
        }
        var i = o[r] = {
          exports: {}
        };
        a[r][0].call(i.exports, function (e) {
          var t = a[r][1][e];
          return u(t || e);
        }, i, i.exports, s, a, o, h);
      }
      return o[r].exports;
    }
    for (var l = undefined, e = 0; e < h.length; e++) u(h[e]);
    return u;
  }({
    1: [function (e, t, r) {
      "use strict";

      var d = e("./utils"),
        c = e("./support"),
        p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      r.encode = function (e) {
        for (var t, r, n, i, s, a, o, h = [], u = 0, l = e.length, f = l, c = "string" !== d.getTypeOf(e); u < e.length;) f = l - u, n = c ? (t = e[u++], r = u < l ? e[u++] : 0, u < l ? e[u++] : 0) : (t = e.charCodeAt(u++), r = u < l ? e.charCodeAt(u++) : 0, u < l ? e.charCodeAt(u++) : 0), i = t >> 2, s = (3 & t) << 4 | r >> 4, a = 1 < f ? (15 & r) << 2 | n >> 6 : 64, o = 2 < f ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s) + p.charAt(a) + p.charAt(o));
        return h.join("");
      }, r.decode = function (e) {
        var t,
          r,
          n,
          i,
          s,
          a,
          o = 0,
          h = 0,
          u = "data:";
        if (e.substr(0, u.length) === u) throw new Error("Invalid base64 input, it looks like a data url.");
        var l,
          f = 3 * (e = e.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
        if (e.charAt(e.length - 1) === p.charAt(64) && f--, e.charAt(e.length - 2) === p.charAt(64) && f--, f % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
        for (l = c.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < e.length;) t = p.indexOf(e.charAt(o++)) << 2 | (i = p.indexOf(e.charAt(o++))) >> 4, r = (15 & i) << 4 | (s = p.indexOf(e.charAt(o++))) >> 2, n = (3 & s) << 6 | (a = p.indexOf(e.charAt(o++))), l[h++] = t, 64 !== s && (l[h++] = r), 64 !== a && (l[h++] = n);
        return l;
      };
    }, {
      "./support": 30,
      "./utils": 32
    }],
    2: [function (e, t, r) {
      "use strict";

      var n = e("./external"),
        i = e("./stream/DataWorker"),
        s = e("./stream/Crc32Probe"),
        a = e("./stream/DataLengthProbe");
      function o(e, t, r, n, i) {
        this.compressedSize = e, this.uncompressedSize = t, this.crc32 = r, this.compression = n, this.compressedContent = i;
      }
      o.prototype = {
        getContentWorker: function () {
          var e = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),
            t = this;
          return e.on("end", function () {
            if (this.streamInfo.data_length !== t.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
          }), e;
        },
        getCompressedWorker: function () {
          return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
        }
      }, o.createWorkerFrom = function (e, t, r) {
        return e.pipe(new s()).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression", t);
      }, t.exports = o;
    }, {
      "./external": 6,
      "./stream/Crc32Probe": 25,
      "./stream/DataLengthProbe": 26,
      "./stream/DataWorker": 27
    }],
    3: [function (e, t, r) {
      "use strict";

      var n = e("./stream/GenericWorker");
      r.STORE = {
        magic: "\0\0",
        compressWorker: function () {
          return new n("STORE compression");
        },
        uncompressWorker: function () {
          return new n("STORE decompression");
        }
      }, r.DEFLATE = e("./flate");
    }, {
      "./flate": 7,
      "./stream/GenericWorker": 28
    }],
    4: [function (e, t, r) {
      "use strict";

      var n = e("./utils");
      var o = function () {
        for (var e, t = [], r = 0; r < 256; r++) {
          e = r;
          for (var n = 0; n < 8; n++) e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
          t[r] = e;
        }
        return t;
      }();
      t.exports = function (e, t) {
        return void 0 !== e && e.length ? "string" !== n.getTypeOf(e) ? function (e, t, r, n) {
          var i = o,
            s = n + r;
          e ^= -1;
          for (var a = n; a < s; a++) e = e >>> 8 ^ i[255 & (e ^ t[a])];
          return -1 ^ e;
        }(0 | t, e, e.length, 0) : function (e, t, r, n) {
          var i = o,
            s = n + r;
          e ^= -1;
          for (var a = n; a < s; a++) e = e >>> 8 ^ i[255 & (e ^ t.charCodeAt(a))];
          return -1 ^ e;
        }(0 | t, e, e.length, 0) : 0;
      };
    }, {
      "./utils": 32
    }],
    5: [function (e, t, r) {
      "use strict";

      r.base64 = !1, r.binary = !1, r.dir = !1, r.createFolders = !0, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;
    }, {}],
    6: [function (e, t, r) {
      "use strict";

      var n = null;
      n = "undefined" != typeof Promise ? Promise : e("lie"), t.exports = {
        Promise: n
      };
    }, {
      lie: 37
    }],
    7: [function (e, t, r) {
      "use strict";

      var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array,
        i = e("pako"),
        s = e("./utils"),
        a = e("./stream/GenericWorker"),
        o = n ? "uint8array" : "array";
      function h(e, t) {
        a.call(this, "FlateWorker/" + e), this._pako = null, this._pakoAction = e, this._pakoOptions = t, this.meta = {};
      }
      r.magic = "\b\0", s.inherits(h, a), h.prototype.processChunk = function (e) {
        this.meta = e.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, e.data), !1);
      }, h.prototype.flush = function () {
        a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], !0);
      }, h.prototype.cleanUp = function () {
        a.prototype.cleanUp.call(this), this._pako = null;
      }, h.prototype._createPako = function () {
        this._pako = new i[this._pakoAction]({
          raw: !0,
          level: this._pakoOptions.level || -1
        });
        var t = this;
        this._pako.onData = function (e) {
          t.push({
            data: e,
            meta: t.meta
          });
        };
      }, r.compressWorker = function (e) {
        return new h("Deflate", e);
      }, r.uncompressWorker = function () {
        return new h("Inflate", {});
      };
    }, {
      "./stream/GenericWorker": 28,
      "./utils": 32,
      pako: 38
    }],
    8: [function (e, t, r) {
      "use strict";

      function A(e, t) {
        var r,
          n = "";
        for (r = 0; r < t; r++) n += String.fromCharCode(255 & e), e >>>= 8;
        return n;
      }
      function n(e, t, r, n, i, s) {
        var a,
          o,
          h = e.file,
          u = e.compression,
          l = s !== O.utf8encode,
          f = I.transformTo("string", s(h.name)),
          c = I.transformTo("string", O.utf8encode(h.name)),
          d = h.comment,
          p = I.transformTo("string", s(d)),
          m = I.transformTo("string", O.utf8encode(d)),
          _ = c.length !== h.name.length,
          g = m.length !== d.length,
          b = "",
          v = "",
          y = "",
          w = h.dir,
          k = h.date,
          x = {
            crc32: 0,
            compressedSize: 0,
            uncompressedSize: 0
          };
        t && !r || (x.crc32 = e.crc32, x.compressedSize = e.compressedSize, x.uncompressedSize = e.uncompressedSize);
        var S = 0;
        t && (S |= 8), l || !_ && !g || (S |= 2048);
        var z = 0,
          C = 0;
        w && (z |= 16), "UNIX" === i ? (C = 798, z |= function (e, t) {
          var r = e;
          return e || (r = t ? 16893 : 33204), (65535 & r) << 16;
        }(h.unixPermissions, w)) : (C = 20, z |= function (e) {
          return 63 & (e || 0);
        }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + c, b += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += "uc" + A(y.length, 2) + y);
        var E = "";
        return E += "\n\0", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), {
          fileRecord: R.LOCAL_FILE_HEADER + E + f + b,
          dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + "\0\0\0\0" + A(z, 4) + A(n, 4) + f + b + p
        };
      }
      var I = e("../utils"),
        i = e("../stream/GenericWorker"),
        O = e("../utf8"),
        B = e("../crc32"),
        R = e("../signature");
      function s(e, t, r, n) {
        i.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t, this.zipPlatform = r, this.encodeFileName = n, this.streamFiles = e, this.accumulate = !1, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
      }
      I.inherits(s, i), s.prototype.push = function (e) {
        var t = e.meta.percent || 0,
          r = this.entriesCount,
          n = this._sources.length;
        this.accumulate ? this.contentBuffer.push(e) : (this.bytesWritten += e.data.length, i.prototype.push.call(this, {
          data: e.data,
          meta: {
            currentFile: this.currentFile,
            percent: r ? (t + 100 * (r - n - 1)) / r : 100
          }
        }));
      }, s.prototype.openedSource = function (e) {
        this.currentSourceOffset = this.bytesWritten, this.currentFile = e.file.name;
        var t = this.streamFiles && !e.file.dir;
        if (t) {
          var r = n(e, t, !1, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
          this.push({
            data: r.fileRecord,
            meta: {
              percent: 0
            }
          });
        } else this.accumulate = !0;
      }, s.prototype.closedSource = function (e) {
        this.accumulate = !1;
        var t = this.streamFiles && !e.file.dir,
          r = n(e, t, !0, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
        if (this.dirRecords.push(r.dirRecord), t) this.push({
          data: function (e) {
            return R.DATA_DESCRIPTOR + A(e.crc32, 4) + A(e.compressedSize, 4) + A(e.uncompressedSize, 4);
          }(e),
          meta: {
            percent: 100
          }
        });else for (this.push({
          data: r.fileRecord,
          meta: {
            percent: 0
          }
        }); this.contentBuffer.length;) this.push(this.contentBuffer.shift());
        this.currentFile = null;
      }, s.prototype.flush = function () {
        for (var e = this.bytesWritten, t = 0; t < this.dirRecords.length; t++) this.push({
          data: this.dirRecords[t],
          meta: {
            percent: 100
          }
        });
        var r = this.bytesWritten - e,
          n = function (e, t, r, n, i) {
            var s = I.transformTo("string", i(n));
            return R.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A(e, 2) + A(e, 2) + A(t, 4) + A(r, 4) + A(s.length, 2) + s;
          }(this.dirRecords.length, r, e, this.zipComment, this.encodeFileName);
        this.push({
          data: n,
          meta: {
            percent: 100
          }
        });
      }, s.prototype.prepareNextSource = function () {
        this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
      }, s.prototype.registerPrevious = function (e) {
        this._sources.push(e);
        var t = this;
        return e.on("data", function (e) {
          t.processChunk(e);
        }), e.on("end", function () {
          t.closedSource(t.previous.streamInfo), t._sources.length ? t.prepareNextSource() : t.end();
        }), e.on("error", function (e) {
          t.error(e);
        }), this;
      }, s.prototype.resume = function () {
        return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), !0) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), !0));
      }, s.prototype.error = function (e) {
        var t = this._sources;
        if (!i.prototype.error.call(this, e)) return !1;
        for (var r = 0; r < t.length; r++) try {
          t[r].error(e);
        } catch (e) {}
        return !0;
      }, s.prototype.lock = function () {
        i.prototype.lock.call(this);
        for (var e = this._sources, t = 0; t < e.length; t++) e[t].lock();
      }, t.exports = s;
    }, {
      "../crc32": 4,
      "../signature": 23,
      "../stream/GenericWorker": 28,
      "../utf8": 31,
      "../utils": 32
    }],
    9: [function (e, t, r) {
      "use strict";

      var u = e("../compressions"),
        n = e("./ZipFileWorker");
      r.generateWorker = function (e, a, t) {
        var o = new n(a.streamFiles, t, a.platform, a.encodeFileName),
          h = 0;
        try {
          e.forEach(function (e, t) {
            h++;
            var r = function (e, t) {
                var r = e || t,
                  n = u[r];
                if (!n) throw new Error(r + " is not a valid compression method !");
                return n;
              }(t.options.compression, a.compression),
              n = t.options.compressionOptions || a.compressionOptions || {},
              i = t.dir,
              s = t.date;
            t._compressWorker(r, n).withStreamInfo("file", {
              name: e,
              dir: i,
              date: s,
              comment: t.comment || "",
              unixPermissions: t.unixPermissions,
              dosPermissions: t.dosPermissions
            }).pipe(o);
          }), o.entriesCount = h;
        } catch (e) {
          o.error(e);
        }
        return o;
      };
    }, {
      "../compressions": 3,
      "./ZipFileWorker": 8
    }],
    10: [function (e, t, r) {
      "use strict";

      function n() {
        if (!(this instanceof n)) return new n();
        if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
        this.files = Object.create(null), this.comment = null, this.root = "", this.clone = function () {
          var e = new n();
          for (var t in this) "function" != typeof this[t] && (e[t] = this[t]);
          return e;
        };
      }
      (n.prototype = e("./object")).loadAsync = e("./load"), n.support = e("./support"), n.defaults = e("./defaults"), n.version = "3.10.1", n.loadAsync = function (e, t) {
        return new n().loadAsync(e, t);
      }, n.external = e("./external"), t.exports = n;
    }, {
      "./defaults": 5,
      "./external": 6,
      "./load": 11,
      "./object": 15,
      "./support": 30
    }],
    11: [function (e, t, r) {
      "use strict";

      var u = e("./utils"),
        i = e("./external"),
        n = e("./utf8"),
        s = e("./zipEntries"),
        a = e("./stream/Crc32Probe"),
        l = e("./nodejsUtils");
      function f(n) {
        return new i.Promise(function (e, t) {
          var r = n.decompressed.getContentWorker().pipe(new a());
          r.on("error", function (e) {
            t(e);
          }).on("end", function () {
            r.streamInfo.crc32 !== n.decompressed.crc32 ? t(new Error("Corrupted zip : CRC32 mismatch")) : e();
          }).resume();
        });
      }
      t.exports = function (e, o) {
        var h = this;
        return o = u.extend(o || {}, {
          base64: !1,
          checkCRC32: !1,
          optimizedBinaryString: !1,
          createFolders: !1,
          decodeFileName: n.utf8decode
        }), l.isNode && l.isStream(e) ? i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u.prepareContent("the loaded zip file", e, !0, o.optimizedBinaryString, o.base64).then(function (e) {
          var t = new s(o);
          return t.load(e), t;
        }).then(function (e) {
          var t = [i.Promise.resolve(e)],
            r = e.files;
          if (o.checkCRC32) for (var n = 0; n < r.length; n++) t.push(f(r[n]));
          return i.Promise.all(t);
        }).then(function (e) {
          for (var t = e.shift(), r = t.files, n = 0; n < r.length; n++) {
            var i = r[n],
              s = i.fileNameStr,
              a = u.resolve(i.fileNameStr);
            h.file(a, i.decompressed, {
              binary: !0,
              optimizedBinaryString: !0,
              date: i.date,
              dir: i.dir,
              comment: i.fileCommentStr.length ? i.fileCommentStr : null,
              unixPermissions: i.unixPermissions,
              dosPermissions: i.dosPermissions,
              createFolders: o.createFolders
            }), i.dir || (h.file(a).unsafeOriginalName = s);
          }
          return t.zipComment.length && (h.comment = t.zipComment), h;
        });
      };
    }, {
      "./external": 6,
      "./nodejsUtils": 14,
      "./stream/Crc32Probe": 25,
      "./utf8": 31,
      "./utils": 32,
      "./zipEntries": 33
    }],
    12: [function (e, t, r) {
      "use strict";

      var n = e("../utils"),
        i = e("../stream/GenericWorker");
      function s(e, t) {
        i.call(this, "Nodejs stream input adapter for " + e), this._upstreamEnded = !1, this._bindStream(t);
      }
      n.inherits(s, i), s.prototype._bindStream = function (e) {
        var t = this;
        (this._stream = e).pause(), e.on("data", function (e) {
          t.push({
            data: e,
            meta: {
              percent: 0
            }
          });
        }).on("error", function (e) {
          t.isPaused ? this.generatedError = e : t.error(e);
        }).on("end", function () {
          t.isPaused ? t._upstreamEnded = !0 : t.end();
        });
      }, s.prototype.pause = function () {
        return !!i.prototype.pause.call(this) && (this._stream.pause(), !0);
      }, s.prototype.resume = function () {
        return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), !0);
      }, t.exports = s;
    }, {
      "../stream/GenericWorker": 28,
      "../utils": 32
    }],
    13: [function (e, t, r) {
      "use strict";

      var i = e("readable-stream").Readable;
      function n(e, t, r) {
        i.call(this, t), this._helper = e;
        var n = this;
        e.on("data", function (e, t) {
          n.push(e) || n._helper.pause(), r && r(t);
        }).on("error", function (e) {
          n.emit("error", e);
        }).on("end", function () {
          n.push(null);
        });
      }
      e("../utils").inherits(n, i), n.prototype._read = function () {
        this._helper.resume();
      }, t.exports = n;
    }, {
      "../utils": 32,
      "readable-stream": 16
    }],
    14: [function (e, t, r) {
      "use strict";

      t.exports = {
        isNode: "undefined" != typeof Buffer,
        newBufferFrom: function (e, t) {
          if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e, t);
          if ("number" == typeof e) throw new Error('The "data" argument must not be a number');
          return new Buffer(e, t);
        },
        allocBuffer: function (e) {
          if (Buffer.alloc) return Buffer.alloc(e);
          var t = new Buffer(e);
          return t.fill(0), t;
        },
        isBuffer: function (e) {
          return Buffer.isBuffer(e);
        },
        isStream: function (e) {
          return e && "function" == typeof e.on && "function" == typeof e.pause && "function" == typeof e.resume;
        }
      };
    }, {}],
    15: [function (e, t, r) {
      "use strict";

      function s(e, t, r) {
        var n,
          i = u.getTypeOf(t),
          s = u.extend(r || {}, f);
        s.date = s.date || new Date(), null !== s.compression && (s.compression = s.compression.toUpperCase()), "string" == typeof s.unixPermissions && (s.unixPermissions = parseInt(s.unixPermissions, 8)), s.unixPermissions && 16384 & s.unixPermissions && (s.dir = !0), s.dosPermissions && 16 & s.dosPermissions && (s.dir = !0), s.dir && (e = g(e)), s.createFolders && (n = _(e)) && b.call(this, n, !0);
        var a = "string" === i && !1 === s.binary && !1 === s.base64;
        r && void 0 !== r.binary || (s.binary = !a), (t instanceof c && 0 === t.uncompressedSize || s.dir || !t || 0 === t.length) && (s.base64 = !1, s.binary = !0, t = "", s.compression = "STORE", i = "string");
        var o = null;
        o = t instanceof c || t instanceof l ? t : p.isNode && p.isStream(t) ? new m(e, t) : u.prepareContent(e, t, s.binary, s.optimizedBinaryString, s.base64);
        var h = new d(e, o, s);
        this.files[e] = h;
      }
      var i = e("./utf8"),
        u = e("./utils"),
        l = e("./stream/GenericWorker"),
        a = e("./stream/StreamHelper"),
        f = e("./defaults"),
        c = e("./compressedObject"),
        d = e("./zipObject"),
        o = e("./generate"),
        p = e("./nodejsUtils"),
        m = e("./nodejs/NodejsStreamInputAdapter"),
        _ = function (e) {
          "/" === e.slice(-1) && (e = e.substring(0, e.length - 1));
          var t = e.lastIndexOf("/");
          return 0 < t ? e.substring(0, t) : "";
        },
        g = function (e) {
          return "/" !== e.slice(-1) && (e += "/"), e;
        },
        b = function (e, t) {
          return t = void 0 !== t ? t : f.createFolders, e = g(e), this.files[e] || s.call(this, e, null, {
            dir: !0,
            createFolders: t
          }), this.files[e];
        };
      function h(e) {
        return "[object RegExp]" === Object.prototype.toString.call(e);
      }
      var n = {
        load: function () {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        },
        forEach: function (e) {
          var t, r, n;
          for (t in this.files) n = this.files[t], (r = t.slice(this.root.length, t.length)) && t.slice(0, this.root.length) === this.root && e(r, n);
        },
        filter: function (r) {
          var n = [];
          return this.forEach(function (e, t) {
            r(e, t) && n.push(t);
          }), n;
        },
        file: function (e, t, r) {
          if (1 !== arguments.length) return e = this.root + e, s.call(this, e, t, r), this;
          if (h(e)) {
            var n = e;
            return this.filter(function (e, t) {
              return !t.dir && n.test(e);
            });
          }
          var i = this.files[this.root + e];
          return i && !i.dir ? i : null;
        },
        folder: function (r) {
          if (!r) return this;
          if (h(r)) return this.filter(function (e, t) {
            return t.dir && r.test(e);
          });
          var e = this.root + r,
            t = b.call(this, e),
            n = this.clone();
          return n.root = t.name, n;
        },
        remove: function (r) {
          r = this.root + r;
          var e = this.files[r];
          if (e || ("/" !== r.slice(-1) && (r += "/"), e = this.files[r]), e && !e.dir) delete this.files[r];else for (var t = this.filter(function (e, t) {
              return t.name.slice(0, r.length) === r;
            }), n = 0; n < t.length; n++) delete this.files[t[n].name];
          return this;
        },
        generate: function () {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        },
        generateInternalStream: function (e) {
          var t,
            r = {};
          try {
            if ((r = u.extend(e || {}, {
              streamFiles: !1,
              compression: "STORE",
              compressionOptions: null,
              type: "",
              platform: "DOS",
              comment: null,
              mimeType: "application/zip",
              encodeFileName: i.utf8encode
            })).type = r.type.toLowerCase(), r.compression = r.compression.toUpperCase(), "binarystring" === r.type && (r.type = "string"), !r.type) throw new Error("No output type specified.");
            u.checkSupport(r.type), "darwin" !== r.platform && "freebsd" !== r.platform && "linux" !== r.platform && "sunos" !== r.platform || (r.platform = "UNIX"), "win32" === r.platform && (r.platform = "DOS");
            var n = r.comment || this.comment || "";
            t = o.generateWorker(this, r, n);
          } catch (e) {
            (t = new l("error")).error(e);
          }
          return new a(t, r.type || "string", r.mimeType);
        },
        generateAsync: function (e, t) {
          return this.generateInternalStream(e).accumulate(t);
        },
        generateNodeStream: function (e, t) {
          return (e = e || {}).type || (e.type = "nodebuffer"), this.generateInternalStream(e).toNodejsStream(t);
        }
      };
      t.exports = n;
    }, {
      "./compressedObject": 2,
      "./defaults": 5,
      "./generate": 9,
      "./nodejs/NodejsStreamInputAdapter": 12,
      "./nodejsUtils": 14,
      "./stream/GenericWorker": 28,
      "./stream/StreamHelper": 29,
      "./utf8": 31,
      "./utils": 32,
      "./zipObject": 35
    }],
    16: [function (e, t, r) {
      "use strict";

      t.exports = e("stream");
    }, {
      stream: void 0
    }],
    17: [function (e, t, r) {
      "use strict";

      var n = e("./DataReader");
      function i(e) {
        n.call(this, e);
        for (var t = 0; t < this.data.length; t++) e[t] = 255 & e[t];
      }
      e("../utils").inherits(i, n), i.prototype.byteAt = function (e) {
        return this.data[this.zero + e];
      }, i.prototype.lastIndexOfSignature = function (e) {
        for (var t = e.charCodeAt(0), r = e.charCodeAt(1), n = e.charCodeAt(2), i = e.charCodeAt(3), s = this.length - 4; 0 <= s; --s) if (this.data[s] === t && this.data[s + 1] === r && this.data[s + 2] === n && this.data[s + 3] === i) return s - this.zero;
        return -1;
      }, i.prototype.readAndCheckSignature = function (e) {
        var t = e.charCodeAt(0),
          r = e.charCodeAt(1),
          n = e.charCodeAt(2),
          i = e.charCodeAt(3),
          s = this.readData(4);
        return t === s[0] && r === s[1] && n === s[2] && i === s[3];
      }, i.prototype.readData = function (e) {
        if (this.checkOffset(e), 0 === e) return [];
        var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
        return this.index += e, t;
      }, t.exports = i;
    }, {
      "../utils": 32,
      "./DataReader": 18
    }],
    18: [function (e, t, r) {
      "use strict";

      var n = e("../utils");
      function i(e) {
        this.data = e, this.length = e.length, this.index = 0, this.zero = 0;
      }
      i.prototype = {
        checkOffset: function (e) {
          this.checkIndex(this.index + e);
        },
        checkIndex: function (e) {
          if (this.length < this.zero + e || e < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e + "). Corrupted zip ?");
        },
        setIndex: function (e) {
          this.checkIndex(e), this.index = e;
        },
        skip: function (e) {
          this.setIndex(this.index + e);
        },
        byteAt: function () {},
        readInt: function (e) {
          var t,
            r = 0;
          for (this.checkOffset(e), t = this.index + e - 1; t >= this.index; t--) r = (r << 8) + this.byteAt(t);
          return this.index += e, r;
        },
        readString: function (e) {
          return n.transformTo("string", this.readData(e));
        },
        readData: function () {},
        lastIndexOfSignature: function () {},
        readAndCheckSignature: function () {},
        readDate: function () {
          var e = this.readInt(4);
          return new Date(Date.UTC(1980 + (e >> 25 & 127), (e >> 21 & 15) - 1, e >> 16 & 31, e >> 11 & 31, e >> 5 & 63, (31 & e) << 1));
        }
      }, t.exports = i;
    }, {
      "../utils": 32
    }],
    19: [function (e, t, r) {
      "use strict";

      var n = e("./Uint8ArrayReader");
      function i(e) {
        n.call(this, e);
      }
      e("../utils").inherits(i, n), i.prototype.readData = function (e) {
        this.checkOffset(e);
        var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
        return this.index += e, t;
      }, t.exports = i;
    }, {
      "../utils": 32,
      "./Uint8ArrayReader": 21
    }],
    20: [function (e, t, r) {
      "use strict";

      var n = e("./DataReader");
      function i(e) {
        n.call(this, e);
      }
      e("../utils").inherits(i, n), i.prototype.byteAt = function (e) {
        return this.data.charCodeAt(this.zero + e);
      }, i.prototype.lastIndexOfSignature = function (e) {
        return this.data.lastIndexOf(e) - this.zero;
      }, i.prototype.readAndCheckSignature = function (e) {
        return e === this.readData(4);
      }, i.prototype.readData = function (e) {
        this.checkOffset(e);
        var t = this.data.slice(this.zero + this.index, this.zero + this.index + e);
        return this.index += e, t;
      }, t.exports = i;
    }, {
      "../utils": 32,
      "./DataReader": 18
    }],
    21: [function (e, t, r) {
      "use strict";

      var n = e("./ArrayReader");
      function i(e) {
        n.call(this, e);
      }
      e("../utils").inherits(i, n), i.prototype.readData = function (e) {
        if (this.checkOffset(e), 0 === e) return new Uint8Array(0);
        var t = this.data.subarray(this.zero + this.index, this.zero + this.index + e);
        return this.index += e, t;
      }, t.exports = i;
    }, {
      "../utils": 32,
      "./ArrayReader": 17
    }],
    22: [function (e, t, r) {
      "use strict";

      var n = e("../utils"),
        i = e("../support"),
        s = e("./ArrayReader"),
        a = e("./StringReader"),
        o = e("./NodeBufferReader"),
        h = e("./Uint8ArrayReader");
      t.exports = function (e) {
        var t = n.getTypeOf(e);
        return n.checkSupport(t), "string" !== t || i.uint8array ? "nodebuffer" === t ? new o(e) : i.uint8array ? new h(n.transformTo("uint8array", e)) : new s(n.transformTo("array", e)) : new a(e);
      };
    }, {
      "../support": 30,
      "../utils": 32,
      "./ArrayReader": 17,
      "./NodeBufferReader": 19,
      "./StringReader": 20,
      "./Uint8ArrayReader": 21
    }],
    23: [function (e, t, r) {
      "use strict";

      r.LOCAL_FILE_HEADER = "PK", r.CENTRAL_FILE_HEADER = "PK", r.CENTRAL_DIRECTORY_END = "PK", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK", r.ZIP64_CENTRAL_DIRECTORY_END = "PK", r.DATA_DESCRIPTOR = "PK\b";
    }, {}],
    24: [function (e, t, r) {
      "use strict";

      var n = e("./GenericWorker"),
        i = e("../utils");
      function s(e) {
        n.call(this, "ConvertWorker to " + e), this.destType = e;
      }
      i.inherits(s, n), s.prototype.processChunk = function (e) {
        this.push({
          data: i.transformTo(this.destType, e.data),
          meta: e.meta
        });
      }, t.exports = s;
    }, {
      "../utils": 32,
      "./GenericWorker": 28
    }],
    25: [function (e, t, r) {
      "use strict";

      var n = e("./GenericWorker"),
        i = e("../crc32");
      function s() {
        n.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
      }
      e("../utils").inherits(s, n), s.prototype.processChunk = function (e) {
        this.streamInfo.crc32 = i(e.data, this.streamInfo.crc32 || 0), this.push(e);
      }, t.exports = s;
    }, {
      "../crc32": 4,
      "../utils": 32,
      "./GenericWorker": 28
    }],
    26: [function (e, t, r) {
      "use strict";

      var n = e("../utils"),
        i = e("./GenericWorker");
      function s(e) {
        i.call(this, "DataLengthProbe for " + e), this.propName = e, this.withStreamInfo(e, 0);
      }
      n.inherits(s, i), s.prototype.processChunk = function (e) {
        if (e) {
          var t = this.streamInfo[this.propName] || 0;
          this.streamInfo[this.propName] = t + e.data.length;
        }
        i.prototype.processChunk.call(this, e);
      }, t.exports = s;
    }, {
      "../utils": 32,
      "./GenericWorker": 28
    }],
    27: [function (e, t, r) {
      "use strict";

      var n = e("../utils"),
        i = e("./GenericWorker");
      function s(e) {
        i.call(this, "DataWorker");
        var t = this;
        this.dataIsReady = !1, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = !1, e.then(function (e) {
          t.dataIsReady = !0, t.data = e, t.max = e && e.length || 0, t.type = n.getTypeOf(e), t.isPaused || t._tickAndRepeat();
        }, function (e) {
          t.error(e);
        });
      }
      n.inherits(s, i), s.prototype.cleanUp = function () {
        i.prototype.cleanUp.call(this), this.data = null;
      }, s.prototype.resume = function () {
        return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = !0, n.delay(this._tickAndRepeat, [], this)), !0);
      }, s.prototype._tickAndRepeat = function () {
        this._tickScheduled = !1, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = !0));
      }, s.prototype._tick = function () {
        if (this.isPaused || this.isFinished) return !1;
        var e = null,
          t = Math.min(this.max, this.index + 16384);
        if (this.index >= this.max) return this.end();
        switch (this.type) {
          case "string":
            e = this.data.substring(this.index, t);
            break;
          case "uint8array":
            e = this.data.subarray(this.index, t);
            break;
          case "array":
          case "nodebuffer":
            e = this.data.slice(this.index, t);
        }
        return this.index = t, this.push({
          data: e,
          meta: {
            percent: this.max ? this.index / this.max * 100 : 0
          }
        });
      }, t.exports = s;
    }, {
      "../utils": 32,
      "./GenericWorker": 28
    }],
    28: [function (e, t, r) {
      "use strict";

      function n(e) {
        this.name = e || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = !0, this.isFinished = !1, this.isLocked = !1, this._listeners = {
          data: [],
          end: [],
          error: []
        }, this.previous = null;
      }
      n.prototype = {
        push: function (e) {
          this.emit("data", e);
        },
        end: function () {
          if (this.isFinished) return !1;
          this.flush();
          try {
            this.emit("end"), this.cleanUp(), this.isFinished = !0;
          } catch (e) {
            this.emit("error", e);
          }
          return !0;
        },
        error: function (e) {
          return !this.isFinished && (this.isPaused ? this.generatedError = e : (this.isFinished = !0, this.emit("error", e), this.previous && this.previous.error(e), this.cleanUp()), !0);
        },
        on: function (e, t) {
          return this._listeners[e].push(t), this;
        },
        cleanUp: function () {
          this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
        },
        emit: function (e, t) {
          if (this._listeners[e]) for (var r = 0; r < this._listeners[e].length; r++) this._listeners[e][r].call(this, t);
        },
        pipe: function (e) {
          return e.registerPrevious(this);
        },
        registerPrevious: function (e) {
          if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
          this.streamInfo = e.streamInfo, this.mergeStreamInfo(), this.previous = e;
          var t = this;
          return e.on("data", function (e) {
            t.processChunk(e);
          }), e.on("end", function () {
            t.end();
          }), e.on("error", function (e) {
            t.error(e);
          }), this;
        },
        pause: function () {
          return !this.isPaused && !this.isFinished && (this.isPaused = !0, this.previous && this.previous.pause(), !0);
        },
        resume: function () {
          if (!this.isPaused || this.isFinished) return !1;
          var e = this.isPaused = !1;
          return this.generatedError && (this.error(this.generatedError), e = !0), this.previous && this.previous.resume(), !e;
        },
        flush: function () {},
        processChunk: function (e) {
          this.push(e);
        },
        withStreamInfo: function (e, t) {
          return this.extraStreamInfo[e] = t, this.mergeStreamInfo(), this;
        },
        mergeStreamInfo: function () {
          for (var e in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e) && (this.streamInfo[e] = this.extraStreamInfo[e]);
        },
        lock: function () {
          if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
          this.isLocked = !0, this.previous && this.previous.lock();
        },
        toString: function () {
          var e = "Worker " + this.name;
          return this.previous ? this.previous + " -> " + e : e;
        }
      }, t.exports = n;
    }, {}],
    29: [function (e, t, r) {
      "use strict";

      var h = e("../utils"),
        i = e("./ConvertWorker"),
        s = e("./GenericWorker"),
        u = e("../base64"),
        n = e("../support"),
        a = e("../external"),
        o = null;
      if (n.nodestream) try {
        o = e("../nodejs/NodejsStreamOutputAdapter");
      } catch (e) {}
      function l(e, o) {
        return new a.Promise(function (t, r) {
          var n = [],
            i = e._internalType,
            s = e._outputType,
            a = e._mimeType;
          e.on("data", function (e, t) {
            n.push(e), o && o(t);
          }).on("error", function (e) {
            n = [], r(e);
          }).on("end", function () {
            try {
              var e = function (e, t, r) {
                switch (e) {
                  case "blob":
                    return h.newBlob(h.transformTo("arraybuffer", t), r);
                  case "base64":
                    return u.encode(t);
                  default:
                    return h.transformTo(e, t);
                }
              }(s, function (e, t) {
                var r,
                  n = 0,
                  i = null,
                  s = 0;
                for (r = 0; r < t.length; r++) s += t[r].length;
                switch (e) {
                  case "string":
                    return t.join("");
                  case "array":
                    return Array.prototype.concat.apply([], t);
                  case "uint8array":
                    for (i = new Uint8Array(s), r = 0; r < t.length; r++) i.set(t[r], n), n += t[r].length;
                    return i;
                  case "nodebuffer":
                    return Buffer.concat(t);
                  default:
                    throw new Error("concat : unsupported type '" + e + "'");
                }
              }(i, n), a);
              t(e);
            } catch (e) {
              r(e);
            }
            n = [];
          }).resume();
        });
      }
      function f(e, t, r) {
        var n = t;
        switch (t) {
          case "blob":
          case "arraybuffer":
            n = "uint8array";
            break;
          case "base64":
            n = "string";
        }
        try {
          this._internalType = n, this._outputType = t, this._mimeType = r, h.checkSupport(n), this._worker = e.pipe(new i(n)), e.lock();
        } catch (e) {
          this._worker = new s("error"), this._worker.error(e);
        }
      }
      f.prototype = {
        accumulate: function (e) {
          return l(this, e);
        },
        on: function (e, t) {
          var r = this;
          return "data" === e ? this._worker.on(e, function (e) {
            t.call(r, e.data, e.meta);
          }) : this._worker.on(e, function () {
            h.delay(t, arguments, r);
          }), this;
        },
        resume: function () {
          return h.delay(this._worker.resume, [], this._worker), this;
        },
        pause: function () {
          return this._worker.pause(), this;
        },
        toNodejsStream: function (e) {
          if (h.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
          return new o(this, {
            objectMode: "nodebuffer" !== this._outputType
          }, e);
        }
      }, t.exports = f;
    }, {
      "../base64": 1,
      "../external": 6,
      "../nodejs/NodejsStreamOutputAdapter": 13,
      "../support": 30,
      "../utils": 32,
      "./ConvertWorker": 24,
      "./GenericWorker": 28
    }],
    30: [function (e, t, r) {
      "use strict";

      if (r.base64 = !0, r.array = !0, r.string = !0, r.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r.nodebuffer = "undefined" != typeof Buffer, r.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) r.blob = !1;else {
        var n = new ArrayBuffer(0);
        try {
          r.blob = 0 === new Blob([n], {
            type: "application/zip"
          }).size;
        } catch (e) {
          try {
            var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
            i.append(n), r.blob = 0 === i.getBlob("application/zip").size;
          } catch (e) {
            r.blob = !1;
          }
        }
      }
      try {
        r.nodestream = !!e("readable-stream").Readable;
      } catch (e) {
        r.nodestream = !1;
      }
    }, {
      "readable-stream": 16
    }],
    31: [function (e, t, s) {
      "use strict";

      for (var o = e("./utils"), h = e("./support"), r = e("./nodejsUtils"), n = e("./stream/GenericWorker"), u = new Array(256), i = 0; i < 256; i++) u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;
      u[254] = u[254] = 1;
      function a() {
        n.call(this, "utf-8 decode"), this.leftOver = null;
      }
      function l() {
        n.call(this, "utf-8 encode");
      }
      s.utf8encode = function (e) {
        return h.nodebuffer ? r.newBufferFrom(e, "utf-8") : function (e) {
          var t,
            r,
            n,
            i,
            s,
            a = e.length,
            o = 0;
          for (i = 0; i < a; i++) 55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
          for (t = h.uint8array ? new Uint8Array(o) : new Array(o), i = s = 0; s < o; i++) 55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), r < 128 ? t[s++] = r : (r < 2048 ? t[s++] = 192 | r >>> 6 : (r < 65536 ? t[s++] = 224 | r >>> 12 : (t[s++] = 240 | r >>> 18, t[s++] = 128 | r >>> 12 & 63), t[s++] = 128 | r >>> 6 & 63), t[s++] = 128 | 63 & r);
          return t;
        }(e);
      }, s.utf8decode = function (e) {
        return h.nodebuffer ? o.transformTo("nodebuffer", e).toString("utf-8") : function (e) {
          var t,
            r,
            n,
            i,
            s = e.length,
            a = new Array(2 * s);
          for (t = r = 0; t < s;) if ((n = e[t++]) < 128) a[r++] = n;else if (4 < (i = u[n])) a[r++] = 65533, t += i - 1;else {
            for (n &= 2 === i ? 31 : 3 === i ? 15 : 7; 1 < i && t < s;) n = n << 6 | 63 & e[t++], i--;
            1 < i ? a[r++] = 65533 : n < 65536 ? a[r++] = n : (n -= 65536, a[r++] = 55296 | n >> 10 & 1023, a[r++] = 56320 | 1023 & n);
          }
          return a.length !== r && (a.subarray ? a = a.subarray(0, r) : a.length = r), o.applyFromCharCode(a);
        }(e = o.transformTo(h.uint8array ? "uint8array" : "array", e));
      }, o.inherits(a, n), a.prototype.processChunk = function (e) {
        var t = o.transformTo(h.uint8array ? "uint8array" : "array", e.data);
        if (this.leftOver && this.leftOver.length) {
          if (h.uint8array) {
            var r = t;
            (t = new Uint8Array(r.length + this.leftOver.length)).set(this.leftOver, 0), t.set(r, this.leftOver.length);
          } else t = this.leftOver.concat(t);
          this.leftOver = null;
        }
        var n = function (e, t) {
            var r;
            for ((t = t || e.length) > e.length && (t = e.length), r = t - 1; 0 <= r && 128 == (192 & e[r]);) r--;
            return r < 0 ? t : 0 === r ? t : r + u[e[r]] > t ? r : t;
          }(t),
          i = t;
        n !== t.length && (h.uint8array ? (i = t.subarray(0, n), this.leftOver = t.subarray(n, t.length)) : (i = t.slice(0, n), this.leftOver = t.slice(n, t.length))), this.push({
          data: s.utf8decode(i),
          meta: e.meta
        });
      }, a.prototype.flush = function () {
        this.leftOver && this.leftOver.length && (this.push({
          data: s.utf8decode(this.leftOver),
          meta: {}
        }), this.leftOver = null);
      }, s.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function (e) {
        this.push({
          data: s.utf8encode(e.data),
          meta: e.meta
        });
      }, s.Utf8EncodeWorker = l;
    }, {
      "./nodejsUtils": 14,
      "./stream/GenericWorker": 28,
      "./support": 30,
      "./utils": 32
    }],
    32: [function (e, t, a) {
      "use strict";

      var o = e("./support"),
        h = e("./base64"),
        r = e("./nodejsUtils"),
        u = e("./external");
      function n(e) {
        return e;
      }
      function l(e, t) {
        for (var r = 0; r < e.length; ++r) t[r] = 255 & e.charCodeAt(r);
        return t;
      }
      e("setimmediate"), a.newBlob = function (t, r) {
        a.checkSupport("blob");
        try {
          return new Blob([t], {
            type: r
          });
        } catch (e) {
          try {
            var n = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
            return n.append(t), n.getBlob(r);
          } catch (e) {
            throw new Error("Bug : can't construct the Blob.");
          }
        }
      };
      var i = {
        stringifyByChunk: function (e, t, r) {
          var n = [],
            i = 0,
            s = e.length;
          if (s <= r) return String.fromCharCode.apply(null, e);
          for (; i < s;) "array" === t || "nodebuffer" === t ? n.push(String.fromCharCode.apply(null, e.slice(i, Math.min(i + r, s)))) : n.push(String.fromCharCode.apply(null, e.subarray(i, Math.min(i + r, s)))), i += r;
          return n.join("");
        },
        stringifyByChar: function (e) {
          for (var t = "", r = 0; r < e.length; r++) t += String.fromCharCode(e[r]);
          return t;
        },
        applyCanBeUsed: {
          uint8array: function () {
            try {
              return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
            } catch (e) {
              return !1;
            }
          }(),
          nodebuffer: function () {
            try {
              return o.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;
            } catch (e) {
              return !1;
            }
          }()
        }
      };
      function s(e) {
        var t = 65536,
          r = a.getTypeOf(e),
          n = !0;
        if ("uint8array" === r ? n = i.applyCanBeUsed.uint8array : "nodebuffer" === r && (n = i.applyCanBeUsed.nodebuffer), n) for (; 1 < t;) try {
          return i.stringifyByChunk(e, r, t);
        } catch (e) {
          t = Math.floor(t / 2);
        }
        return i.stringifyByChar(e);
      }
      function f(e, t) {
        for (var r = 0; r < e.length; r++) t[r] = e[r];
        return t;
      }
      a.applyFromCharCode = s;
      var c = {};
      c.string = {
        string: n,
        array: function (e) {
          return l(e, new Array(e.length));
        },
        arraybuffer: function (e) {
          return c.string.uint8array(e).buffer;
        },
        uint8array: function (e) {
          return l(e, new Uint8Array(e.length));
        },
        nodebuffer: function (e) {
          return l(e, r.allocBuffer(e.length));
        }
      }, c.array = {
        string: s,
        array: n,
        arraybuffer: function (e) {
          return new Uint8Array(e).buffer;
        },
        uint8array: function (e) {
          return new Uint8Array(e);
        },
        nodebuffer: function (e) {
          return r.newBufferFrom(e);
        }
      }, c.arraybuffer = {
        string: function (e) {
          return s(new Uint8Array(e));
        },
        array: function (e) {
          return f(new Uint8Array(e), new Array(e.byteLength));
        },
        arraybuffer: n,
        uint8array: function (e) {
          return new Uint8Array(e);
        },
        nodebuffer: function (e) {
          return r.newBufferFrom(new Uint8Array(e));
        }
      }, c.uint8array = {
        string: s,
        array: function (e) {
          return f(e, new Array(e.length));
        },
        arraybuffer: function (e) {
          return e.buffer;
        },
        uint8array: n,
        nodebuffer: function (e) {
          return r.newBufferFrom(e);
        }
      }, c.nodebuffer = {
        string: s,
        array: function (e) {
          return f(e, new Array(e.length));
        },
        arraybuffer: function (e) {
          return c.nodebuffer.uint8array(e).buffer;
        },
        uint8array: function (e) {
          return f(e, new Uint8Array(e.length));
        },
        nodebuffer: n
      }, a.transformTo = function (e, t) {
        if (t = t || "", !e) return t;
        a.checkSupport(e);
        var r = a.getTypeOf(t);
        return c[r][e](t);
      }, a.resolve = function (e) {
        for (var t = e.split("/"), r = [], n = 0; n < t.length; n++) {
          var i = t[n];
          "." === i || "" === i && 0 !== n && n !== t.length - 1 || (".." === i ? r.pop() : r.push(i));
        }
        return r.join("/");
      }, a.getTypeOf = function (e) {
        return "string" == typeof e ? "string" : "[object Array]" === Object.prototype.toString.call(e) ? "array" : o.nodebuffer && r.isBuffer(e) ? "nodebuffer" : o.uint8array && e instanceof Uint8Array ? "uint8array" : o.arraybuffer && e instanceof ArrayBuffer ? "arraybuffer" : void 0;
      }, a.checkSupport = function (e) {
        if (!o[e.toLowerCase()]) throw new Error(e + " is not supported by this platform");
      }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function (e) {
        var t,
          r,
          n = "";
        for (r = 0; r < (e || "").length; r++) n += "\\x" + ((t = e.charCodeAt(r)) < 16 ? "0" : "") + t.toString(16).toUpperCase();
        return n;
      }, a.delay = function (e, t, r) {
        setImmediate(function () {
          e.apply(r || null, t || []);
        });
      }, a.inherits = function (e, t) {
        function r() {}
        r.prototype = t.prototype, e.prototype = new r();
      }, a.extend = function () {
        var e,
          t,
          r = {};
        for (e = 0; e < arguments.length; e++) for (t in arguments[e]) Object.prototype.hasOwnProperty.call(arguments[e], t) && void 0 === r[t] && (r[t] = arguments[e][t]);
        return r;
      }, a.prepareContent = function (r, e, n, i, s) {
        return u.Promise.resolve(e).then(function (n) {
          return o.blob && (n instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(n))) && "undefined" != typeof FileReader ? new u.Promise(function (t, r) {
            var e = new FileReader();
            e.onload = function (e) {
              t(e.target.result);
            }, e.onerror = function (e) {
              r(e.target.error);
            }, e.readAsArrayBuffer(n);
          }) : n;
        }).then(function (e) {
          var t = a.getTypeOf(e);
          return t ? ("arraybuffer" === t ? e = a.transformTo("uint8array", e) : "string" === t && (s ? e = h.decode(e) : n && !0 !== i && (e = function (e) {
            return l(e, o.uint8array ? new Uint8Array(e.length) : new Array(e.length));
          }(e))), e) : u.Promise.reject(new Error("Can't read the data of '" + r + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
        });
      };
    }, {
      "./base64": 1,
      "./external": 6,
      "./nodejsUtils": 14,
      "./support": 30,
      setimmediate: 54
    }],
    33: [function (e, t, r) {
      "use strict";

      var n = e("./reader/readerFor"),
        i = e("./utils"),
        s = e("./signature"),
        a = e("./zipEntry"),
        o = e("./support");
      function h(e) {
        this.files = [], this.loadOptions = e;
      }
      h.prototype = {
        checkSignature: function (e) {
          if (!this.reader.readAndCheckSignature(e)) {
            this.reader.index -= 4;
            var t = this.reader.readString(4);
            throw new Error("Corrupted zip or bug: unexpected signature (" + i.pretty(t) + ", expected " + i.pretty(e) + ")");
          }
        },
        isSignature: function (e, t) {
          var r = this.reader.index;
          this.reader.setIndex(e);
          var n = this.reader.readString(4) === t;
          return this.reader.setIndex(r), n;
        },
        readBlockEndOfCentral: function () {
          this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
          var e = this.reader.readData(this.zipCommentLength),
            t = o.uint8array ? "uint8array" : "array",
            r = i.transformTo(t, e);
          this.zipComment = this.loadOptions.decodeFileName(r);
        },
        readBlockZip64EndOfCentral: function () {
          this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
          for (var e, t, r, n = this.zip64EndOfCentralSize - 44; 0 < n;) e = this.reader.readInt(2), t = this.reader.readInt(4), r = this.reader.readData(t), this.zip64ExtensibleData[e] = {
            id: e,
            length: t,
            value: r
          };
        },
        readBlockZip64EndOfCentralLocator: function () {
          if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
        },
        readLocalFiles: function () {
          var e, t;
          for (e = 0; e < this.files.length; e++) t = this.files[e], this.reader.setIndex(t.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), t.readLocalPart(this.reader), t.handleUTF8(), t.processAttributes();
        },
        readCentralDir: function () {
          var e;
          for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);) (e = new a({
            zip64: this.zip64
          }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e);
          if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
        },
        readEndOfCentral: function () {
          var e = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);
          if (e < 0) throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
          this.reader.setIndex(e);
          var t = e;
          if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {
            if (this.zip64 = !0, (e = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
            if (this.reader.setIndex(e), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
          }
          var r = this.centralDirOffset + this.centralDirSize;
          this.zip64 && (r += 20, r += 12 + this.zip64EndOfCentralSize);
          var n = t - r;
          if (0 < n) this.isSignature(t, s.CENTRAL_FILE_HEADER) || (this.reader.zero = n);else if (n < 0) throw new Error("Corrupted zip: missing " + Math.abs(n) + " bytes.");
        },
        prepareReader: function (e) {
          this.reader = n(e);
        },
        load: function (e) {
          this.prepareReader(e), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
        }
      }, t.exports = h;
    }, {
      "./reader/readerFor": 22,
      "./signature": 23,
      "./support": 30,
      "./utils": 32,
      "./zipEntry": 34
    }],
    34: [function (e, t, r) {
      "use strict";

      var n = e("./reader/readerFor"),
        s = e("./utils"),
        i = e("./compressedObject"),
        a = e("./crc32"),
        o = e("./utf8"),
        h = e("./compressions"),
        u = e("./support");
      function l(e, t) {
        this.options = e, this.loadOptions = t;
      }
      l.prototype = {
        isEncrypted: function () {
          return 1 == (1 & this.bitFlag);
        },
        useUTF8: function () {
          return 2048 == (2048 & this.bitFlag);
        },
        readLocalPart: function (e) {
          var t, r;
          if (e.skip(22), this.fileNameLength = e.readInt(2), r = e.readInt(2), this.fileName = e.readData(this.fileNameLength), e.skip(r), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
          if (null === (t = function (e) {
            for (var t in h) if (Object.prototype.hasOwnProperty.call(h, t) && h[t].magic === e) return h[t];
            return null;
          }(this.compressionMethod))) throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
          this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t, e.readData(this.compressedSize));
        },
        readCentralPart: function (e) {
          this.versionMadeBy = e.readInt(2), e.skip(2), this.bitFlag = e.readInt(2), this.compressionMethod = e.readString(2), this.date = e.readDate(), this.crc32 = e.readInt(4), this.compressedSize = e.readInt(4), this.uncompressedSize = e.readInt(4);
          var t = e.readInt(2);
          if (this.extraFieldsLength = e.readInt(2), this.fileCommentLength = e.readInt(2), this.diskNumberStart = e.readInt(2), this.internalFileAttributes = e.readInt(2), this.externalFileAttributes = e.readInt(4), this.localHeaderOffset = e.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
          e.skip(t), this.readExtraFields(e), this.parseZIP64ExtraField(e), this.fileComment = e.readData(this.fileCommentLength);
        },
        processAttributes: function () {
          this.unixPermissions = null, this.dosPermissions = null;
          var e = this.versionMadeBy >> 8;
          this.dir = !!(16 & this.externalFileAttributes), 0 == e && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = !0);
        },
        parseZIP64ExtraField: function () {
          if (this.extraFields[1]) {
            var e = n(this.extraFields[1].value);
            this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e.readInt(4));
          }
        },
        readExtraFields: function (e) {
          var t,
            r,
            n,
            i = e.index + this.extraFieldsLength;
          for (this.extraFields || (this.extraFields = {}); e.index + 4 < i;) t = e.readInt(2), r = e.readInt(2), n = e.readData(r), this.extraFields[t] = {
            id: t,
            length: r,
            value: n
          };
          e.setIndex(i);
        },
        handleUTF8: function () {
          var e = u.uint8array ? "uint8array" : "array";
          if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);else {
            var t = this.findExtraFieldUnicodePath();
            if (null !== t) this.fileNameStr = t;else {
              var r = s.transformTo(e, this.fileName);
              this.fileNameStr = this.loadOptions.decodeFileName(r);
            }
            var n = this.findExtraFieldUnicodeComment();
            if (null !== n) this.fileCommentStr = n;else {
              var i = s.transformTo(e, this.fileComment);
              this.fileCommentStr = this.loadOptions.decodeFileName(i);
            }
          }
        },
        findExtraFieldUnicodePath: function () {
          var e = this.extraFields[28789];
          if (e) {
            var t = n(e.value);
            return 1 !== t.readInt(1) ? null : a(this.fileName) !== t.readInt(4) ? null : o.utf8decode(t.readData(e.length - 5));
          }
          return null;
        },
        findExtraFieldUnicodeComment: function () {
          var e = this.extraFields[25461];
          if (e) {
            var t = n(e.value);
            return 1 !== t.readInt(1) ? null : a(this.fileComment) !== t.readInt(4) ? null : o.utf8decode(t.readData(e.length - 5));
          }
          return null;
        }
      }, t.exports = l;
    }, {
      "./compressedObject": 2,
      "./compressions": 3,
      "./crc32": 4,
      "./reader/readerFor": 22,
      "./support": 30,
      "./utf8": 31,
      "./utils": 32
    }],
    35: [function (e, t, r) {
      "use strict";

      function n(e, t, r) {
        this.name = e, this.dir = r.dir, this.date = r.date, this.comment = r.comment, this.unixPermissions = r.unixPermissions, this.dosPermissions = r.dosPermissions, this._data = t, this._dataBinary = r.binary, this.options = {
          compression: r.compression,
          compressionOptions: r.compressionOptions
        };
      }
      var s = e("./stream/StreamHelper"),
        i = e("./stream/DataWorker"),
        a = e("./utf8"),
        o = e("./compressedObject"),
        h = e("./stream/GenericWorker");
      n.prototype = {
        internalStream: function (e) {
          var t = null,
            r = "string";
          try {
            if (!e) throw new Error("No output type specified.");
            var n = "string" === (r = e.toLowerCase()) || "text" === r;
            "binarystring" !== r && "text" !== r || (r = "string"), t = this._decompressWorker();
            var i = !this._dataBinary;
            i && !n && (t = t.pipe(new a.Utf8EncodeWorker())), !i && n && (t = t.pipe(new a.Utf8DecodeWorker()));
          } catch (e) {
            (t = new h("error")).error(e);
          }
          return new s(t, r, "");
        },
        async: function (e, t) {
          return this.internalStream(e).accumulate(t);
        },
        nodeStream: function (e, t) {
          return this.internalStream(e || "nodebuffer").toNodejsStream(t);
        },
        _compressWorker: function (e, t) {
          if (this._data instanceof o && this._data.compression.magic === e.magic) return this._data.getCompressedWorker();
          var r = this._decompressWorker();
          return this._dataBinary || (r = r.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r, e, t);
        },
        _decompressWorker: function () {
          return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);
        }
      };
      for (var u = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l = function () {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        }, f = 0; f < u.length; f++) n.prototype[u[f]] = l;
      t.exports = n;
    }, {
      "./compressedObject": 2,
      "./stream/DataWorker": 27,
      "./stream/GenericWorker": 28,
      "./stream/StreamHelper": 29,
      "./utf8": 31
    }],
    36: [function (e, l, t) {
      (function (t) {
        "use strict";

        var r,
          n,
          e = t.MutationObserver || t.WebKitMutationObserver;
        if (e) {
          var i = 0,
            s = new e(u),
            a = t.document.createTextNode("");
          s.observe(a, {
            characterData: !0
          }), r = function () {
            a.data = i = ++i % 2;
          };
        } else if (t.setImmediate || void 0 === t.MessageChannel) r = "document" in t && "onreadystatechange" in t.document.createElement("script") ? function () {
          var e = t.document.createElement("script");
          e.onreadystatechange = function () {
            u(), e.onreadystatechange = null, e.parentNode.removeChild(e), e = null;
          }, t.document.documentElement.appendChild(e);
        } : function () {
          setTimeout(u, 0);
        };else {
          var o = new t.MessageChannel();
          o.port1.onmessage = u, r = function () {
            o.port2.postMessage(0);
          };
        }
        var h = [];
        function u() {
          var e, t;
          n = !0;
          for (var r = h.length; r;) {
            for (t = h, h = [], e = -1; ++e < r;) t[e]();
            r = h.length;
          }
          n = !1;
        }
        l.exports = function (e) {
          1 !== h.push(e) || n || r();
        };
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    37: [function (e, t, r) {
      "use strict";

      var i = e("immediate");
      function u() {}
      var l = {},
        s = ["REJECTED"],
        a = ["FULFILLED"],
        n = ["PENDING"];
      function o(e) {
        if ("function" != typeof e) throw new TypeError("resolver must be a function");
        this.state = n, this.queue = [], this.outcome = void 0, e !== u && d(this, e);
      }
      function h(e, t, r) {
        this.promise = e, "function" == typeof t && (this.onFulfilled = t, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r && (this.onRejected = r, this.callRejected = this.otherCallRejected);
      }
      function f(t, r, n) {
        i(function () {
          var e;
          try {
            e = r(n);
          } catch (e) {
            return l.reject(t, e);
          }
          e === t ? l.reject(t, new TypeError("Cannot resolve promise with itself")) : l.resolve(t, e);
        });
      }
      function c(e) {
        var t = e && e.then;
        if (e && ("object" == typeof e || "function" == typeof e) && "function" == typeof t) return function () {
          t.apply(e, arguments);
        };
      }
      function d(t, e) {
        var r = !1;
        function n(e) {
          r || (r = !0, l.reject(t, e));
        }
        function i(e) {
          r || (r = !0, l.resolve(t, e));
        }
        var s = p(function () {
          e(i, n);
        });
        "error" === s.status && n(s.value);
      }
      function p(e, t) {
        var r = {};
        try {
          r.value = e(t), r.status = "success";
        } catch (e) {
          r.status = "error", r.value = e;
        }
        return r;
      }
      (t.exports = o).prototype.finally = function (t) {
        if ("function" != typeof t) return this;
        var r = this.constructor;
        return this.then(function (e) {
          return r.resolve(t()).then(function () {
            return e;
          });
        }, function (e) {
          return r.resolve(t()).then(function () {
            throw e;
          });
        });
      }, o.prototype.catch = function (e) {
        return this.then(null, e);
      }, o.prototype.then = function (e, t) {
        if ("function" != typeof e && this.state === a || "function" != typeof t && this.state === s) return this;
        var r = new this.constructor(u);
        this.state !== n ? f(r, this.state === a ? e : t, this.outcome) : this.queue.push(new h(r, e, t));
        return r;
      }, h.prototype.callFulfilled = function (e) {
        l.resolve(this.promise, e);
      }, h.prototype.otherCallFulfilled = function (e) {
        f(this.promise, this.onFulfilled, e);
      }, h.prototype.callRejected = function (e) {
        l.reject(this.promise, e);
      }, h.prototype.otherCallRejected = function (e) {
        f(this.promise, this.onRejected, e);
      }, l.resolve = function (e, t) {
        var r = p(c, t);
        if ("error" === r.status) return l.reject(e, r.value);
        var n = r.value;
        if (n) d(e, n);else {
          e.state = a, e.outcome = t;
          for (var i = -1, s = e.queue.length; ++i < s;) e.queue[i].callFulfilled(t);
        }
        return e;
      }, l.reject = function (e, t) {
        e.state = s, e.outcome = t;
        for (var r = -1, n = e.queue.length; ++r < n;) e.queue[r].callRejected(t);
        return e;
      }, o.resolve = function (e) {
        if (e instanceof this) return e;
        return l.resolve(new this(u), e);
      }, o.reject = function (e) {
        var t = new this(u);
        return l.reject(t, e);
      }, o.all = function (e) {
        var r = this;
        if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
        var n = e.length,
          i = !1;
        if (!n) return this.resolve([]);
        var s = new Array(n),
          a = 0,
          t = -1,
          o = new this(u);
        for (; ++t < n;) h(e[t], t);
        return o;
        function h(e, t) {
          r.resolve(e).then(function (e) {
            s[t] = e, ++a !== n || i || (i = !0, l.resolve(o, s));
          }, function (e) {
            i || (i = !0, l.reject(o, e));
          });
        }
      }, o.race = function (e) {
        var t = this;
        if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
        var r = e.length,
          n = !1;
        if (!r) return this.resolve([]);
        var i = -1,
          s = new this(u);
        for (; ++i < r;) a = e[i], t.resolve(a).then(function (e) {
          n || (n = !0, l.resolve(s, e));
        }, function (e) {
          n || (n = !0, l.reject(s, e));
        });
        var a;
        return s;
      };
    }, {
      immediate: 36
    }],
    38: [function (e, t, r) {
      "use strict";

      var n = {};
      (0, e("./lib/utils/common").assign)(n, e("./lib/deflate"), e("./lib/inflate"), e("./lib/zlib/constants")), t.exports = n;
    }, {
      "./lib/deflate": 39,
      "./lib/inflate": 40,
      "./lib/utils/common": 41,
      "./lib/zlib/constants": 44
    }],
    39: [function (e, t, r) {
      "use strict";

      var a = e("./zlib/deflate"),
        o = e("./utils/common"),
        h = e("./utils/strings"),
        i = e("./zlib/messages"),
        s = e("./zlib/zstream"),
        u = Object.prototype.toString,
        l = 0,
        f = -1,
        c = 0,
        d = 8;
      function p(e) {
        if (!(this instanceof p)) return new p(e);
        this.options = o.assign({
          level: f,
          method: d,
          chunkSize: 16384,
          windowBits: 15,
          memLevel: 8,
          strategy: c,
          to: ""
        }, e || {});
        var t = this.options;
        t.raw && 0 < t.windowBits ? t.windowBits = -t.windowBits : t.gzip && 0 < t.windowBits && t.windowBits < 16 && (t.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new s(), this.strm.avail_out = 0;
        var r = a.deflateInit2(this.strm, t.level, t.method, t.windowBits, t.memLevel, t.strategy);
        if (r !== l) throw new Error(i[r]);
        if (t.header && a.deflateSetHeader(this.strm, t.header), t.dictionary) {
          var n;
          if (n = "string" == typeof t.dictionary ? h.string2buf(t.dictionary) : "[object ArrayBuffer]" === u.call(t.dictionary) ? new Uint8Array(t.dictionary) : t.dictionary, (r = a.deflateSetDictionary(this.strm, n)) !== l) throw new Error(i[r]);
          this._dict_set = !0;
        }
      }
      function n(e, t) {
        var r = new p(t);
        if (r.push(e, !0), r.err) throw r.msg || i[r.err];
        return r.result;
      }
      p.prototype.push = function (e, t) {
        var r,
          n,
          i = this.strm,
          s = this.options.chunkSize;
        if (this.ended) return !1;
        n = t === ~~t ? t : !0 === t ? 4 : 0, "string" == typeof e ? i.input = h.string2buf(e) : "[object ArrayBuffer]" === u.call(e) ? i.input = new Uint8Array(e) : i.input = e, i.next_in = 0, i.avail_in = i.input.length;
        do {
          if (0 === i.avail_out && (i.output = new o.Buf8(s), i.next_out = 0, i.avail_out = s), 1 !== (r = a.deflate(i, n)) && r !== l) return this.onEnd(r), !(this.ended = !0);
          0 !== i.avail_out && (0 !== i.avail_in || 4 !== n && 2 !== n) || ("string" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i.output, i.next_out))) : this.onData(o.shrinkBuf(i.output, i.next_out)));
        } while ((0 < i.avail_in || 0 === i.avail_out) && 1 !== r);
        return 4 === n ? (r = a.deflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === l) : 2 !== n || (this.onEnd(l), !(i.avail_out = 0));
      }, p.prototype.onData = function (e) {
        this.chunks.push(e);
      }, p.prototype.onEnd = function (e) {
        e === l && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
      }, r.Deflate = p, r.deflate = n, r.deflateRaw = function (e, t) {
        return (t = t || {}).raw = !0, n(e, t);
      }, r.gzip = function (e, t) {
        return (t = t || {}).gzip = !0, n(e, t);
      };
    }, {
      "./utils/common": 41,
      "./utils/strings": 42,
      "./zlib/deflate": 46,
      "./zlib/messages": 51,
      "./zlib/zstream": 53
    }],
    40: [function (e, t, r) {
      "use strict";

      var c = e("./zlib/inflate"),
        d = e("./utils/common"),
        p = e("./utils/strings"),
        m = e("./zlib/constants"),
        n = e("./zlib/messages"),
        i = e("./zlib/zstream"),
        s = e("./zlib/gzheader"),
        _ = Object.prototype.toString;
      function a(e) {
        if (!(this instanceof a)) return new a(e);
        this.options = d.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ""
        }, e || {});
        var t = this.options;
        t.raw && 0 <= t.windowBits && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits && (t.windowBits = -15)), !(0 <= t.windowBits && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), 15 < t.windowBits && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;
        var r = c.inflateInit2(this.strm, t.windowBits);
        if (r !== m.Z_OK) throw new Error(n[r]);
        this.header = new s(), c.inflateGetHeader(this.strm, this.header);
      }
      function o(e, t) {
        var r = new a(t);
        if (r.push(e, !0), r.err) throw r.msg || n[r.err];
        return r.result;
      }
      a.prototype.push = function (e, t) {
        var r,
          n,
          i,
          s,
          a,
          o,
          h = this.strm,
          u = this.options.chunkSize,
          l = this.options.dictionary,
          f = !1;
        if (this.ended) return !1;
        n = t === ~~t ? t : !0 === t ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof e ? h.input = p.binstring2buf(e) : "[object ArrayBuffer]" === _.call(e) ? h.input = new Uint8Array(e) : h.input = e, h.next_in = 0, h.avail_in = h.input.length;
        do {
          if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o = "string" == typeof l ? p.string2buf(l) : "[object ArrayBuffer]" === _.call(l) ? new Uint8Array(l) : l, r = c.inflateSetDictionary(this.strm, o)), r === m.Z_BUF_ERROR && !0 === f && (r = m.Z_OK, f = !1), r !== m.Z_STREAM_END && r !== m.Z_OK) return this.onEnd(r), !(this.ended = !0);
          h.next_out && (0 !== h.avail_out && r !== m.Z_STREAM_END && (0 !== h.avail_in || n !== m.Z_FINISH && n !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i = p.utf8border(h.output, h.next_out), s = h.next_out - i, a = p.buf2string(h.output, i), h.next_out = s, h.avail_out = u - s, s && d.arraySet(h.output, h.output, i, s, 0), this.onData(a)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = !0);
        } while ((0 < h.avail_in || 0 === h.avail_out) && r !== m.Z_STREAM_END);
        return r === m.Z_STREAM_END && (n = m.Z_FINISH), n === m.Z_FINISH ? (r = c.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === m.Z_OK) : n !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));
      }, a.prototype.onData = function (e) {
        this.chunks.push(e);
      }, a.prototype.onEnd = function (e) {
        e === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
      }, r.Inflate = a, r.inflate = o, r.inflateRaw = function (e, t) {
        return (t = t || {}).raw = !0, o(e, t);
      }, r.ungzip = o;
    }, {
      "./utils/common": 41,
      "./utils/strings": 42,
      "./zlib/constants": 44,
      "./zlib/gzheader": 47,
      "./zlib/inflate": 49,
      "./zlib/messages": 51,
      "./zlib/zstream": 53
    }],
    41: [function (e, t, r) {
      "use strict";

      var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
      r.assign = function (e) {
        for (var t = Array.prototype.slice.call(arguments, 1); t.length;) {
          var r = t.shift();
          if (r) {
            if ("object" != typeof r) throw new TypeError(r + "must be non-object");
            for (var n in r) r.hasOwnProperty(n) && (e[n] = r[n]);
          }
        }
        return e;
      }, r.shrinkBuf = function (e, t) {
        return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e);
      };
      var i = {
          arraySet: function (e, t, r, n, i) {
            if (t.subarray && e.subarray) e.set(t.subarray(r, r + n), i);else for (var s = 0; s < n; s++) e[i + s] = t[r + s];
          },
          flattenChunks: function (e) {
            var t, r, n, i, s, a;
            for (t = n = 0, r = e.length; t < r; t++) n += e[t].length;
            for (a = new Uint8Array(n), t = i = 0, r = e.length; t < r; t++) s = e[t], a.set(s, i), i += s.length;
            return a;
          }
        },
        s = {
          arraySet: function (e, t, r, n, i) {
            for (var s = 0; s < n; s++) e[i + s] = t[r + s];
          },
          flattenChunks: function (e) {
            return [].concat.apply([], e);
          }
        };
      r.setTyped = function (e) {
        e ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, i)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, s));
      }, r.setTyped(n);
    }, {}],
    42: [function (e, t, r) {
      "use strict";

      var h = e("./common"),
        i = !0,
        s = !0;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch (e) {
        i = !1;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e) {
        s = !1;
      }
      for (var u = new h.Buf8(256), n = 0; n < 256; n++) u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;
      function l(e, t) {
        if (t < 65537 && (e.subarray && s || !e.subarray && i)) return String.fromCharCode.apply(null, h.shrinkBuf(e, t));
        for (var r = "", n = 0; n < t; n++) r += String.fromCharCode(e[n]);
        return r;
      }
      u[254] = u[254] = 1, r.string2buf = function (e) {
        var t,
          r,
          n,
          i,
          s,
          a = e.length,
          o = 0;
        for (i = 0; i < a; i++) 55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
        for (t = new h.Buf8(o), i = s = 0; s < o; i++) 55296 == (64512 & (r = e.charCodeAt(i))) && i + 1 < a && 56320 == (64512 & (n = e.charCodeAt(i + 1))) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++), r < 128 ? t[s++] = r : (r < 2048 ? t[s++] = 192 | r >>> 6 : (r < 65536 ? t[s++] = 224 | r >>> 12 : (t[s++] = 240 | r >>> 18, t[s++] = 128 | r >>> 12 & 63), t[s++] = 128 | r >>> 6 & 63), t[s++] = 128 | 63 & r);
        return t;
      }, r.buf2binstring = function (e) {
        return l(e, e.length);
      }, r.binstring2buf = function (e) {
        for (var t = new h.Buf8(e.length), r = 0, n = t.length; r < n; r++) t[r] = e.charCodeAt(r);
        return t;
      }, r.buf2string = function (e, t) {
        var r,
          n,
          i,
          s,
          a = t || e.length,
          o = new Array(2 * a);
        for (r = n = 0; r < a;) if ((i = e[r++]) < 128) o[n++] = i;else if (4 < (s = u[i])) o[n++] = 65533, r += s - 1;else {
          for (i &= 2 === s ? 31 : 3 === s ? 15 : 7; 1 < s && r < a;) i = i << 6 | 63 & e[r++], s--;
          1 < s ? o[n++] = 65533 : i < 65536 ? o[n++] = i : (i -= 65536, o[n++] = 55296 | i >> 10 & 1023, o[n++] = 56320 | 1023 & i);
        }
        return l(o, n);
      }, r.utf8border = function (e, t) {
        var r;
        for ((t = t || e.length) > e.length && (t = e.length), r = t - 1; 0 <= r && 128 == (192 & e[r]);) r--;
        return r < 0 ? t : 0 === r ? t : r + u[e[r]] > t ? r : t;
      };
    }, {
      "./common": 41
    }],
    43: [function (e, t, r) {
      "use strict";

      t.exports = function (e, t, r, n) {
        for (var i = 65535 & e | 0, s = e >>> 16 & 65535 | 0, a = 0; 0 !== r;) {
          for (r -= a = 2e3 < r ? 2e3 : r; s = s + (i = i + t[n++] | 0) | 0, --a;);
          i %= 65521, s %= 65521;
        }
        return i | s << 16 | 0;
      };
    }, {}],
    44: [function (e, t, r) {
      "use strict";

      t.exports = {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_BUF_ERROR: -5,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        Z_BINARY: 0,
        Z_TEXT: 1,
        Z_UNKNOWN: 2,
        Z_DEFLATED: 8
      };
    }, {}],
    45: [function (e, t, r) {
      "use strict";

      var o = function () {
        for (var e, t = [], r = 0; r < 256; r++) {
          e = r;
          for (var n = 0; n < 8; n++) e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
          t[r] = e;
        }
        return t;
      }();
      t.exports = function (e, t, r, n) {
        var i = o,
          s = n + r;
        e ^= -1;
        for (var a = n; a < s; a++) e = e >>> 8 ^ i[255 & (e ^ t[a])];
        return -1 ^ e;
      };
    }, {}],
    46: [function (e, t, r) {
      "use strict";

      var h,
        c = e("../utils/common"),
        u = e("./trees"),
        d = e("./adler32"),
        p = e("./crc32"),
        n = e("./messages"),
        l = 0,
        f = 4,
        m = 0,
        _ = -2,
        g = -1,
        b = 4,
        i = 2,
        v = 8,
        y = 9,
        s = 286,
        a = 30,
        o = 19,
        w = 2 * s + 1,
        k = 15,
        x = 3,
        S = 258,
        z = S + x + 1,
        C = 42,
        E = 113,
        A = 1,
        I = 2,
        O = 3,
        B = 4;
      function R(e, t) {
        return e.msg = n[t], t;
      }
      function T(e) {
        return (e << 1) - (4 < e ? 9 : 0);
      }
      function D(e) {
        for (var t = e.length; 0 <= --t;) e[t] = 0;
      }
      function F(e) {
        var t = e.state,
          r = t.pending;
        r > e.avail_out && (r = e.avail_out), 0 !== r && (c.arraySet(e.output, t.pending_buf, t.pending_out, r, e.next_out), e.next_out += r, t.pending_out += r, e.total_out += r, e.avail_out -= r, t.pending -= r, 0 === t.pending && (t.pending_out = 0));
      }
      function N(e, t) {
        u._tr_flush_block(e, 0 <= e.block_start ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, F(e.strm);
      }
      function U(e, t) {
        e.pending_buf[e.pending++] = t;
      }
      function P(e, t) {
        e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
      }
      function L(e, t) {
        var r,
          n,
          i = e.max_chain_length,
          s = e.strstart,
          a = e.prev_length,
          o = e.nice_match,
          h = e.strstart > e.w_size - z ? e.strstart - (e.w_size - z) : 0,
          u = e.window,
          l = e.w_mask,
          f = e.prev,
          c = e.strstart + S,
          d = u[s + a - 1],
          p = u[s + a];
        e.prev_length >= e.good_match && (i >>= 2), o > e.lookahead && (o = e.lookahead);
        do {
          if (u[(r = t) + a] === p && u[r + a - 1] === d && u[r] === u[s] && u[++r] === u[s + 1]) {
            s += 2, r++;
            do {} while (u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && s < c);
            if (n = S - (c - s), s = c - S, a < n) {
              if (e.match_start = t, o <= (a = n)) break;
              d = u[s + a - 1], p = u[s + a];
            }
          }
        } while ((t = f[t & l]) > h && 0 != --i);
        return a <= e.lookahead ? a : e.lookahead;
      }
      function j(e) {
        var t,
          r,
          n,
          i,
          s,
          a,
          o,
          h,
          u,
          l,
          f = e.w_size;
        do {
          if (i = e.window_size - e.lookahead - e.strstart, e.strstart >= f + (f - z)) {
            for (c.arraySet(e.window, e.window, f, f, 0), e.match_start -= f, e.strstart -= f, e.block_start -= f, t = r = e.hash_size; n = e.head[--t], e.head[t] = f <= n ? n - f : 0, --r;);
            for (t = r = f; n = e.prev[--t], e.prev[t] = f <= n ? n - f : 0, --r;);
            i += f;
          }
          if (0 === e.strm.avail_in) break;
          if (a = e.strm, o = e.window, h = e.strstart + e.lookahead, u = i, l = void 0, l = a.avail_in, u < l && (l = u), r = 0 === l ? 0 : (a.avail_in -= l, c.arraySet(o, a.input, a.next_in, l, h), 1 === a.state.wrap ? a.adler = d(a.adler, o, l, h) : 2 === a.state.wrap && (a.adler = p(a.adler, o, l, h)), a.next_in += l, a.total_in += l, l), e.lookahead += r, e.lookahead + e.insert >= x) for (s = e.strstart - e.insert, e.ins_h = e.window[s], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[s + 1]) & e.hash_mask; e.insert && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[s + x - 1]) & e.hash_mask, e.prev[s & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = s, s++, e.insert--, !(e.lookahead + e.insert < x)););
        } while (e.lookahead < z && 0 !== e.strm.avail_in);
      }
      function Z(e, t) {
        for (var r, n;;) {
          if (e.lookahead < z) {
            if (j(e), e.lookahead < z && t === l) return A;
            if (0 === e.lookahead) break;
          }
          if (r = 0, e.lookahead >= x && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== r && e.strstart - r <= e.w_size - z && (e.match_length = L(e, r)), e.match_length >= x) {
            if (n = u._tr_tally(e, e.strstart - e.match_start, e.match_length - x), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= x) {
              for (e.match_length--; e.strstart++, e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart, 0 != --e.match_length;);
              e.strstart++;
            } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + 1]) & e.hash_mask;
          } else n = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;
          if (n && (N(e, !1), 0 === e.strm.avail_out)) return A;
        }
        return e.insert = e.strstart < x - 1 ? e.strstart : x - 1, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
      }
      function W(e, t) {
        for (var r, n, i;;) {
          if (e.lookahead < z) {
            if (j(e), e.lookahead < z && t === l) return A;
            if (0 === e.lookahead) break;
          }
          if (r = 0, e.lookahead >= x && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = x - 1, 0 !== r && e.prev_length < e.max_lazy_match && e.strstart - r <= e.w_size - z && (e.match_length = L(e, r), e.match_length <= 5 && (1 === e.strategy || e.match_length === x && 4096 < e.strstart - e.match_start) && (e.match_length = x - 1)), e.prev_length >= x && e.match_length <= e.prev_length) {
            for (i = e.strstart + e.lookahead - x, n = u._tr_tally(e, e.strstart - 1 - e.prev_match, e.prev_length - x), e.lookahead -= e.prev_length - 1, e.prev_length -= 2; ++e.strstart <= i && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + x - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 != --e.prev_length;);
            if (e.match_available = 0, e.match_length = x - 1, e.strstart++, n && (N(e, !1), 0 === e.strm.avail_out)) return A;
          } else if (e.match_available) {
            if ((n = u._tr_tally(e, 0, e.window[e.strstart - 1])) && N(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return A;
          } else e.match_available = 1, e.strstart++, e.lookahead--;
        }
        return e.match_available && (n = u._tr_tally(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < x - 1 ? e.strstart : x - 1, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
      }
      function M(e, t, r, n, i) {
        this.good_length = e, this.max_lazy = t, this.nice_length = r, this.max_chain = n, this.func = i;
      }
      function H() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
      function G(e) {
        var t;
        return e && e.state ? (e.total_in = e.total_out = 0, e.data_type = i, (t = e.state).pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = t.wrap ? C : E, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = l, u._tr_init(t), m) : R(e, _);
      }
      function K(e) {
        var t = G(e);
        return t === m && function (e) {
          e.window_size = 2 * e.w_size, D(e.head), e.max_lazy_match = h[e.level].max_lazy, e.good_match = h[e.level].good_length, e.nice_match = h[e.level].nice_length, e.max_chain_length = h[e.level].max_chain, e.strstart = 0, e.block_start = 0, e.lookahead = 0, e.insert = 0, e.match_length = e.prev_length = x - 1, e.match_available = 0, e.ins_h = 0;
        }(e.state), t;
      }
      function Y(e, t, r, n, i, s) {
        if (!e) return _;
        var a = 1;
        if (t === g && (t = 6), n < 0 ? (a = 0, n = -n) : 15 < n && (a = 2, n -= 16), i < 1 || y < i || r !== v || n < 8 || 15 < n || t < 0 || 9 < t || s < 0 || b < s) return R(e, _);
        8 === n && (n = 9);
        var o = new H();
        return (e.state = o).strm = e, o.wrap = a, o.gzhead = null, o.w_bits = n, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = i + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + x - 1) / x), o.window = new c.Buf8(2 * o.w_size), o.head = new c.Buf16(o.hash_size), o.prev = new c.Buf16(o.w_size), o.lit_bufsize = 1 << i + 6, o.pending_buf_size = 4 * o.lit_bufsize, o.pending_buf = new c.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = 3 * o.lit_bufsize, o.level = t, o.strategy = s, o.method = r, K(e);
      }
      h = [new M(0, 0, 0, 0, function (e, t) {
        var r = 65535;
        for (r > e.pending_buf_size - 5 && (r = e.pending_buf_size - 5);;) {
          if (e.lookahead <= 1) {
            if (j(e), 0 === e.lookahead && t === l) return A;
            if (0 === e.lookahead) break;
          }
          e.strstart += e.lookahead, e.lookahead = 0;
          var n = e.block_start + r;
          if ((0 === e.strstart || e.strstart >= n) && (e.lookahead = e.strstart - n, e.strstart = n, N(e, !1), 0 === e.strm.avail_out)) return A;
          if (e.strstart - e.block_start >= e.w_size - z && (N(e, !1), 0 === e.strm.avail_out)) return A;
        }
        return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : (e.strstart > e.block_start && (N(e, !1), e.strm.avail_out), A);
      }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r.deflateInit = function (e, t) {
        return Y(e, t, v, 15, 8, 0);
      }, r.deflateInit2 = Y, r.deflateReset = K, r.deflateResetKeep = G, r.deflateSetHeader = function (e, t) {
        return e && e.state ? 2 !== e.state.wrap ? _ : (e.state.gzhead = t, m) : _;
      }, r.deflate = function (e, t) {
        var r, n, i, s;
        if (!e || !e.state || 5 < t || t < 0) return e ? R(e, _) : _;
        if (n = e.state, !e.output || !e.input && 0 !== e.avail_in || 666 === n.status && t !== f) return R(e, 0 === e.avail_out ? -5 : _);
        if (n.strm = e, r = n.last_flush, n.last_flush = t, n.status === C) if (2 === n.wrap) e.adler = 0, U(n, 31), U(n, 139), U(n, 8), n.gzhead ? (U(n, (n.gzhead.text ? 1 : 0) + (n.gzhead.hcrc ? 2 : 0) + (n.gzhead.extra ? 4 : 0) + (n.gzhead.name ? 8 : 0) + (n.gzhead.comment ? 16 : 0)), U(n, 255 & n.gzhead.time), U(n, n.gzhead.time >> 8 & 255), U(n, n.gzhead.time >> 16 & 255), U(n, n.gzhead.time >> 24 & 255), U(n, 9 === n.level ? 2 : 2 <= n.strategy || n.level < 2 ? 4 : 0), U(n, 255 & n.gzhead.os), n.gzhead.extra && n.gzhead.extra.length && (U(n, 255 & n.gzhead.extra.length), U(n, n.gzhead.extra.length >> 8 & 255)), n.gzhead.hcrc && (e.adler = p(e.adler, n.pending_buf, n.pending, 0)), n.gzindex = 0, n.status = 69) : (U(n, 0), U(n, 0), U(n, 0), U(n, 0), U(n, 0), U(n, 9 === n.level ? 2 : 2 <= n.strategy || n.level < 2 ? 4 : 0), U(n, 3), n.status = E);else {
          var a = v + (n.w_bits - 8 << 4) << 8;
          a |= (2 <= n.strategy || n.level < 2 ? 0 : n.level < 6 ? 1 : 6 === n.level ? 2 : 3) << 6, 0 !== n.strstart && (a |= 32), a += 31 - a % 31, n.status = E, P(n, a), 0 !== n.strstart && (P(n, e.adler >>> 16), P(n, 65535 & e.adler)), e.adler = 1;
        }
        if (69 === n.status) if (n.gzhead.extra) {
          for (i = n.pending; n.gzindex < (65535 & n.gzhead.extra.length) && (n.pending !== n.pending_buf_size || (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending !== n.pending_buf_size));) U(n, 255 & n.gzhead.extra[n.gzindex]), n.gzindex++;
          n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), n.gzindex === n.gzhead.extra.length && (n.gzindex = 0, n.status = 73);
        } else n.status = 73;
        if (73 === n.status) if (n.gzhead.name) {
          i = n.pending;
          do {
            if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending === n.pending_buf_size)) {
              s = 1;
              break;
            }
            s = n.gzindex < n.gzhead.name.length ? 255 & n.gzhead.name.charCodeAt(n.gzindex++) : 0, U(n, s);
          } while (0 !== s);
          n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), 0 === s && (n.gzindex = 0, n.status = 91);
        } else n.status = 91;
        if (91 === n.status) if (n.gzhead.comment) {
          i = n.pending;
          do {
            if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), F(e), i = n.pending, n.pending === n.pending_buf_size)) {
              s = 1;
              break;
            }
            s = n.gzindex < n.gzhead.comment.length ? 255 & n.gzhead.comment.charCodeAt(n.gzindex++) : 0, U(n, s);
          } while (0 !== s);
          n.gzhead.hcrc && n.pending > i && (e.adler = p(e.adler, n.pending_buf, n.pending - i, i)), 0 === s && (n.status = 103);
        } else n.status = 103;
        if (103 === n.status && (n.gzhead.hcrc ? (n.pending + 2 > n.pending_buf_size && F(e), n.pending + 2 <= n.pending_buf_size && (U(n, 255 & e.adler), U(n, e.adler >> 8 & 255), e.adler = 0, n.status = E)) : n.status = E), 0 !== n.pending) {
          if (F(e), 0 === e.avail_out) return n.last_flush = -1, m;
        } else if (0 === e.avail_in && T(t) <= T(r) && t !== f) return R(e, -5);
        if (666 === n.status && 0 !== e.avail_in) return R(e, -5);
        if (0 !== e.avail_in || 0 !== n.lookahead || t !== l && 666 !== n.status) {
          var o = 2 === n.strategy ? function (e, t) {
            for (var r;;) {
              if (0 === e.lookahead && (j(e), 0 === e.lookahead)) {
                if (t === l) return A;
                break;
              }
              if (e.match_length = 0, r = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, r && (N(e, !1), 0 === e.strm.avail_out)) return A;
            }
            return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
          }(n, t) : 3 === n.strategy ? function (e, t) {
            for (var r, n, i, s, a = e.window;;) {
              if (e.lookahead <= S) {
                if (j(e), e.lookahead <= S && t === l) return A;
                if (0 === e.lookahead) break;
              }
              if (e.match_length = 0, e.lookahead >= x && 0 < e.strstart && (n = a[i = e.strstart - 1]) === a[++i] && n === a[++i] && n === a[++i]) {
                s = e.strstart + S;
                do {} while (n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && i < s);
                e.match_length = S - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
              }
              if (e.match_length >= x ? (r = u._tr_tally(e, 1, e.match_length - x), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (r = u._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), r && (N(e, !1), 0 === e.strm.avail_out)) return A;
            }
            return e.insert = 0, t === f ? (N(e, !0), 0 === e.strm.avail_out ? O : B) : e.last_lit && (N(e, !1), 0 === e.strm.avail_out) ? A : I;
          }(n, t) : h[n.level].func(n, t);
          if (o !== O && o !== B || (n.status = 666), o === A || o === O) return 0 === e.avail_out && (n.last_flush = -1), m;
          if (o === I && (1 === t ? u._tr_align(n) : 5 !== t && (u._tr_stored_block(n, 0, 0, !1), 3 === t && (D(n.head), 0 === n.lookahead && (n.strstart = 0, n.block_start = 0, n.insert = 0))), F(e), 0 === e.avail_out)) return n.last_flush = -1, m;
        }
        return t !== f ? m : n.wrap <= 0 ? 1 : (2 === n.wrap ? (U(n, 255 & e.adler), U(n, e.adler >> 8 & 255), U(n, e.adler >> 16 & 255), U(n, e.adler >> 24 & 255), U(n, 255 & e.total_in), U(n, e.total_in >> 8 & 255), U(n, e.total_in >> 16 & 255), U(n, e.total_in >> 24 & 255)) : (P(n, e.adler >>> 16), P(n, 65535 & e.adler)), F(e), 0 < n.wrap && (n.wrap = -n.wrap), 0 !== n.pending ? m : 1);
      }, r.deflateEnd = function (e) {
        var t;
        return e && e.state ? (t = e.state.status) !== C && 69 !== t && 73 !== t && 91 !== t && 103 !== t && t !== E && 666 !== t ? R(e, _) : (e.state = null, t === E ? R(e, -3) : m) : _;
      }, r.deflateSetDictionary = function (e, t) {
        var r,
          n,
          i,
          s,
          a,
          o,
          h,
          u,
          l = t.length;
        if (!e || !e.state) return _;
        if (2 === (s = (r = e.state).wrap) || 1 === s && r.status !== C || r.lookahead) return _;
        for (1 === s && (e.adler = d(e.adler, t, l, 0)), r.wrap = 0, l >= r.w_size && (0 === s && (D(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0), u = new c.Buf8(r.w_size), c.arraySet(u, t, l - r.w_size, r.w_size, 0), t = u, l = r.w_size), a = e.avail_in, o = e.next_in, h = e.input, e.avail_in = l, e.next_in = 0, e.input = t, j(r); r.lookahead >= x;) {
          for (n = r.strstart, i = r.lookahead - (x - 1); r.ins_h = (r.ins_h << r.hash_shift ^ r.window[n + x - 1]) & r.hash_mask, r.prev[n & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = n, n++, --i;);
          r.strstart = n, r.lookahead = x - 1, j(r);
        }
        return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = x - 1, r.match_available = 0, e.next_in = o, e.input = h, e.avail_in = a, r.wrap = s, m;
      }, r.deflateInfo = "pako deflate (from Nodeca project)";
    }, {
      "../utils/common": 41,
      "./adler32": 43,
      "./crc32": 45,
      "./messages": 51,
      "./trees": 52
    }],
    47: [function (e, t, r) {
      "use strict";

      t.exports = function () {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
      };
    }, {}],
    48: [function (e, t, r) {
      "use strict";

      t.exports = function (e, t) {
        var r, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;
        r = e.state, n = e.next_in, z = e.input, i = n + (e.avail_in - 5), s = e.next_out, C = e.output, a = s - (t - e.avail_out), o = s + (e.avail_out - 257), h = r.dmax, u = r.wsize, l = r.whave, f = r.wnext, c = r.window, d = r.hold, p = r.bits, m = r.lencode, _ = r.distcode, g = (1 << r.lenbits) - 1, b = (1 << r.distbits) - 1;
        e: do {
          p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];
          t: for (;;) {
            if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s++] = 65535 & v;else {
              if (!(16 & y)) {
                if (0 == (64 & y)) {
                  v = m[(65535 & v) + (d & (1 << y) - 1)];
                  continue t;
                }
                if (32 & y) {
                  r.mode = 12;
                  break e;
                }
                e.msg = "invalid literal/length code", r.mode = 30;
                break e;
              }
              w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];
              r: for (;;) {
                if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {
                  if (0 == (64 & y)) {
                    v = _[(65535 & v) + (d & (1 << y) - 1)];
                    continue r;
                  }
                  e.msg = "invalid distance code", r.mode = 30;
                  break e;
                }
                if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {
                  e.msg = "invalid distance too far back", r.mode = 30;
                  break e;
                }
                if (d >>>= y, p -= y, (y = s - a) < k) {
                  if (l < (y = k - y) && r.sane) {
                    e.msg = "invalid distance too far back", r.mode = 30;
                    break e;
                  }
                  if (S = c, (x = 0) === f) {
                    if (x += u - y, y < w) {
                      for (w -= y; C[s++] = c[x++], --y;);
                      x = s - k, S = C;
                    }
                  } else if (f < y) {
                    if (x += u + f - y, (y -= f) < w) {
                      for (w -= y; C[s++] = c[x++], --y;);
                      if (x = 0, f < w) {
                        for (w -= y = f; C[s++] = c[x++], --y;);
                        x = s - k, S = C;
                      }
                    }
                  } else if (x += f - y, y < w) {
                    for (w -= y; C[s++] = c[x++], --y;);
                    x = s - k, S = C;
                  }
                  for (; 2 < w;) C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;
                  w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));
                } else {
                  for (x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3););
                  w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));
                }
                break;
              }
            }
            break;
          }
        } while (n < i && s < o);
        n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e.next_in = n, e.next_out = s, e.avail_in = n < i ? i - n + 5 : 5 - (n - i), e.avail_out = s < o ? o - s + 257 : 257 - (s - o), r.hold = d, r.bits = p;
      };
    }, {}],
    49: [function (e, t, r) {
      "use strict";

      var I = e("../utils/common"),
        O = e("./adler32"),
        B = e("./crc32"),
        R = e("./inffast"),
        T = e("./inftrees"),
        D = 1,
        F = 2,
        N = 0,
        U = -2,
        P = 1,
        n = 852,
        i = 592;
      function L(e) {
        return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
      }
      function s() {
        this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
      function a(e) {
        var t;
        return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = P, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new I.Buf32(n), t.distcode = t.distdyn = new I.Buf32(i), t.sane = 1, t.back = -1, N) : U;
      }
      function o(e) {
        var t;
        return e && e.state ? ((t = e.state).wsize = 0, t.whave = 0, t.wnext = 0, a(e)) : U;
      }
      function h(e, t) {
        var r, n;
        return e && e.state ? (n = e.state, t < 0 ? (r = 0, t = -t) : (r = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || 15 < t) ? U : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, o(e))) : U;
      }
      function u(e, t) {
        var r, n;
        return e ? (n = new s(), (e.state = n).window = null, (r = h(e, t)) !== N && (e.state = null), r) : U;
      }
      var l,
        f,
        c = !0;
      function j(e) {
        if (c) {
          var t;
          for (l = new I.Buf32(512), f = new I.Buf32(32), t = 0; t < 144;) e.lens[t++] = 8;
          for (; t < 256;) e.lens[t++] = 9;
          for (; t < 280;) e.lens[t++] = 7;
          for (; t < 288;) e.lens[t++] = 8;
          for (T(D, e.lens, 0, 288, l, 0, e.work, {
            bits: 9
          }), t = 0; t < 32;) e.lens[t++] = 5;
          T(F, e.lens, 0, 32, f, 0, e.work, {
            bits: 5
          }), c = !1;
        }
        e.lencode = l, e.lenbits = 9, e.distcode = f, e.distbits = 5;
      }
      function Z(e, t, r, n) {
        var i,
          s = e.state;
        return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new I.Buf8(s.wsize)), n >= s.wsize ? (I.arraySet(s.window, t, r - s.wsize, s.wsize, 0), s.wnext = 0, s.whave = s.wsize) : (n < (i = s.wsize - s.wnext) && (i = n), I.arraySet(s.window, t, r - n, i, s.wnext), (n -= i) ? (I.arraySet(s.window, t, r - n, n, 0), s.wnext = n, s.whave = s.wsize) : (s.wnext += i, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += i))), 0;
      }
      r.inflateReset = o, r.inflateReset2 = h, r.inflateResetKeep = a, r.inflateInit = function (e) {
        return u(e, 15);
      }, r.inflateInit2 = u, r.inflate = function (e, t) {
        var r,
          n,
          i,
          s,
          a,
          o,
          h,
          u,
          l,
          f,
          c,
          d,
          p,
          m,
          _,
          g,
          b,
          v,
          y,
          w,
          k,
          x,
          S,
          z,
          C = 0,
          E = new I.Buf8(4),
          A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return U;
        12 === (r = e.state).mode && (r.mode = 13), a = e.next_out, i = e.output, h = e.avail_out, s = e.next_in, n = e.input, o = e.avail_in, u = r.hold, l = r.bits, f = o, c = h, x = N;
        e: for (;;) switch (r.mode) {
          case P:
            if (0 === r.wrap) {
              r.mode = 13;
              break;
            }
            for (; l < 16;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if (2 & r.wrap && 35615 === u) {
              E[r.check = 0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0), l = u = 0, r.mode = 2;
              break;
            }
            if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & u) << 8) + (u >> 8)) % 31) {
              e.msg = "incorrect header check", r.mode = 30;
              break;
            }
            if (8 != (15 & u)) {
              e.msg = "unknown compression method", r.mode = 30;
              break;
            }
            if (l -= 4, k = 8 + (15 & (u >>>= 4)), 0 === r.wbits) r.wbits = k;else if (k > r.wbits) {
              e.msg = "invalid window size", r.mode = 30;
              break;
            }
            r.dmax = 1 << k, e.adler = r.check = 1, r.mode = 512 & u ? 10 : 12, l = u = 0;
            break;
          case 2:
            for (; l < 16;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if (r.flags = u, 8 != (255 & r.flags)) {
              e.msg = "unknown compression method", r.mode = 30;
              break;
            }
            if (57344 & r.flags) {
              e.msg = "unknown header flags set", r.mode = 30;
              break;
            }
            r.head && (r.head.text = u >> 8 & 1), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 3;
          case 3:
            for (; l < 32;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            r.head && (r.head.time = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, E[2] = u >>> 16 & 255, E[3] = u >>> 24 & 255, r.check = B(r.check, E, 4, 0)), l = u = 0, r.mode = 4;
          case 4:
            for (; l < 16;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            r.head && (r.head.xflags = 255 & u, r.head.os = u >> 8), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 5;
          case 5:
            if (1024 & r.flags) {
              for (; l < 16;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              r.length = u, r.head && (r.head.extra_len = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0;
            } else r.head && (r.head.extra = null);
            r.mode = 6;
          case 6:
            if (1024 & r.flags && (o < (d = r.length) && (d = o), d && (r.head && (k = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), I.arraySet(r.head.extra, n, s, d, k)), 512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, r.length -= d), r.length)) break e;
            r.length = 0, r.mode = 7;
          case 7:
            if (2048 & r.flags) {
              if (0 === o) break e;
              for (d = 0; k = n[s + d++], r.head && k && r.length < 65536 && (r.head.name += String.fromCharCode(k)), k && d < o;);
              if (512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, k) break e;
            } else r.head && (r.head.name = null);
            r.length = 0, r.mode = 8;
          case 8:
            if (4096 & r.flags) {
              if (0 === o) break e;
              for (d = 0; k = n[s + d++], r.head && k && r.length < 65536 && (r.head.comment += String.fromCharCode(k)), k && d < o;);
              if (512 & r.flags && (r.check = B(r.check, n, d, s)), o -= d, s += d, k) break e;
            } else r.head && (r.head.comment = null);
            r.mode = 9;
          case 9:
            if (512 & r.flags) {
              for (; l < 16;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              if (u !== (65535 & r.check)) {
                e.msg = "header crc mismatch", r.mode = 30;
                break;
              }
              l = u = 0;
            }
            r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = 12;
            break;
          case 10:
            for (; l < 32;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            e.adler = r.check = L(u), l = u = 0, r.mode = 11;
          case 11:
            if (0 === r.havedict) return e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, 2;
            e.adler = r.check = 1, r.mode = 12;
          case 12:
            if (5 === t || 6 === t) break e;
          case 13:
            if (r.last) {
              u >>>= 7 & l, l -= 7 & l, r.mode = 27;
              break;
            }
            for (; l < 3;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            switch (r.last = 1 & u, l -= 1, 3 & (u >>>= 1)) {
              case 0:
                r.mode = 14;
                break;
              case 1:
                if (j(r), r.mode = 20, 6 !== t) break;
                u >>>= 2, l -= 2;
                break e;
              case 2:
                r.mode = 17;
                break;
              case 3:
                e.msg = "invalid block type", r.mode = 30;
            }
            u >>>= 2, l -= 2;
            break;
          case 14:
            for (u >>>= 7 & l, l -= 7 & l; l < 32;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if ((65535 & u) != (u >>> 16 ^ 65535)) {
              e.msg = "invalid stored block lengths", r.mode = 30;
              break;
            }
            if (r.length = 65535 & u, l = u = 0, r.mode = 15, 6 === t) break e;
          case 15:
            r.mode = 16;
          case 16:
            if (d = r.length) {
              if (o < d && (d = o), h < d && (d = h), 0 === d) break e;
              I.arraySet(i, n, s, d, a), o -= d, s += d, h -= d, a += d, r.length -= d;
              break;
            }
            r.mode = 12;
            break;
          case 17:
            for (; l < 14;) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if (r.nlen = 257 + (31 & u), u >>>= 5, l -= 5, r.ndist = 1 + (31 & u), u >>>= 5, l -= 5, r.ncode = 4 + (15 & u), u >>>= 4, l -= 4, 286 < r.nlen || 30 < r.ndist) {
              e.msg = "too many length or distance symbols", r.mode = 30;
              break;
            }
            r.have = 0, r.mode = 18;
          case 18:
            for (; r.have < r.ncode;) {
              for (; l < 3;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              r.lens[A[r.have++]] = 7 & u, u >>>= 3, l -= 3;
            }
            for (; r.have < 19;) r.lens[A[r.have++]] = 0;
            if (r.lencode = r.lendyn, r.lenbits = 7, S = {
              bits: r.lenbits
            }, x = T(0, r.lens, 0, 19, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
              e.msg = "invalid code lengths set", r.mode = 30;
              break;
            }
            r.have = 0, r.mode = 19;
          case 19:
            for (; r.have < r.nlen + r.ndist;) {
              for (; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              if (b < 16) u >>>= _, l -= _, r.lens[r.have++] = b;else {
                if (16 === b) {
                  for (z = _ + 2; l < z;) {
                    if (0 === o) break e;
                    o--, u += n[s++] << l, l += 8;
                  }
                  if (u >>>= _, l -= _, 0 === r.have) {
                    e.msg = "invalid bit length repeat", r.mode = 30;
                    break;
                  }
                  k = r.lens[r.have - 1], d = 3 + (3 & u), u >>>= 2, l -= 2;
                } else if (17 === b) {
                  for (z = _ + 3; l < z;) {
                    if (0 === o) break e;
                    o--, u += n[s++] << l, l += 8;
                  }
                  l -= _, k = 0, d = 3 + (7 & (u >>>= _)), u >>>= 3, l -= 3;
                } else {
                  for (z = _ + 7; l < z;) {
                    if (0 === o) break e;
                    o--, u += n[s++] << l, l += 8;
                  }
                  l -= _, k = 0, d = 11 + (127 & (u >>>= _)), u >>>= 7, l -= 7;
                }
                if (r.have + d > r.nlen + r.ndist) {
                  e.msg = "invalid bit length repeat", r.mode = 30;
                  break;
                }
                for (; d--;) r.lens[r.have++] = k;
              }
            }
            if (30 === r.mode) break;
            if (0 === r.lens[256]) {
              e.msg = "invalid code -- missing end-of-block", r.mode = 30;
              break;
            }
            if (r.lenbits = 9, S = {
              bits: r.lenbits
            }, x = T(D, r.lens, 0, r.nlen, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
              e.msg = "invalid literal/lengths set", r.mode = 30;
              break;
            }
            if (r.distbits = 6, r.distcode = r.distdyn, S = {
              bits: r.distbits
            }, x = T(F, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, S), r.distbits = S.bits, x) {
              e.msg = "invalid distances set", r.mode = 30;
              break;
            }
            if (r.mode = 20, 6 === t) break e;
          case 20:
            r.mode = 21;
          case 21:
            if (6 <= o && 258 <= h) {
              e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, R(e, c), a = e.next_out, i = e.output, h = e.avail_out, s = e.next_in, n = e.input, o = e.avail_in, u = r.hold, l = r.bits, 12 === r.mode && (r.back = -1);
              break;
            }
            for (r.back = 0; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if (g && 0 == (240 & g)) {
              for (v = _, y = g, w = b; g = (C = r.lencode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              u >>>= v, l -= v, r.back += v;
            }
            if (u >>>= _, l -= _, r.back += _, r.length = b, 0 === g) {
              r.mode = 26;
              break;
            }
            if (32 & g) {
              r.back = -1, r.mode = 12;
              break;
            }
            if (64 & g) {
              e.msg = "invalid literal/length code", r.mode = 30;
              break;
            }
            r.extra = 15 & g, r.mode = 22;
          case 22:
            if (r.extra) {
              for (z = r.extra; l < z;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              r.length += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
            }
            r.was = r.length, r.mode = 23;
          case 23:
            for (; g = (C = r.distcode[u & (1 << r.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);) {
              if (0 === o) break e;
              o--, u += n[s++] << l, l += 8;
            }
            if (0 == (240 & g)) {
              for (v = _, y = g, w = b; g = (C = r.distcode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              u >>>= v, l -= v, r.back += v;
            }
            if (u >>>= _, l -= _, r.back += _, 64 & g) {
              e.msg = "invalid distance code", r.mode = 30;
              break;
            }
            r.offset = b, r.extra = 15 & g, r.mode = 24;
          case 24:
            if (r.extra) {
              for (z = r.extra; l < z;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              r.offset += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
            }
            if (r.offset > r.dmax) {
              e.msg = "invalid distance too far back", r.mode = 30;
              break;
            }
            r.mode = 25;
          case 25:
            if (0 === h) break e;
            if (d = c - h, r.offset > d) {
              if ((d = r.offset - d) > r.whave && r.sane) {
                e.msg = "invalid distance too far back", r.mode = 30;
                break;
              }
              p = d > r.wnext ? (d -= r.wnext, r.wsize - d) : r.wnext - d, d > r.length && (d = r.length), m = r.window;
            } else m = i, p = a - r.offset, d = r.length;
            for (h < d && (d = h), h -= d, r.length -= d; i[a++] = m[p++], --d;);
            0 === r.length && (r.mode = 21);
            break;
          case 26:
            if (0 === h) break e;
            i[a++] = r.length, h--, r.mode = 21;
            break;
          case 27:
            if (r.wrap) {
              for (; l < 32;) {
                if (0 === o) break e;
                o--, u |= n[s++] << l, l += 8;
              }
              if (c -= h, e.total_out += c, r.total += c, c && (e.adler = r.check = r.flags ? B(r.check, i, c, a - c) : O(r.check, i, c, a - c)), c = h, (r.flags ? u : L(u)) !== r.check) {
                e.msg = "incorrect data check", r.mode = 30;
                break;
              }
              l = u = 0;
            }
            r.mode = 28;
          case 28:
            if (r.wrap && r.flags) {
              for (; l < 32;) {
                if (0 === o) break e;
                o--, u += n[s++] << l, l += 8;
              }
              if (u !== (4294967295 & r.total)) {
                e.msg = "incorrect length check", r.mode = 30;
                break;
              }
              l = u = 0;
            }
            r.mode = 29;
          case 29:
            x = 1;
            break e;
          case 30:
            x = -3;
            break e;
          case 31:
            return -4;
          case 32:
          default:
            return U;
        }
        return e.next_out = a, e.avail_out = h, e.next_in = s, e.avail_in = o, r.hold = u, r.bits = l, (r.wsize || c !== e.avail_out && r.mode < 30 && (r.mode < 27 || 4 !== t)) && Z(e, e.output, e.next_out, c - e.avail_out) ? (r.mode = 31, -4) : (f -= e.avail_in, c -= e.avail_out, e.total_in += f, e.total_out += c, r.total += c, r.wrap && c && (e.adler = r.check = r.flags ? B(r.check, i, c, e.next_out - c) : O(r.check, i, c, e.next_out - c)), e.data_type = r.bits + (r.last ? 64 : 0) + (12 === r.mode ? 128 : 0) + (20 === r.mode || 15 === r.mode ? 256 : 0), (0 == f && 0 === c || 4 === t) && x === N && (x = -5), x);
      }, r.inflateEnd = function (e) {
        if (!e || !e.state) return U;
        var t = e.state;
        return t.window && (t.window = null), e.state = null, N;
      }, r.inflateGetHeader = function (e, t) {
        var r;
        return e && e.state ? 0 == (2 & (r = e.state).wrap) ? U : ((r.head = t).done = !1, N) : U;
      }, r.inflateSetDictionary = function (e, t) {
        var r,
          n = t.length;
        return e && e.state ? 0 !== (r = e.state).wrap && 11 !== r.mode ? U : 11 === r.mode && O(1, t, n, 0) !== r.check ? -3 : Z(e, t, n, n) ? (r.mode = 31, -4) : (r.havedict = 1, N) : U;
      }, r.inflateInfo = "pako inflate (from Nodeca project)";
    }, {
      "../utils/common": 41,
      "./adler32": 43,
      "./crc32": 45,
      "./inffast": 48,
      "./inftrees": 50
    }],
    50: [function (e, t, r) {
      "use strict";

      var D = e("../utils/common"),
        F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
        N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
        U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
        P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      t.exports = function (e, t, r, n, i, s, a, o) {
        var h,
          u,
          l,
          f,
          c,
          d,
          p,
          m,
          _,
          g = o.bits,
          b = 0,
          v = 0,
          y = 0,
          w = 0,
          k = 0,
          x = 0,
          S = 0,
          z = 0,
          C = 0,
          E = 0,
          A = null,
          I = 0,
          O = new D.Buf16(16),
          B = new D.Buf16(16),
          R = null,
          T = 0;
        for (b = 0; b <= 15; b++) O[b] = 0;
        for (v = 0; v < n; v++) O[t[r + v]]++;
        for (k = g, w = 15; 1 <= w && 0 === O[w]; w--);
        if (w < k && (k = w), 0 === w) return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;
        for (y = 1; y < w && 0 === O[y]; y++);
        for (k < y && (k = y), b = z = 1; b <= 15; b++) if (z <<= 1, (z -= O[b]) < 0) return -1;
        if (0 < z && (0 === e || 1 !== w)) return -1;
        for (B[1] = 0, b = 1; b < 15; b++) B[b + 1] = B[b] + O[b];
        for (v = 0; v < n; v++) 0 !== t[r + v] && (a[B[t[r + v]]++] = v);
        if (d = 0 === e ? (A = R = a, 19) : 1 === e ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, c = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === e && 852 < C || 2 === e && 592 < C) return 1;
        for (;;) {
          for (p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u;);
          for (h = 1 << b - 1; E & h;) h >>= 1;
          if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {
            if (b === w) break;
            b = t[r + a[v]];
          }
          if (k < b && (E & f) !== l) {
            for (0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0);) x++, z <<= 1;
            if (C += 1 << x, 1 === e && 852 < C || 2 === e && 592 < C) return 1;
            i[l = E & f] = k << 24 | x << 16 | c - s | 0;
          }
        }
        return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;
      };
    }, {
      "../utils/common": 41
    }],
    51: [function (e, t, r) {
      "use strict";

      t.exports = {
        2: "need dictionary",
        1: "stream end",
        0: "",
        "-1": "file error",
        "-2": "stream error",
        "-3": "data error",
        "-4": "insufficient memory",
        "-5": "buffer error",
        "-6": "incompatible version"
      };
    }, {}],
    52: [function (e, t, r) {
      "use strict";

      var i = e("../utils/common"),
        o = 0,
        h = 1;
      function n(e) {
        for (var t = e.length; 0 <= --t;) e[t] = 0;
      }
      var s = 0,
        a = 29,
        u = 256,
        l = u + 1 + a,
        f = 30,
        c = 19,
        _ = 2 * l + 1,
        g = 15,
        d = 16,
        p = 7,
        m = 256,
        b = 16,
        v = 17,
        y = 18,
        w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0],
        k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
        x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
        S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
        z = new Array(2 * (l + 2));
      n(z);
      var C = new Array(2 * f);
      n(C);
      var E = new Array(512);
      n(E);
      var A = new Array(256);
      n(A);
      var I = new Array(a);
      n(I);
      var O,
        B,
        R,
        T = new Array(f);
      function D(e, t, r, n, i) {
        this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i, this.has_stree = e && e.length;
      }
      function F(e, t) {
        this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
      }
      function N(e) {
        return e < 256 ? E[e] : E[256 + (e >>> 7)];
      }
      function U(e, t) {
        e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
      }
      function P(e, t, r) {
        e.bi_valid > d - r ? (e.bi_buf |= t << e.bi_valid & 65535, U(e, e.bi_buf), e.bi_buf = t >> d - e.bi_valid, e.bi_valid += r - d) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += r);
      }
      function L(e, t, r) {
        P(e, r[2 * t], r[2 * t + 1]);
      }
      function j(e, t) {
        for (var r = 0; r |= 1 & e, e >>>= 1, r <<= 1, 0 < --t;);
        return r >>> 1;
      }
      function Z(e, t, r) {
        var n,
          i,
          s = new Array(g + 1),
          a = 0;
        for (n = 1; n <= g; n++) s[n] = a = a + r[n - 1] << 1;
        for (i = 0; i <= t; i++) {
          var o = e[2 * i + 1];
          0 !== o && (e[2 * i] = j(s[o]++, o));
        }
      }
      function W(e) {
        var t;
        for (t = 0; t < l; t++) e.dyn_ltree[2 * t] = 0;
        for (t = 0; t < f; t++) e.dyn_dtree[2 * t] = 0;
        for (t = 0; t < c; t++) e.bl_tree[2 * t] = 0;
        e.dyn_ltree[2 * m] = 1, e.opt_len = e.static_len = 0, e.last_lit = e.matches = 0;
      }
      function M(e) {
        8 < e.bi_valid ? U(e, e.bi_buf) : 0 < e.bi_valid && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
      }
      function H(e, t, r, n) {
        var i = 2 * t,
          s = 2 * r;
        return e[i] < e[s] || e[i] === e[s] && n[t] <= n[r];
      }
      function G(e, t, r) {
        for (var n = e.heap[r], i = r << 1; i <= e.heap_len && (i < e.heap_len && H(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !H(t, n, e.heap[i], e.depth));) e.heap[r] = e.heap[i], r = i, i <<= 1;
        e.heap[r] = n;
      }
      function K(e, t, r) {
        var n,
          i,
          s,
          a,
          o = 0;
        if (0 !== e.last_lit) for (; n = e.pending_buf[e.d_buf + 2 * o] << 8 | e.pending_buf[e.d_buf + 2 * o + 1], i = e.pending_buf[e.l_buf + o], o++, 0 === n ? L(e, i, t) : (L(e, (s = A[i]) + u + 1, t), 0 !== (a = w[s]) && P(e, i -= I[s], a), L(e, s = N(--n), r), 0 !== (a = k[s]) && P(e, n -= T[s], a)), o < e.last_lit;);
        L(e, m, t);
      }
      function Y(e, t) {
        var r,
          n,
          i,
          s = t.dyn_tree,
          a = t.stat_desc.static_tree,
          o = t.stat_desc.has_stree,
          h = t.stat_desc.elems,
          u = -1;
        for (e.heap_len = 0, e.heap_max = _, r = 0; r < h; r++) 0 !== s[2 * r] ? (e.heap[++e.heap_len] = u = r, e.depth[r] = 0) : s[2 * r + 1] = 0;
        for (; e.heap_len < 2;) s[2 * (i = e.heap[++e.heap_len] = u < 2 ? ++u : 0)] = 1, e.depth[i] = 0, e.opt_len--, o && (e.static_len -= a[2 * i + 1]);
        for (t.max_code = u, r = e.heap_len >> 1; 1 <= r; r--) G(e, s, r);
        for (i = h; r = e.heap[1], e.heap[1] = e.heap[e.heap_len--], G(e, s, 1), n = e.heap[1], e.heap[--e.heap_max] = r, e.heap[--e.heap_max] = n, s[2 * i] = s[2 * r] + s[2 * n], e.depth[i] = (e.depth[r] >= e.depth[n] ? e.depth[r] : e.depth[n]) + 1, s[2 * r + 1] = s[2 * n + 1] = i, e.heap[1] = i++, G(e, s, 1), 2 <= e.heap_len;);
        e.heap[--e.heap_max] = e.heap[1], function (e, t) {
          var r,
            n,
            i,
            s,
            a,
            o,
            h = t.dyn_tree,
            u = t.max_code,
            l = t.stat_desc.static_tree,
            f = t.stat_desc.has_stree,
            c = t.stat_desc.extra_bits,
            d = t.stat_desc.extra_base,
            p = t.stat_desc.max_length,
            m = 0;
          for (s = 0; s <= g; s++) e.bl_count[s] = 0;
          for (h[2 * e.heap[e.heap_max] + 1] = 0, r = e.heap_max + 1; r < _; r++) p < (s = h[2 * h[2 * (n = e.heap[r]) + 1] + 1] + 1) && (s = p, m++), h[2 * n + 1] = s, u < n || (e.bl_count[s]++, a = 0, d <= n && (a = c[n - d]), o = h[2 * n], e.opt_len += o * (s + a), f && (e.static_len += o * (l[2 * n + 1] + a)));
          if (0 !== m) {
            do {
              for (s = p - 1; 0 === e.bl_count[s];) s--;
              e.bl_count[s]--, e.bl_count[s + 1] += 2, e.bl_count[p]--, m -= 2;
            } while (0 < m);
            for (s = p; 0 !== s; s--) for (n = e.bl_count[s]; 0 !== n;) u < (i = e.heap[--r]) || (h[2 * i + 1] !== s && (e.opt_len += (s - h[2 * i + 1]) * h[2 * i], h[2 * i + 1] = s), n--);
          }
        }(e, t), Z(s, u, e.bl_count);
      }
      function X(e, t, r) {
        var n,
          i,
          s = -1,
          a = t[1],
          o = 0,
          h = 7,
          u = 4;
        for (0 === a && (h = 138, u = 3), t[2 * (r + 1) + 1] = 65535, n = 0; n <= r; n++) i = a, a = t[2 * (n + 1) + 1], ++o < h && i === a || (o < u ? e.bl_tree[2 * i] += o : 0 !== i ? (i !== s && e.bl_tree[2 * i]++, e.bl_tree[2 * b]++) : o <= 10 ? e.bl_tree[2 * v]++ : e.bl_tree[2 * y]++, s = i, u = (o = 0) === a ? (h = 138, 3) : i === a ? (h = 6, 3) : (h = 7, 4));
      }
      function V(e, t, r) {
        var n,
          i,
          s = -1,
          a = t[1],
          o = 0,
          h = 7,
          u = 4;
        for (0 === a && (h = 138, u = 3), n = 0; n <= r; n++) if (i = a, a = t[2 * (n + 1) + 1], !(++o < h && i === a)) {
          if (o < u) for (; L(e, i, e.bl_tree), 0 != --o;);else 0 !== i ? (i !== s && (L(e, i, e.bl_tree), o--), L(e, b, e.bl_tree), P(e, o - 3, 2)) : o <= 10 ? (L(e, v, e.bl_tree), P(e, o - 3, 3)) : (L(e, y, e.bl_tree), P(e, o - 11, 7));
          s = i, u = (o = 0) === a ? (h = 138, 3) : i === a ? (h = 6, 3) : (h = 7, 4);
        }
      }
      n(T);
      var q = !1;
      function J(e, t, r, n) {
        P(e, (s << 1) + (n ? 1 : 0), 3), function (e, t, r, n) {
          M(e), n && (U(e, r), U(e, ~r)), i.arraySet(e.pending_buf, e.window, t, r, e.pending), e.pending += r;
        }(e, t, r, !0);
      }
      r._tr_init = function (e) {
        q || (function () {
          var e,
            t,
            r,
            n,
            i,
            s = new Array(g + 1);
          for (n = r = 0; n < a - 1; n++) for (I[n] = r, e = 0; e < 1 << w[n]; e++) A[r++] = n;
          for (A[r - 1] = n, n = i = 0; n < 16; n++) for (T[n] = i, e = 0; e < 1 << k[n]; e++) E[i++] = n;
          for (i >>= 7; n < f; n++) for (T[n] = i << 7, e = 0; e < 1 << k[n] - 7; e++) E[256 + i++] = n;
          for (t = 0; t <= g; t++) s[t] = 0;
          for (e = 0; e <= 143;) z[2 * e + 1] = 8, e++, s[8]++;
          for (; e <= 255;) z[2 * e + 1] = 9, e++, s[9]++;
          for (; e <= 279;) z[2 * e + 1] = 7, e++, s[7]++;
          for (; e <= 287;) z[2 * e + 1] = 8, e++, s[8]++;
          for (Z(z, l + 1, s), e = 0; e < f; e++) C[2 * e + 1] = 5, C[2 * e] = j(e, 5);
          O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c, p);
        }(), q = !0), e.l_desc = new F(e.dyn_ltree, O), e.d_desc = new F(e.dyn_dtree, B), e.bl_desc = new F(e.bl_tree, R), e.bi_buf = 0, e.bi_valid = 0, W(e);
      }, r._tr_stored_block = J, r._tr_flush_block = function (e, t, r, n) {
        var i,
          s,
          a = 0;
        0 < e.level ? (2 === e.strm.data_type && (e.strm.data_type = function (e) {
          var t,
            r = 4093624447;
          for (t = 0; t <= 31; t++, r >>>= 1) if (1 & r && 0 !== e.dyn_ltree[2 * t]) return o;
          if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return h;
          for (t = 32; t < u; t++) if (0 !== e.dyn_ltree[2 * t]) return h;
          return o;
        }(e)), Y(e, e.l_desc), Y(e, e.d_desc), a = function (e) {
          var t;
          for (X(e, e.dyn_ltree, e.l_desc.max_code), X(e, e.dyn_dtree, e.d_desc.max_code), Y(e, e.bl_desc), t = c - 1; 3 <= t && 0 === e.bl_tree[2 * S[t] + 1]; t--);
          return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
        }(e), i = e.opt_len + 3 + 7 >>> 3, (s = e.static_len + 3 + 7 >>> 3) <= i && (i = s)) : i = s = r + 5, r + 4 <= i && -1 !== t ? J(e, t, r, n) : 4 === e.strategy || s === i ? (P(e, 2 + (n ? 1 : 0), 3), K(e, z, C)) : (P(e, 4 + (n ? 1 : 0), 3), function (e, t, r, n) {
          var i;
          for (P(e, t - 257, 5), P(e, r - 1, 5), P(e, n - 4, 4), i = 0; i < n; i++) P(e, e.bl_tree[2 * S[i] + 1], 3);
          V(e, e.dyn_ltree, t - 1), V(e, e.dyn_dtree, r - 1);
        }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, a + 1), K(e, e.dyn_ltree, e.dyn_dtree)), W(e), n && M(e);
      }, r._tr_tally = function (e, t, r) {
        return e.pending_buf[e.d_buf + 2 * e.last_lit] = t >>> 8 & 255, e.pending_buf[e.d_buf + 2 * e.last_lit + 1] = 255 & t, e.pending_buf[e.l_buf + e.last_lit] = 255 & r, e.last_lit++, 0 === t ? e.dyn_ltree[2 * r]++ : (e.matches++, t--, e.dyn_ltree[2 * (A[r] + u + 1)]++, e.dyn_dtree[2 * N(t)]++), e.last_lit === e.lit_bufsize - 1;
      }, r._tr_align = function (e) {
        P(e, 2, 3), L(e, m, z), function (e) {
          16 === e.bi_valid ? (U(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : 8 <= e.bi_valid && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
        }(e);
      };
    }, {
      "../utils/common": 41
    }],
    53: [function (e, t, r) {
      "use strict";

      t.exports = function () {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      };
    }, {}],
    54: [function (e, t, r) {
      (function (e) {
        !function (r, n) {
          "use strict";

          if (!r.setImmediate) {
            var i,
              s,
              t,
              a,
              o = 1,
              h = {},
              u = !1,
              l = r.document,
              e = Object.getPrototypeOf && Object.getPrototypeOf(r);
            e = e && e.setTimeout ? e : r, i = "[object process]" === {}.toString.call(r.process) ? function (e) {
              process.nextTick(function () {
                c(e);
              });
            } : function () {
              if (r.postMessage && !r.importScripts) {
                var e = !0,
                  t = r.onmessage;
                return r.onmessage = function () {
                  e = !1;
                }, r.postMessage("", "*"), r.onmessage = t, e;
              }
            }() ? (a = "setImmediate$" + Math.random() + "$", r.addEventListener ? r.addEventListener("message", d, !1) : r.attachEvent("onmessage", d), function (e) {
              r.postMessage(a + e, "*");
            }) : r.MessageChannel ? ((t = new MessageChannel()).port1.onmessage = function (e) {
              c(e.data);
            }, function (e) {
              t.port2.postMessage(e);
            }) : l && "onreadystatechange" in l.createElement("script") ? (s = l.documentElement, function (e) {
              var t = l.createElement("script");
              t.onreadystatechange = function () {
                c(e), t.onreadystatechange = null, s.removeChild(t), t = null;
              }, s.appendChild(t);
            }) : function (e) {
              setTimeout(c, 0, e);
            }, e.setImmediate = function (e) {
              "function" != typeof e && (e = new Function("" + e));
              for (var t = new Array(arguments.length - 1), r = 0; r < t.length; r++) t[r] = arguments[r + 1];
              var n = {
                callback: e,
                args: t
              };
              return h[o] = n, i(o), o++;
            }, e.clearImmediate = f;
          }
          function f(e) {
            delete h[e];
          }
          function c(e) {
            if (u) setTimeout(c, 0, e);else {
              var t = h[e];
              if (t) {
                u = !0;
                try {
                  !function (e) {
                    var t = e.callback,
                      r = e.args;
                    switch (r.length) {
                      case 0:
                        t();
                        break;
                      case 1:
                        t(r[0]);
                        break;
                      case 2:
                        t(r[0], r[1]);
                        break;
                      case 3:
                        t(r[0], r[1], r[2]);
                        break;
                      default:
                        t.apply(n, r);
                    }
                  }(t);
                } finally {
                  f(e), u = !1;
                }
              }
            }
          }
          function d(e) {
            e.source === r && "string" == typeof e.data && 0 === e.data.indexOf(a) && c(+e.data.slice(a.length));
          }
        }("undefined" == typeof self ? void 0 === e ? this : e : self);
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}]
  }, {}, [10])(10);
});

/***/ }),

/***/ 52769:
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/pkijs@3.2.4/node_modules/pkijs/build/index.es.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractCryptoEngine: () => (/* binding */ AbstractCryptoEngine),
/* harmony export */   AccessDescription: () => (/* binding */ AccessDescription),
/* harmony export */   Accuracy: () => (/* binding */ Accuracy),
/* harmony export */   AlgorithmIdentifier: () => (/* binding */ AlgorithmIdentifier),
/* harmony export */   AltName: () => (/* binding */ AltName),
/* harmony export */   ArgumentError: () => (/* binding */ ArgumentError),
/* harmony export */   AsnError: () => (/* binding */ AsnError),
/* harmony export */   AttCertValidityPeriod: () => (/* binding */ AttCertValidityPeriod),
/* harmony export */   Attribute: () => (/* binding */ Attribute),
/* harmony export */   AttributeCertificateInfoV1: () => (/* binding */ AttributeCertificateInfoV1),
/* harmony export */   AttributeCertificateInfoV2: () => (/* binding */ AttributeCertificateInfoV2),
/* harmony export */   AttributeCertificateV1: () => (/* binding */ AttributeCertificateV1),
/* harmony export */   AttributeCertificateV2: () => (/* binding */ AttributeCertificateV2),
/* harmony export */   AttributeTypeAndValue: () => (/* binding */ AttributeTypeAndValue),
/* harmony export */   AuthenticatedSafe: () => (/* binding */ AuthenticatedSafe),
/* harmony export */   AuthorityKeyIdentifier: () => (/* binding */ AuthorityKeyIdentifier),
/* harmony export */   BasicConstraints: () => (/* binding */ BasicConstraints),
/* harmony export */   BasicOCSPResponse: () => (/* binding */ BasicOCSPResponse),
/* harmony export */   CAVersion: () => (/* binding */ CAVersion),
/* harmony export */   CRLBag: () => (/* binding */ CRLBag),
/* harmony export */   CRLDistributionPoints: () => (/* binding */ CRLDistributionPoints),
/* harmony export */   CertBag: () => (/* binding */ CertBag),
/* harmony export */   CertID: () => (/* binding */ CertID),
/* harmony export */   Certificate: () => (/* binding */ Certificate),
/* harmony export */   CertificateChainValidationEngine: () => (/* binding */ CertificateChainValidationEngine),
/* harmony export */   CertificatePolicies: () => (/* binding */ CertificatePolicies),
/* harmony export */   CertificateRevocationList: () => (/* binding */ CertificateRevocationList),
/* harmony export */   CertificateSet: () => (/* binding */ CertificateSet),
/* harmony export */   CertificateTemplate: () => (/* binding */ CertificateTemplate),
/* harmony export */   CertificationRequest: () => (/* binding */ CertificationRequest),
/* harmony export */   ChainValidationCode: () => (/* binding */ ChainValidationCode),
/* harmony export */   ChainValidationError: () => (/* binding */ ChainValidationError),
/* harmony export */   ContentInfo: () => (/* binding */ ContentInfo),
/* harmony export */   CryptoEngine: () => (/* binding */ CryptoEngine),
/* harmony export */   DigestInfo: () => (/* binding */ DigestInfo),
/* harmony export */   DistributionPoint: () => (/* binding */ DistributionPoint),
/* harmony export */   ECCCMSSharedInfo: () => (/* binding */ ECCCMSSharedInfo),
/* harmony export */   ECNamedCurves: () => (/* binding */ ECNamedCurves),
/* harmony export */   ECPrivateKey: () => (/* binding */ ECPrivateKey),
/* harmony export */   ECPublicKey: () => (/* binding */ ECPublicKey),
/* harmony export */   EncapsulatedContentInfo: () => (/* binding */ EncapsulatedContentInfo),
/* harmony export */   EncryptedContentInfo: () => (/* binding */ EncryptedContentInfo),
/* harmony export */   EncryptedData: () => (/* binding */ EncryptedData),
/* harmony export */   EnvelopedData: () => (/* binding */ EnvelopedData),
/* harmony export */   ExtKeyUsage: () => (/* binding */ ExtKeyUsage),
/* harmony export */   Extension: () => (/* binding */ Extension),
/* harmony export */   ExtensionValueFactory: () => (/* binding */ ExtensionValueFactory),
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   GeneralName: () => (/* binding */ GeneralName),
/* harmony export */   GeneralNames: () => (/* binding */ GeneralNames),
/* harmony export */   GeneralSubtree: () => (/* binding */ GeneralSubtree),
/* harmony export */   HASHED_MESSAGE: () => (/* binding */ HASHED_MESSAGE),
/* harmony export */   HASH_ALGORITHM: () => (/* binding */ HASH_ALGORITHM),
/* harmony export */   Holder: () => (/* binding */ Holder),
/* harmony export */   InfoAccess: () => (/* binding */ InfoAccess),
/* harmony export */   IssuerAndSerialNumber: () => (/* binding */ IssuerAndSerialNumber),
/* harmony export */   IssuerSerial: () => (/* binding */ IssuerSerial),
/* harmony export */   IssuingDistributionPoint: () => (/* binding */ IssuingDistributionPoint),
/* harmony export */   KEKIdentifier: () => (/* binding */ KEKIdentifier),
/* harmony export */   KEKRecipientInfo: () => (/* binding */ KEKRecipientInfo),
/* harmony export */   KeyAgreeRecipientIdentifier: () => (/* binding */ KeyAgreeRecipientIdentifier),
/* harmony export */   KeyAgreeRecipientInfo: () => (/* binding */ KeyAgreeRecipientInfo),
/* harmony export */   KeyBag: () => (/* binding */ KeyBag),
/* harmony export */   KeyTransRecipientInfo: () => (/* binding */ KeyTransRecipientInfo),
/* harmony export */   MICROS: () => (/* binding */ MICROS),
/* harmony export */   MILLIS: () => (/* binding */ MILLIS),
/* harmony export */   MacData: () => (/* binding */ MacData),
/* harmony export */   MessageImprint: () => (/* binding */ MessageImprint),
/* harmony export */   NameConstraints: () => (/* binding */ NameConstraints),
/* harmony export */   OCSPRequest: () => (/* binding */ OCSPRequest),
/* harmony export */   OCSPResponse: () => (/* binding */ OCSPResponse),
/* harmony export */   ObjectDigestInfo: () => (/* binding */ ObjectDigestInfo),
/* harmony export */   OriginatorIdentifierOrKey: () => (/* binding */ OriginatorIdentifierOrKey),
/* harmony export */   OriginatorInfo: () => (/* binding */ OriginatorInfo),
/* harmony export */   OriginatorPublicKey: () => (/* binding */ OriginatorPublicKey),
/* harmony export */   OtherCertificateFormat: () => (/* binding */ OtherCertificateFormat),
/* harmony export */   OtherKeyAttribute: () => (/* binding */ OtherKeyAttribute),
/* harmony export */   OtherPrimeInfo: () => (/* binding */ OtherPrimeInfo),
/* harmony export */   OtherRecipientInfo: () => (/* binding */ OtherRecipientInfo),
/* harmony export */   OtherRevocationInfoFormat: () => (/* binding */ OtherRevocationInfoFormat),
/* harmony export */   PBES2Params: () => (/* binding */ PBES2Params),
/* harmony export */   PBKDF2Params: () => (/* binding */ PBKDF2Params),
/* harmony export */   PFX: () => (/* binding */ PFX),
/* harmony export */   PKCS8ShroudedKeyBag: () => (/* binding */ PKCS8ShroudedKeyBag),
/* harmony export */   PKIStatus: () => (/* binding */ PKIStatus),
/* harmony export */   PKIStatusInfo: () => (/* binding */ PKIStatusInfo),
/* harmony export */   POLICY_IDENTIFIER: () => (/* binding */ POLICY_IDENTIFIER),
/* harmony export */   POLICY_QUALIFIERS: () => (/* binding */ POLICY_QUALIFIERS),
/* harmony export */   ParameterError: () => (/* binding */ ParameterError),
/* harmony export */   PasswordRecipientinfo: () => (/* binding */ PasswordRecipientinfo),
/* harmony export */   PkiObject: () => (/* binding */ PkiObject),
/* harmony export */   PolicyConstraints: () => (/* binding */ PolicyConstraints),
/* harmony export */   PolicyInformation: () => (/* binding */ PolicyInformation),
/* harmony export */   PolicyMapping: () => (/* binding */ PolicyMapping),
/* harmony export */   PolicyMappings: () => (/* binding */ PolicyMappings),
/* harmony export */   PolicyQualifierInfo: () => (/* binding */ PolicyQualifierInfo),
/* harmony export */   PrivateKeyInfo: () => (/* binding */ PrivateKeyInfo),
/* harmony export */   PrivateKeyUsagePeriod: () => (/* binding */ PrivateKeyUsagePeriod),
/* harmony export */   PublicKeyInfo: () => (/* binding */ PublicKeyInfo),
/* harmony export */   QCStatement: () => (/* binding */ QCStatement),
/* harmony export */   QCStatements: () => (/* binding */ QCStatements),
/* harmony export */   RDN: () => (/* binding */ RDN),
/* harmony export */   RSAESOAEPParams: () => (/* binding */ RSAESOAEPParams),
/* harmony export */   RSAPrivateKey: () => (/* binding */ RSAPrivateKey),
/* harmony export */   RSAPublicKey: () => (/* binding */ RSAPublicKey),
/* harmony export */   RSASSAPSSParams: () => (/* binding */ RSASSAPSSParams),
/* harmony export */   RecipientEncryptedKey: () => (/* binding */ RecipientEncryptedKey),
/* harmony export */   RecipientEncryptedKeys: () => (/* binding */ RecipientEncryptedKeys),
/* harmony export */   RecipientIdentifier: () => (/* binding */ RecipientIdentifier),
/* harmony export */   RecipientInfo: () => (/* binding */ RecipientInfo),
/* harmony export */   RecipientKeyIdentifier: () => (/* binding */ RecipientKeyIdentifier),
/* harmony export */   RelativeDistinguishedNames: () => (/* binding */ RelativeDistinguishedNames),
/* harmony export */   Request: () => (/* binding */ Request),
/* harmony export */   ResponseBytes: () => (/* binding */ ResponseBytes),
/* harmony export */   ResponseData: () => (/* binding */ ResponseData),
/* harmony export */   RevocationInfoChoices: () => (/* binding */ RevocationInfoChoices),
/* harmony export */   RevokedCertificate: () => (/* binding */ RevokedCertificate),
/* harmony export */   SECONDS: () => (/* binding */ SECONDS),
/* harmony export */   SafeBag: () => (/* binding */ SafeBag),
/* harmony export */   SafeBagValueFactory: () => (/* binding */ SafeBagValueFactory),
/* harmony export */   SafeContents: () => (/* binding */ SafeContents),
/* harmony export */   SecretBag: () => (/* binding */ SecretBag),
/* harmony export */   Signature: () => (/* binding */ Signature),
/* harmony export */   SignedAndUnsignedAttributes: () => (/* binding */ SignedAndUnsignedAttributes),
/* harmony export */   SignedCertificateTimestamp: () => (/* binding */ SignedCertificateTimestamp),
/* harmony export */   SignedCertificateTimestampList: () => (/* binding */ SignedCertificateTimestampList),
/* harmony export */   SignedData: () => (/* binding */ SignedData),
/* harmony export */   SignedDataVerifyError: () => (/* binding */ SignedDataVerifyError),
/* harmony export */   SignerInfo: () => (/* binding */ SignerInfo),
/* harmony export */   SingleResponse: () => (/* binding */ SingleResponse),
/* harmony export */   SubjectDirectoryAttributes: () => (/* binding */ SubjectDirectoryAttributes),
/* harmony export */   TBSRequest: () => (/* binding */ TBSRequest),
/* harmony export */   TSTInfo: () => (/* binding */ TSTInfo),
/* harmony export */   TYPE: () => (/* binding */ TYPE$4),
/* harmony export */   TYPE_AND_VALUES: () => (/* binding */ TYPE_AND_VALUES),
/* harmony export */   Time: () => (/* binding */ Time),
/* harmony export */   TimeStampReq: () => (/* binding */ TimeStampReq),
/* harmony export */   TimeStampResp: () => (/* binding */ TimeStampResp),
/* harmony export */   TimeType: () => (/* binding */ TimeType),
/* harmony export */   V2Form: () => (/* binding */ V2Form),
/* harmony export */   VALUE: () => (/* binding */ VALUE$5),
/* harmony export */   VALUE_BEFORE_DECODE: () => (/* binding */ VALUE_BEFORE_DECODE),
/* harmony export */   checkCA: () => (/* binding */ checkCA),
/* harmony export */   createCMSECDSASignature: () => (/* binding */ createCMSECDSASignature),
/* harmony export */   createECDSASignatureFromCMS: () => (/* binding */ createECDSASignatureFromCMS),
/* harmony export */   engine: () => (/* binding */ engine),
/* harmony export */   getAlgorithmByOID: () => (/* binding */ getAlgorithmByOID),
/* harmony export */   getAlgorithmParameters: () => (/* binding */ getAlgorithmParameters),
/* harmony export */   getCrypto: () => (/* binding */ getCrypto),
/* harmony export */   getEngine: () => (/* binding */ getEngine),
/* harmony export */   getHashAlgorithm: () => (/* binding */ getHashAlgorithm),
/* harmony export */   getOIDByAlgorithm: () => (/* binding */ getOIDByAlgorithm),
/* harmony export */   getRandomValues: () => (/* binding */ getRandomValues),
/* harmony export */   id_AnyPolicy: () => (/* binding */ id_AnyPolicy),
/* harmony export */   id_AuthorityInfoAccess: () => (/* binding */ id_AuthorityInfoAccess),
/* harmony export */   id_AuthorityKeyIdentifier: () => (/* binding */ id_AuthorityKeyIdentifier),
/* harmony export */   id_BaseCRLNumber: () => (/* binding */ id_BaseCRLNumber),
/* harmony export */   id_BasicConstraints: () => (/* binding */ id_BasicConstraints),
/* harmony export */   id_CRLBag_X509CRL: () => (/* binding */ id_CRLBag_X509CRL),
/* harmony export */   id_CRLDistributionPoints: () => (/* binding */ id_CRLDistributionPoints),
/* harmony export */   id_CRLNumber: () => (/* binding */ id_CRLNumber),
/* harmony export */   id_CRLReason: () => (/* binding */ id_CRLReason),
/* harmony export */   id_CertBag_AttributeCertificate: () => (/* binding */ id_CertBag_AttributeCertificate),
/* harmony export */   id_CertBag_SDSICertificate: () => (/* binding */ id_CertBag_SDSICertificate),
/* harmony export */   id_CertBag_X509Certificate: () => (/* binding */ id_CertBag_X509Certificate),
/* harmony export */   id_CertificateIssuer: () => (/* binding */ id_CertificateIssuer),
/* harmony export */   id_CertificatePolicies: () => (/* binding */ id_CertificatePolicies),
/* harmony export */   id_ContentType_Data: () => (/* binding */ id_ContentType_Data),
/* harmony export */   id_ContentType_EncryptedData: () => (/* binding */ id_ContentType_EncryptedData),
/* harmony export */   id_ContentType_EnvelopedData: () => (/* binding */ id_ContentType_EnvelopedData),
/* harmony export */   id_ContentType_SignedData: () => (/* binding */ id_ContentType_SignedData),
/* harmony export */   id_ExtKeyUsage: () => (/* binding */ id_ExtKeyUsage),
/* harmony export */   id_FreshestCRL: () => (/* binding */ id_FreshestCRL),
/* harmony export */   id_InhibitAnyPolicy: () => (/* binding */ id_InhibitAnyPolicy),
/* harmony export */   id_InvalidityDate: () => (/* binding */ id_InvalidityDate),
/* harmony export */   id_IssuerAltName: () => (/* binding */ id_IssuerAltName),
/* harmony export */   id_IssuingDistributionPoint: () => (/* binding */ id_IssuingDistributionPoint),
/* harmony export */   id_KeyUsage: () => (/* binding */ id_KeyUsage),
/* harmony export */   id_MicrosoftAppPolicies: () => (/* binding */ id_MicrosoftAppPolicies),
/* harmony export */   id_MicrosoftCaVersion: () => (/* binding */ id_MicrosoftCaVersion),
/* harmony export */   id_MicrosoftCertTemplateV1: () => (/* binding */ id_MicrosoftCertTemplateV1),
/* harmony export */   id_MicrosoftCertTemplateV2: () => (/* binding */ id_MicrosoftCertTemplateV2),
/* harmony export */   id_MicrosoftPrevCaCertHash: () => (/* binding */ id_MicrosoftPrevCaCertHash),
/* harmony export */   id_NameConstraints: () => (/* binding */ id_NameConstraints),
/* harmony export */   id_PKIX_OCSP_Basic: () => (/* binding */ id_PKIX_OCSP_Basic),
/* harmony export */   id_PolicyConstraints: () => (/* binding */ id_PolicyConstraints),
/* harmony export */   id_PolicyMappings: () => (/* binding */ id_PolicyMappings),
/* harmony export */   id_PrivateKeyUsagePeriod: () => (/* binding */ id_PrivateKeyUsagePeriod),
/* harmony export */   id_QCStatements: () => (/* binding */ id_QCStatements),
/* harmony export */   id_SignedCertificateTimestampList: () => (/* binding */ id_SignedCertificateTimestampList),
/* harmony export */   id_SubjectAltName: () => (/* binding */ id_SubjectAltName),
/* harmony export */   id_SubjectDirectoryAttributes: () => (/* binding */ id_SubjectDirectoryAttributes),
/* harmony export */   id_SubjectInfoAccess: () => (/* binding */ id_SubjectInfoAccess),
/* harmony export */   id_SubjectKeyIdentifier: () => (/* binding */ id_SubjectKeyIdentifier),
/* harmony export */   id_ad: () => (/* binding */ id_ad),
/* harmony export */   id_ad_caIssuers: () => (/* binding */ id_ad_caIssuers),
/* harmony export */   id_ad_ocsp: () => (/* binding */ id_ad_ocsp),
/* harmony export */   id_eContentType_TSTInfo: () => (/* binding */ id_eContentType_TSTInfo),
/* harmony export */   id_pkix: () => (/* binding */ id_pkix),
/* harmony export */   id_sha1: () => (/* binding */ id_sha1),
/* harmony export */   id_sha256: () => (/* binding */ id_sha256),
/* harmony export */   id_sha384: () => (/* binding */ id_sha384),
/* harmony export */   id_sha512: () => (/* binding */ id_sha512),
/* harmony export */   kdf: () => (/* binding */ kdf),
/* harmony export */   setEngine: () => (/* binding */ setEngine),
/* harmony export */   stringPrep: () => (/* binding */ stringPrep),
/* harmony export */   verifySCTsForCertificate: () => (/* binding */ verifySCTsForCertificate)
/* harmony export */ });
/* harmony import */ var _Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/@babel+runtime@7.25.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 18540);
/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! asn1js */ 5938);
/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pvtsutils */ 84727);
/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pvutils */ 58172);
/* harmony import */ var bytestreamjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bytestreamjs */ 5566);
/* harmony import */ var _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/sha1 */ 95045);
/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/sha256 */ 69863);
/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/sha512 */ 11742);

/*!
 * Copyright (c) 2014, GlobalSign
 * Copyright (c) 2015-2019, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the {organization} nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */









const EMPTY_BUFFER = new ArrayBuffer(0);
const EMPTY_STRING = "";
class ArgumentError extends TypeError {
  constructor() {
    super(...arguments);
    this.name = ArgumentError.NAME;
  }
  static isType(value, type) {
    if (typeof type === "string") {
      if (type === "Array" && Array.isArray(value)) {
        return true;
      } else if (type === "ArrayBuffer" && value instanceof ArrayBuffer) {
        return true;
      } else if (type === "ArrayBufferView" && ArrayBuffer.isView(value)) {
        return true;
      } else if (typeof value === type) {
        return true;
      }
    } else if (value instanceof type) {
      return true;
    }
    return false;
  }
  static assert(value, name, ...types) {
    for (const type of types) {
      if (this.isType(value, type)) {
        return;
      }
    }
    const typeNames = types.map(o => o instanceof Function && "name" in o ? o.name : `${o}`);
    throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(" or ")})` : typeNames[0]}`);
  }
}
ArgumentError.NAME = "ArgumentError";
class ParameterError extends TypeError {
  static assert(...args) {
    let target = null;
    let params;
    let fields;
    if (typeof args[0] === "string") {
      target = args[0];
      params = args[1];
      fields = args.slice(2);
    } else {
      params = args[0];
      fields = args.slice(1);
    }
    ArgumentError.assert(params, "parameters", "object");
    for (const field of fields) {
      const value = params[field];
      if (value === undefined || value === null) {
        throw new ParameterError(field, target);
      }
    }
  }
  static assertEmpty(value, name, target) {
    if (value === undefined || value === null) {
      throw new ParameterError(name, target);
    }
  }
  constructor(field, target = null, message) {
    super();
    this.name = ParameterError.NAME;
    this.field = field;
    if (target) {
      this.target = target;
    }
    if (message) {
      this.message = message;
    } else {
      this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;
    }
  }
}
ParameterError.NAME = "ParameterError";
class AsnError extends Error {
  static assertSchema(asn1, target) {
    if (!asn1.verified) {
      throw new Error(`Object's schema was not verified against input data for ${target}`);
    }
  }
  static assert(asn, target) {
    if (asn.offset === -1) {
      throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);
    }
  }
  constructor(message) {
    super(message);
    this.name = "AsnError";
  }
}
class PkiObject {
  static blockName() {
    return this.CLASS_NAME;
  }
  static fromBER(raw) {
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(raw);
    AsnError.assert(asn1, this.name);
    try {
      return new this({
        schema: asn1.result
      });
    } catch (e) {
      throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);
    }
  }
  static defaultValues(memberName) {
    throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);
  }
  static schema(parameters = {}) {
    throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);
  }
  get className() {
    return this.constructor.CLASS_NAME;
  }
  toString(encoding = "hex") {
    let schema;
    try {
      schema = this.toSchema();
    } catch {
      schema = this.toSchema(true);
    }
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToString(schema.toBER(), encoding);
  }
}
PkiObject.CLASS_NAME = "PkiObject";
function stringPrep(inputString) {
  let isSpace = false;
  let cutResult = EMPTY_STRING;
  const result = inputString.trim();
  for (let i = 0; i < result.length; i++) {
    if (result.charCodeAt(i) === 32) {
      if (isSpace === false) isSpace = true;
    } else {
      if (isSpace) {
        cutResult += " ";
        isSpace = false;
      }
      cutResult += result[i];
    }
  }
  return cutResult.toLowerCase();
}
const TYPE$5 = "type";
const VALUE$6 = "value";
class AttributeTypeAndValue extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));
    this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$5:
        return EMPTY_STRING;
      case VALUE$6:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.type || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.value || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [TYPE$5, "typeValue"]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttributeTypeAndValue.schema({
      names: {
        type: TYPE$5,
        value: "typeValue"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.type.valueBlock.toString();
    this.value = asn1.result.typeValue;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.type
      }), this.value]
    });
  }
  toJSON() {
    const _object = {
      type: this.type
    };
    if (Object.keys(this.value).length !== 0) {
      _object.value = this.value.toJSON();
    } else {
      _object.value = this.value;
    }
    return _object;
  }
  isEqual(compareTo) {
    const stringBlockNames = [asn1js__WEBPACK_IMPORTED_MODULE_1__.Utf8String.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.UniversalString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.NumericString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.TeletexString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.VideotexString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.IA5String.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.GraphicString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.VisibleString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralString.blockName(), asn1js__WEBPACK_IMPORTED_MODULE_1__.CharacterString.blockName()];
    if (compareTo instanceof ArrayBuffer) {
      return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);
    }
    if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {
      if (this.type !== compareTo.type) return false;
      const isStringPair = [false, false];
      const thisName = this.value.constructor.blockName();
      for (const name of stringBlockNames) {
        if (thisName === name) {
          isStringPair[0] = true;
        }
        if (compareTo.value.constructor.blockName() === name) {
          isStringPair[1] = true;
        }
      }
      if (isStringPair[0] !== isStringPair[1]) {
        return false;
      }
      const isString = isStringPair[0] && isStringPair[1];
      if (isString) {
        const value1 = stringPrep(this.value.valueBlock.value);
        const value2 = stringPrep(compareTo.value.valueBlock.value);
        if (value1.localeCompare(value2) !== 0) return false;
      } else {
        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView)) return false;
      }
      return true;
    }
    return false;
  }
}
AttributeTypeAndValue.CLASS_NAME = "AttributeTypeAndValue";
const TYPE_AND_VALUES = "typesAndValues";
const VALUE_BEFORE_DECODE = "valueBeforeDecode";
const RDN = "RDN";
class RelativeDistinguishedNames extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.typesAndValues = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));
    this.valueBeforeDecode = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE_AND_VALUES:
        return [];
      case VALUE_BEFORE_DECODE:
        return EMPTY_BUFFER;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE_AND_VALUES:
        return memberValue.length === 0;
      case VALUE_BEFORE_DECODE:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.repeatedSequence || EMPTY_STRING,
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
            name: names.repeatedSet || EMPTY_STRING,
            value: AttributeTypeAndValue.schema(names.typeAndValue || {})
          })]
        })
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [RDN, TYPE_AND_VALUES]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RelativeDistinguishedNames.schema({
      names: {
        blockName: RDN,
        repeatedSet: TYPE_AND_VALUES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (TYPE_AND_VALUES in asn1.result) {
      this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({
        schema: element
      }));
    }
    this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;
  }
  toSchema() {
    if (this.valueBeforeDecode.byteLength === 0) {
      return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
          value: Array.from(this.typesAndValues, o => o.toSchema())
        })]
      });
    }
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.valueBeforeDecode);
    AsnError.assert(asn1, "RelativeDistinguishedNames");
    if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence)) {
      throw new Error("ASN.1 result should be SEQUENCE");
    }
    return asn1.result;
  }
  toJSON() {
    return {
      typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())
    };
  }
  isEqual(compareTo) {
    if (compareTo instanceof RelativeDistinguishedNames) {
      if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;
      for (const [index, typeAndValue] of this.typesAndValues.entries()) {
        if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;
      }
      return true;
    }
    if (compareTo instanceof ArrayBuffer) {
      return pvutils__WEBPACK_IMPORTED_MODULE_3__.isEqualBuffer(this.valueBeforeDecode, compareTo);
    }
    return false;
  }
}
RelativeDistinguishedNames.CLASS_NAME = "RelativeDistinguishedNames";
const TYPE$4 = "type";
const VALUE$5 = "value";
function builtInStandardAttributes(parameters = {}, optional = false) {
  const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    optional,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 2,
        tagNumber: 1
      },
      name: names.country_name || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.NumericString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString()]
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 2,
        tagNumber: 2
      },
      name: names.administration_domain_name || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.NumericString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString()]
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      name: names.network_address || EMPTY_STRING,
      isHexOnly: true
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 1
      },
      name: names.terminal_identifier || EMPTY_STRING,
      isHexOnly: true
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 2
      },
      name: names.private_domain_name || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.NumericString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString()]
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 3
      },
      name: names.organization_name || EMPTY_STRING,
      isHexOnly: true
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      optional: true,
      name: names.numeric_user_identifier || EMPTY_STRING,
      idBlock: {
        tagClass: 3,
        tagNumber: 4
      },
      isHexOnly: true
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      name: names.personal_name || EMPTY_STRING,
      idBlock: {
        tagClass: 3,
        tagNumber: 5
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        isHexOnly: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        isHexOnly: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        isHexOnly: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        isHexOnly: true
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      name: names.organizational_unit_names || EMPTY_STRING,
      idBlock: {
        tagClass: 3,
        tagNumber: 6
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString()
      })]
    })]
  });
}
function builtInDomainDefinedAttributes(optional = false) {
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    optional,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString()]
  });
}
function extensionAttributes(optional = false) {
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
    optional,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      isHexOnly: true
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 1
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any()]
    })]
  });
}
class GeneralName extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));
    this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$4:
        return 9;
      case VALUE$5:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE$4:
        return memberValue === GeneralName.defaultValues(memberName);
      case VALUE$5:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        name: names.blockName || EMPTY_STRING,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any()]
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        name: names.blockName || EMPTY_STRING,
        value: [builtInStandardAttributes(names.builtInStandardAttributes || {}, false), builtInDomainDefinedAttributes(true), extensionAttributes(true)]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        },
        name: names.blockName || EMPTY_STRING,
        value: [RelativeDistinguishedNames.schema(names.directoryName || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 5
        },
        name: names.blockName || EMPTY_STRING,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.TeletexString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.UniversalString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Utf8String(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString()]
          })]
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.TeletexString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.PrintableString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.UniversalString(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Utf8String(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BmpString()]
          })]
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 6
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 7
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 8
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, ["blockName", "otherName", "rfc822Name", "dNSName", "x400Address", "directoryName", "ediPartyName", "uniformResourceIdentifier", "iPAddress", "registeredID"]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, GeneralName.schema({
      names: {
        blockName: "blockName",
        otherName: "otherName",
        rfc822Name: "rfc822Name",
        dNSName: "dNSName",
        x400Address: "x400Address",
        directoryName: {
          names: {
            blockName: "directoryName"
          }
        },
        ediPartyName: "ediPartyName",
        uniformResourceIdentifier: "uniformResourceIdentifier",
        iPAddress: "iPAddress",
        registeredID: "registeredID"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.blockName.idBlock.tagNumber;
    switch (this.type) {
      case 0:
        this.value = asn1.result.blockName;
        break;
      case 1:
      case 2:
      case 6:
        {
          const value = asn1.result.blockName;
          value.idBlock.tagClass = 1;
          value.idBlock.tagNumber = 22;
          const valueBER = value.toBER(false);
          const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(valueBER);
          AsnError.assert(asnValue, "GeneralName value");
          this.value = asnValue.result.valueBlock.value;
        }
        break;
      case 3:
        this.value = asn1.result.blockName;
        break;
      case 4:
        this.value = new RelativeDistinguishedNames({
          schema: asn1.result.directoryName
        });
        break;
      case 5:
        this.value = asn1.result.ediPartyName;
        break;
      case 7:
        this.value = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: asn1.result.blockName.valueBlock.valueHex
        });
        break;
      case 8:
        {
          const value = asn1.result.blockName;
          value.idBlock.tagClass = 1;
          value.idBlock.tagNumber = 6;
          const valueBER = value.toBER(false);
          const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(valueBER);
          AsnError.assert(asnValue, "GeneralName registeredID");
          this.value = asnValue.result.valueBlock.toString();
        }
        break;
    }
  }
  toSchema() {
    switch (this.type) {
      case 0:
      case 3:
      case 5:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: this.type
          },
          value: [this.value]
        });
      case 1:
      case 2:
      case 6:
        {
          const value = new asn1js__WEBPACK_IMPORTED_MODULE_1__.IA5String({
            value: this.value
          });
          value.idBlock.tagClass = 3;
          value.idBlock.tagNumber = this.type;
          return value;
        }
      case 4:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 4
          },
          value: [this.value.toSchema()]
        });
      case 7:
        {
          const value = this.value;
          value.idBlock.tagClass = 3;
          value.idBlock.tagNumber = this.type;
          return value;
        }
      case 8:
        {
          const value = new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
            value: this.value
          });
          value.idBlock.tagClass = 3;
          value.idBlock.tagNumber = this.type;
          return value;
        }
      default:
        return GeneralName.schema();
    }
  }
  toJSON() {
    const _object = {
      type: this.type,
      value: EMPTY_STRING
    };
    if (typeof this.value === "string") _object.value = this.value;else {
      try {
        _object.value = this.value.toJSON();
      } catch (ex) {}
    }
    return _object;
  }
}
GeneralName.CLASS_NAME = "GeneralName";
const ACCESS_METHOD = "accessMethod";
const ACCESS_LOCATION = "accessLocation";
const CLEAR_PROPS$1v = [ACCESS_METHOD, ACCESS_LOCATION];
class AccessDescription extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.accessMethod = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));
    this.accessLocation = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACCESS_METHOD:
        return EMPTY_STRING;
      case ACCESS_LOCATION:
        return new GeneralName();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.accessMethod || EMPTY_STRING
      }), GeneralName.schema(names.accessLocation || {})]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1v);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AccessDescription.schema({
      names: {
        accessMethod: ACCESS_METHOD,
        accessLocation: {
          names: {
            blockName: ACCESS_LOCATION
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.accessMethod = asn1.result.accessMethod.valueBlock.toString();
    this.accessLocation = new GeneralName({
      schema: asn1.result.accessLocation
    });
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.accessMethod
      }), this.accessLocation.toSchema()]
    });
  }
  toJSON() {
    return {
      accessMethod: this.accessMethod,
      accessLocation: this.accessLocation.toJSON()
    };
  }
}
AccessDescription.CLASS_NAME = "AccessDescription";
const SECONDS = "seconds";
const MILLIS = "millis";
const MICROS = "micros";
class Accuracy extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (SECONDS in parameters) {
      this.seconds = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));
    }
    if (MILLIS in parameters) {
      this.millis = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));
    }
    if (MICROS in parameters) {
      this.micros = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SECONDS:
      case MILLIS:
      case MICROS:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SECONDS:
      case MILLIS:
      case MICROS:
        return memberValue === Accuracy.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      optional: true,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        optional: true,
        name: names.seconds || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.millis || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.micros || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [SECONDS, MILLIS, MICROS]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Accuracy.schema({
      names: {
        seconds: SECONDS,
        millis: MILLIS,
        micros: MICROS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if ("seconds" in asn1.result) {
      this.seconds = asn1.result.seconds.valueBlock.valueDec;
    }
    if ("millis" in asn1.result) {
      const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        valueHex: asn1.result.millis.valueBlock.valueHex
      });
      this.millis = intMillis.valueBlock.valueDec;
    }
    if ("micros" in asn1.result) {
      const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        valueHex: asn1.result.micros.valueBlock.valueHex
      });
      this.micros = intMicros.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.seconds !== undefined) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.seconds
    }));
    if (this.millis !== undefined) {
      const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.millis
      });
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: intMillis.valueBlock.valueHexView
      }));
    }
    if (this.micros !== undefined) {
      const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.micros
      });
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: intMicros.valueBlock.valueHexView
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const _object = {};
    if (this.seconds !== undefined) _object.seconds = this.seconds;
    if (this.millis !== undefined) _object.millis = this.millis;
    if (this.micros !== undefined) _object.micros = this.micros;
    return _object;
  }
}
Accuracy.CLASS_NAME = "Accuracy";
const ALGORITHM_ID = "algorithmId";
const ALGORITHM_PARAMS = "algorithmParams";
const ALGORITHM$2 = "algorithm";
const PARAMS = "params";
const CLEAR_PROPS$1u = [ALGORITHM$2, PARAMS];
class AlgorithmIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.algorithmId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));
    if (ALGORITHM_PARAMS in parameters) {
      this.algorithmParams = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM_ID:
        return EMPTY_STRING;
      case ALGORITHM_PARAMS:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ALGORITHM_ID:
        return memberValue === EMPTY_STRING;
      case ALGORITHM_PARAMS:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      optional: names.optional || false,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.algorithmIdentifier || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.algorithmParams || EMPTY_STRING,
        optional: true
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1u);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AlgorithmIdentifier.schema({
      names: {
        algorithmIdentifier: ALGORITHM$2,
        algorithmParams: PARAMS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithmId = asn1.result.algorithm.valueBlock.toString();
    if (PARAMS in asn1.result) {
      this.algorithmParams = asn1.result.params;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.algorithmId
    }));
    if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) {
      outputArray.push(this.algorithmParams);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {
      algorithmId: this.algorithmId
    };
    if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) {
      object.algorithmParams = this.algorithmParams.toJSON();
    }
    return object;
  }
  isEqual(algorithmIdentifier) {
    if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {
      return false;
    }
    if (this.algorithmId !== algorithmIdentifier.algorithmId) {
      return false;
    }
    if (this.algorithmParams) {
      if (algorithmIdentifier.algorithmParams) {
        return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);
      }
      return false;
    }
    if (algorithmIdentifier.algorithmParams) {
      return false;
    }
    return true;
  }
}
AlgorithmIdentifier.CLASS_NAME = "AlgorithmIdentifier";
const ALT_NAMES = "altNames";
const CLEAR_PROPS$1t = [ALT_NAMES];
class AltName extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.altNames = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALT_NAMES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.altNames || EMPTY_STRING,
        value: GeneralName.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1t);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AltName.schema({
      names: {
        altNames: ALT_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (ALT_NAMES in asn1.result) {
      this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({
        schema: element
      }));
    }
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.altNames, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      altNames: Array.from(this.altNames, o => o.toJSON())
    };
  }
}
AltName.CLASS_NAME = "AltName";
const TYPE$3 = "type";
const VALUES$1 = "values";
const CLEAR_PROPS$1s = [TYPE$3, VALUES$1];
class Attribute extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));
    this.values = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$3:
        return EMPTY_STRING;
      case VALUES$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE$3:
        return memberValue === EMPTY_STRING;
      case VALUES$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.type || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        name: names.setName || EMPTY_STRING,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.values || EMPTY_STRING,
          value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1s);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Attribute.schema({
      names: {
        type: TYPE$3,
        values: VALUES$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.type.valueBlock.toString();
    this.values = asn1.result.values;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.type
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        value: this.values
      })]
    });
  }
  toJSON() {
    return {
      type: this.type,
      values: Array.from(this.values, o => o.toJSON())
    };
  }
}
Attribute.CLASS_NAME = "Attribute";
const NOT_BEFORE_TIME = "notBeforeTime";
const NOT_AFTER_TIME = "notAfterTime";
const CLEAR_PROPS$1r = [NOT_BEFORE_TIME, NOT_AFTER_TIME];
class AttCertValidityPeriod extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.notBeforeTime = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));
    this.notAfterTime = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case NOT_BEFORE_TIME:
      case NOT_AFTER_TIME:
        return new Date(0, 0, 0);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.notBeforeTime || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.notAfterTime || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1r);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttCertValidityPeriod.schema({
      names: {
        notBeforeTime: NOT_BEFORE_TIME,
        notAfterTime: NOT_AFTER_TIME
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.notBeforeTime = asn1.result.notBeforeTime.toDate();
    this.notAfterTime = asn1.result.notAfterTime.toDate();
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        valueDate: this.notBeforeTime
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        valueDate: this.notAfterTime
      })]
    });
  }
  toJSON() {
    return {
      notBeforeTime: this.notBeforeTime,
      notAfterTime: this.notAfterTime
    };
  }
}
AttCertValidityPeriod.CLASS_NAME = "AttCertValidityPeriod";
const NAMES = "names";
const GENERAL_NAMES = "generalNames";
class GeneralNames extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case "names":
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NAMES, {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      optional,
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.generalNames || EMPTY_STRING,
        value: GeneralName.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [NAMES, GENERAL_NAMES]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, GeneralNames.schema({
      names: {
        blockName: NAMES,
        generalNames: GENERAL_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.names = Array.from(asn1.result.generalNames, element => new GeneralName({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.names, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      names: Array.from(this.names, o => o.toJSON())
    };
  }
}
GeneralNames.CLASS_NAME = "GeneralNames";
const id_SubjectDirectoryAttributes = "2.5.29.9";
const id_SubjectKeyIdentifier = "2.5.29.14";
const id_KeyUsage = "2.5.29.15";
const id_PrivateKeyUsagePeriod = "2.5.29.16";
const id_SubjectAltName = "2.5.29.17";
const id_IssuerAltName = "2.5.29.18";
const id_BasicConstraints = "2.5.29.19";
const id_CRLNumber = "2.5.29.20";
const id_BaseCRLNumber = "2.5.29.27";
const id_CRLReason = "2.5.29.21";
const id_InvalidityDate = "2.5.29.24";
const id_IssuingDistributionPoint = "2.5.29.28";
const id_CertificateIssuer = "2.5.29.29";
const id_NameConstraints = "2.5.29.30";
const id_CRLDistributionPoints = "2.5.29.31";
const id_FreshestCRL = "2.5.29.46";
const id_CertificatePolicies = "2.5.29.32";
const id_AnyPolicy = "2.5.29.32.0";
const id_MicrosoftAppPolicies = "1.3.6.1.4.1.311.21.10";
const id_PolicyMappings = "2.5.29.33";
const id_AuthorityKeyIdentifier = "2.5.29.35";
const id_PolicyConstraints = "2.5.29.36";
const id_ExtKeyUsage = "2.5.29.37";
const id_InhibitAnyPolicy = "2.5.29.54";
const id_AuthorityInfoAccess = "1.3.6.1.5.5.7.1.1";
const id_SubjectInfoAccess = "1.3.6.1.5.5.7.1.11";
const id_SignedCertificateTimestampList = "1.3.6.1.4.1.11129.2.4.2";
const id_MicrosoftCertTemplateV1 = "1.3.6.1.4.1.311.20.2";
const id_MicrosoftPrevCaCertHash = "1.3.6.1.4.1.311.21.2";
const id_MicrosoftCertTemplateV2 = "1.3.6.1.4.1.311.21.7";
const id_MicrosoftCaVersion = "1.3.6.1.4.1.311.21.1";
const id_QCStatements = "1.3.6.1.5.5.7.1.3";
const id_ContentType_Data = "1.2.840.113549.1.7.1";
const id_ContentType_SignedData = "1.2.840.113549.1.7.2";
const id_ContentType_EnvelopedData = "1.2.840.113549.1.7.3";
const id_ContentType_EncryptedData = "1.2.840.113549.1.7.6";
const id_eContentType_TSTInfo = "1.2.840.113549.1.9.16.1.4";
const id_CertBag_X509Certificate = "1.2.840.113549.1.9.22.1";
const id_CertBag_SDSICertificate = "1.2.840.113549.1.9.22.2";
const id_CertBag_AttributeCertificate = "1.2.840.113549.1.9.22.3";
const id_CRLBag_X509CRL = "1.2.840.113549.1.9.23.1";
const id_pkix = "1.3.6.1.5.5.7";
const id_ad = `${id_pkix}.48`;
const id_PKIX_OCSP_Basic = `${id_ad}.1.1`;
const id_ad_caIssuers = `${id_ad}.2`;
const id_ad_ocsp = `${id_ad}.1`;
const id_sha1 = "1.3.14.3.2.26";
const id_sha256 = "2.16.840.1.101.3.4.2.1";
const id_sha384 = "2.16.840.1.101.3.4.2.2";
const id_sha512 = "2.16.840.1.101.3.4.2.3";
const KEY_IDENTIFIER$1 = "keyIdentifier";
const AUTHORITY_CERT_ISSUER = "authorityCertIssuer";
const AUTHORITY_CERT_SERIAL_NUMBER = "authorityCertSerialNumber";
const CLEAR_PROPS$1q = [KEY_IDENTIFIER$1, AUTHORITY_CERT_ISSUER, AUTHORITY_CERT_SERIAL_NUMBER];
class AuthorityKeyIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (KEY_IDENTIFIER$1 in parameters) {
      this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));
    }
    if (AUTHORITY_CERT_ISSUER in parameters) {
      this.authorityCertIssuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));
    }
    if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {
      this.authorityCertSerialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_IDENTIFIER$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case AUTHORITY_CERT_ISSUER:
        return [];
      case AUTHORITY_CERT_SERIAL_NUMBER:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.keyIdentifier || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.authorityCertIssuer || EMPTY_STRING,
          value: GeneralName.schema()
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.authorityCertSerialNumber || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1q);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({
      names: {
        keyIdentifier: KEY_IDENTIFIER$1,
        authorityCertIssuer: AUTHORITY_CERT_ISSUER,
        authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (KEY_IDENTIFIER$1 in asn1.result) this.keyIdentifier = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
      valueHex: asn1.result.keyIdentifier.valueBlock.valueHex
    });
    if (AUTHORITY_CERT_ISSUER in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({
      schema: o
    }));
    if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result) this.authorityCertSerialNumber = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex
    });
  }
  toSchema() {
    const outputArray = [];
    if (this.keyIdentifier) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: this.keyIdentifier.valueBlock.valueHexView
      }));
    }
    if (this.authorityCertIssuer) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.authorityCertIssuer, o => o.toSchema())
      }));
    }
    if (this.authorityCertSerialNumber) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.keyIdentifier) {
      object.keyIdentifier = this.keyIdentifier.toJSON();
    }
    if (this.authorityCertIssuer) {
      object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());
    }
    if (this.authorityCertSerialNumber) {
      object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();
    }
    return object;
  }
}
AuthorityKeyIdentifier.CLASS_NAME = "AuthorityKeyIdentifier";
const PATH_LENGTH_CONSTRAINT = "pathLenConstraint";
const CA = "cA";
class BasicConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.cA = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CA, false);
    if (PATH_LENGTH_CONSTRAINT in parameters) {
      this.pathLenConstraint = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CA:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
        optional: true,
        name: names.cA || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        optional: true,
        name: names.pathLenConstraint || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [CA, PATH_LENGTH_CONSTRAINT]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, BasicConstraints.schema({
      names: {
        cA: CA,
        pathLenConstraint: PATH_LENGTH_CONSTRAINT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (CA in asn1.result) {
      this.cA = asn1.result.cA.valueBlock.value;
    }
    if (PATH_LENGTH_CONSTRAINT in asn1.result) {
      if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {
        this.pathLenConstraint = asn1.result.pathLenConstraint;
      } else {
        this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;
      }
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.cA !== BasicConstraints.defaultValues(CA)) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
      value: this.cA
    }));
    if (PATH_LENGTH_CONSTRAINT in this) {
      if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer) {
        outputArray.push(this.pathLenConstraint);
      } else {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.pathLenConstraint
        }));
      }
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.cA !== BasicConstraints.defaultValues(CA)) {
      object.cA = this.cA;
    }
    if (PATH_LENGTH_CONSTRAINT in this) {
      if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer) {
        object.pathLenConstraint = this.pathLenConstraint.toJSON();
      } else {
        object.pathLenConstraint = this.pathLenConstraint;
      }
    }
    return object;
  }
}
BasicConstraints.CLASS_NAME = "BasicConstraints";
const CERTIFICATE_INDEX = "certificateIndex";
const KEY_INDEX = "keyIndex";
class CAVersion extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificateIndex = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));
    this.keyIndex = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATE_INDEX:
      case KEY_INDEX:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
  }
  fromSchema(schema) {
    if (schema.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer.blockName()) {
      throw new Error("Object's schema was not verified against input data for CAVersion");
    }
    let value = schema.valueBlock.valueHex.slice(0);
    const valueView = new Uint8Array(value);
    switch (true) {
      case value.byteLength < 4:
        {
          const tempValue = new ArrayBuffer(4);
          const tempValueView = new Uint8Array(tempValue);
          tempValueView.set(valueView, 4 - value.byteLength);
          value = tempValue.slice(0);
        }
        break;
      case value.byteLength > 4:
        {
          const tempValue = new ArrayBuffer(4);
          const tempValueView = new Uint8Array(tempValue);
          tempValueView.set(valueView.slice(0, 4));
          value = tempValue.slice(0);
        }
        break;
    }
    const keyIndexBuffer = value.slice(0, 2);
    const keyIndexView8 = new Uint8Array(keyIndexBuffer);
    let temp = keyIndexView8[0];
    keyIndexView8[0] = keyIndexView8[1];
    keyIndexView8[1] = temp;
    const keyIndexView16 = new Uint16Array(keyIndexBuffer);
    this.keyIndex = keyIndexView16[0];
    const certificateIndexBuffer = value.slice(2);
    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
    temp = certificateIndexView8[0];
    certificateIndexView8[0] = certificateIndexView8[1];
    certificateIndexView8[1] = temp;
    const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);
    this.certificateIndex = certificateIndexView16[0];
  }
  toSchema() {
    const certificateIndexBuffer = new ArrayBuffer(2);
    const certificateIndexView = new Uint16Array(certificateIndexBuffer);
    certificateIndexView[0] = this.certificateIndex;
    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);
    let temp = certificateIndexView8[0];
    certificateIndexView8[0] = certificateIndexView8[1];
    certificateIndexView8[1] = temp;
    const keyIndexBuffer = new ArrayBuffer(2);
    const keyIndexView = new Uint16Array(keyIndexBuffer);
    keyIndexView[0] = this.keyIndex;
    const keyIndexView8 = new Uint8Array(keyIndexBuffer);
    temp = keyIndexView8[0];
    keyIndexView8[0] = keyIndexView8[1];
    keyIndexView8[1] = temp;
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)
    });
  }
  toJSON() {
    return {
      certificateIndex: this.certificateIndex,
      keyIndex: this.keyIndex
    };
  }
}
CAVersion.CLASS_NAME = "CAVersion";
const POLICY_QUALIFIER_ID = "policyQualifierId";
const QUALIFIER = "qualifier";
const CLEAR_PROPS$1p = [POLICY_QUALIFIER_ID, QUALIFIER];
class PolicyQualifierInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.policyQualifierId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));
    this.qualifier = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case POLICY_QUALIFIER_ID:
        return EMPTY_STRING;
      case QUALIFIER:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.policyQualifierId || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.qualifier || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1p);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PolicyQualifierInfo.schema({
      names: {
        policyQualifierId: POLICY_QUALIFIER_ID,
        qualifier: QUALIFIER
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();
    this.qualifier = asn1.result.qualifier;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.policyQualifierId
      }), this.qualifier]
    });
  }
  toJSON() {
    return {
      policyQualifierId: this.policyQualifierId,
      qualifier: this.qualifier.toJSON()
    };
  }
}
PolicyQualifierInfo.CLASS_NAME = "PolicyQualifierInfo";
const POLICY_IDENTIFIER = "policyIdentifier";
const POLICY_QUALIFIERS = "policyQualifiers";
const CLEAR_PROPS$1o = [POLICY_IDENTIFIER, POLICY_QUALIFIERS];
class PolicyInformation extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.policyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));
    if (POLICY_QUALIFIERS in parameters) {
      this.policyQualifiers = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case POLICY_IDENTIFIER:
        return EMPTY_STRING;
      case POLICY_QUALIFIERS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.policyIdentifier || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.policyQualifiers || EMPTY_STRING,
          value: PolicyQualifierInfo.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1o);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PolicyInformation.schema({
      names: {
        policyIdentifier: POLICY_IDENTIFIER,
        policyQualifiers: POLICY_QUALIFIERS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();
    if (POLICY_QUALIFIERS in asn1.result) {
      this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.policyIdentifier
    }));
    if (this.policyQualifiers) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.policyQualifiers, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      policyIdentifier: this.policyIdentifier
    };
    if (this.policyQualifiers) res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());
    return res;
  }
}
PolicyInformation.CLASS_NAME = "PolicyInformation";
const CERTIFICATE_POLICIES = "certificatePolicies";
const CLEAR_PROPS$1n = [CERTIFICATE_POLICIES];
class CertificatePolicies extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificatePolicies = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATE_POLICIES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.certificatePolicies || EMPTY_STRING,
        value: PolicyInformation.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1n);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertificatePolicies.schema({
      names: {
        certificatePolicies: CERTIFICATE_POLICIES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.certificatePolicies, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())
    };
  }
}
CertificatePolicies.CLASS_NAME = "CertificatePolicies";
const TEMPLATE_ID = "templateID";
const TEMPLATE_MAJOR_VERSION = "templateMajorVersion";
const TEMPLATE_MINOR_VERSION = "templateMinorVersion";
const CLEAR_PROPS$1m = [TEMPLATE_ID, TEMPLATE_MAJOR_VERSION, TEMPLATE_MINOR_VERSION];
class CertificateTemplate extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.templateID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));
    if (TEMPLATE_MAJOR_VERSION in parameters) {
      this.templateMajorVersion = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));
    }
    if (TEMPLATE_MINOR_VERSION in parameters) {
      this.templateMinorVersion = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TEMPLATE_ID:
        return EMPTY_STRING;
      case TEMPLATE_MAJOR_VERSION:
      case TEMPLATE_MINOR_VERSION:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.templateID || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.templateMajorVersion || EMPTY_STRING,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.templateMinorVersion || EMPTY_STRING,
        optional: true
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1m);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertificateTemplate.schema({
      names: {
        templateID: TEMPLATE_ID,
        templateMajorVersion: TEMPLATE_MAJOR_VERSION,
        templateMinorVersion: TEMPLATE_MINOR_VERSION
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.templateID = asn1.result.templateID.valueBlock.toString();
    if (TEMPLATE_MAJOR_VERSION in asn1.result) {
      this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;
    }
    if (TEMPLATE_MINOR_VERSION in asn1.result) {
      this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.templateID
    }));
    if (TEMPLATE_MAJOR_VERSION in this) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.templateMajorVersion
      }));
    }
    if (TEMPLATE_MINOR_VERSION in this) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.templateMinorVersion
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      templateID: this.templateID
    };
    if (TEMPLATE_MAJOR_VERSION in this) res.templateMajorVersion = this.templateMajorVersion;
    if (TEMPLATE_MINOR_VERSION in this) res.templateMinorVersion = this.templateMinorVersion;
    return res;
  }
}
const DISTRIBUTION_POINT$1 = "distributionPoint";
const DISTRIBUTION_POINT_NAMES$1 = "distributionPointNames";
const REASONS = "reasons";
const CRL_ISSUER = "cRLIssuer";
const CRL_ISSUER_NAMES = "cRLIssuerNames";
const CLEAR_PROPS$1l = [DISTRIBUTION_POINT$1, DISTRIBUTION_POINT_NAMES$1, REASONS, CRL_ISSUER, CRL_ISSUER_NAMES];
class DistributionPoint extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (DISTRIBUTION_POINT$1 in parameters) {
      this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));
    }
    if (REASONS in parameters) {
      this.reasons = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));
    }
    if (CRL_ISSUER in parameters) {
      this.cRLIssuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINT$1:
        return [];
      case REASONS:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      case CRL_ISSUER:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            name: names.distributionPoint || EMPTY_STRING,
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
              name: names.distributionPointNames || EMPTY_STRING,
              value: GeneralName.schema()
            })]
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            name: names.distributionPoint || EMPTY_STRING,
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 1
            },
            value: RelativeDistinguishedNames.schema().valueBlock.value
          })]
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.reasons || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.cRLIssuer || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.cRLIssuerNames || EMPTY_STRING,
          value: GeneralName.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1l);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, DistributionPoint.schema({
      names: {
        distributionPoint: DISTRIBUTION_POINT$1,
        distributionPointNames: DISTRIBUTION_POINT_NAMES$1,
        reasons: REASONS,
        cRLIssuer: CRL_ISSUER,
        cRLIssuerNames: CRL_ISSUER_NAMES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (DISTRIBUTION_POINT$1 in asn1.result) {
      if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {
        this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({
          schema: element
        }));
      }
      if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {
        this.distributionPoint = new RelativeDistinguishedNames({
          schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
            value: asn1.result.distributionPoint.valueBlock.value
          })
        });
      }
    }
    if (REASONS in asn1.result) {
      this.reasons = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: asn1.result.reasons.valueBlock.valueHex
      });
    }
    if (CRL_ISSUER in asn1.result) {
      this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.distributionPoint) {
      let internalValue;
      if (this.distributionPoint instanceof Array) {
        internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: Array.from(this.distributionPoint, o => o.toSchema())
        });
      } else {
        internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [this.distributionPoint.toSchema()]
        });
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [internalValue]
      }));
    }
    if (this.reasons) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: this.reasons.valueBlock.valueHexView
      }));
    }
    if (this.cRLIssuer) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: Array.from(this.cRLIssuer, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.distributionPoint) {
      if (this.distributionPoint instanceof Array) {
        object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());
      } else {
        object.distributionPoint = this.distributionPoint.toJSON();
      }
    }
    if (this.reasons) {
      object.reasons = this.reasons.toJSON();
    }
    if (this.cRLIssuer) {
      object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());
    }
    return object;
  }
}
DistributionPoint.CLASS_NAME = "DistributionPoint";
const DISTRIBUTION_POINTS = "distributionPoints";
const CLEAR_PROPS$1k = [DISTRIBUTION_POINTS];
class CRLDistributionPoints extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.distributionPoints = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINTS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.distributionPoints || EMPTY_STRING,
        value: DistributionPoint.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1k);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CRLDistributionPoints.schema({
      names: {
        distributionPoints: DISTRIBUTION_POINTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.distributionPoints, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())
    };
  }
}
CRLDistributionPoints.CLASS_NAME = "CRLDistributionPoints";
const KEY_PURPOSES = "keyPurposes";
const CLEAR_PROPS$1j = [KEY_PURPOSES];
class ExtKeyUsage extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyPurposes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_PURPOSES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.keyPurposes || EMPTY_STRING,
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1j);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ExtKeyUsage.schema({
      names: {
        keyPurposes: KEY_PURPOSES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyPurposes = Array.from(asn1.result.keyPurposes, element => element.valueBlock.toString());
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.keyPurposes, element => new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: element
      }))
    });
  }
  toJSON() {
    return {
      keyPurposes: Array.from(this.keyPurposes)
    };
  }
}
ExtKeyUsage.CLASS_NAME = "ExtKeyUsage";
const ACCESS_DESCRIPTIONS = "accessDescriptions";
class InfoAccess extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.accessDescriptions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACCESS_DESCRIPTIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.accessDescriptions || EMPTY_STRING,
        value: AccessDescription.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [ACCESS_DESCRIPTIONS]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, InfoAccess.schema({
      names: {
        accessDescriptions: ACCESS_DESCRIPTIONS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.accessDescriptions, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())
    };
  }
}
InfoAccess.CLASS_NAME = "InfoAccess";
const DISTRIBUTION_POINT = "distributionPoint";
const DISTRIBUTION_POINT_NAMES = "distributionPointNames";
const ONLY_CONTAINS_USER_CERTS = "onlyContainsUserCerts";
const ONLY_CONTAINS_CA_CERTS = "onlyContainsCACerts";
const ONLY_SOME_REASON = "onlySomeReasons";
const INDIRECT_CRL = "indirectCRL";
const ONLY_CONTAINS_ATTRIBUTE_CERTS = "onlyContainsAttributeCerts";
const CLEAR_PROPS$1i = [DISTRIBUTION_POINT, DISTRIBUTION_POINT_NAMES, ONLY_CONTAINS_USER_CERTS, ONLY_CONTAINS_CA_CERTS, ONLY_SOME_REASON, INDIRECT_CRL, ONLY_CONTAINS_ATTRIBUTE_CERTS];
class IssuingDistributionPoint extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (DISTRIBUTION_POINT in parameters) {
      this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));
    }
    this.onlyContainsUserCerts = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));
    this.onlyContainsCACerts = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));
    if (ONLY_SOME_REASON in parameters) {
      this.onlySomeReasons = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));
    }
    this.indirectCRL = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));
    this.onlyContainsAttributeCerts = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DISTRIBUTION_POINT:
        return [];
      case ONLY_CONTAINS_USER_CERTS:
        return false;
      case ONLY_CONTAINS_CA_CERTS:
        return false;
      case ONLY_SOME_REASON:
        return 0;
      case INDIRECT_CRL:
        return false;
      case ONLY_CONTAINS_ATTRIBUTE_CERTS:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            name: names.distributionPoint || EMPTY_STRING,
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
              name: names.distributionPointNames || EMPTY_STRING,
              value: GeneralName.schema()
            })]
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            name: names.distributionPoint || EMPTY_STRING,
            idBlock: {
              tagClass: 3,
              tagNumber: 1
            },
            value: RelativeDistinguishedNames.schema().valueBlock.value
          })]
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.onlyContainsUserCerts || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.onlyContainsCACerts || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.onlySomeReasons || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.indirectCRL || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.onlyContainsAttributeCerts || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 5
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1i);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, IssuingDistributionPoint.schema({
      names: {
        distributionPoint: DISTRIBUTION_POINT,
        distributionPointNames: DISTRIBUTION_POINT_NAMES,
        onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,
        onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,
        onlySomeReasons: ONLY_SOME_REASON,
        indirectCRL: INDIRECT_CRL,
        onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (DISTRIBUTION_POINT in asn1.result) {
      switch (true) {
        case asn1.result.distributionPoint.idBlock.tagNumber === 0:
          this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({
            schema: element
          }));
          break;
        case asn1.result.distributionPoint.idBlock.tagNumber === 1:
          {
            this.distributionPoint = new RelativeDistinguishedNames({
              schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
                value: asn1.result.distributionPoint.valueBlock.value
              })
            });
          }
          break;
        default:
          throw new Error("Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}");
      }
    }
    if (ONLY_CONTAINS_USER_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);
      this.onlyContainsUserCerts = view[0] !== 0x00;
    }
    if (ONLY_CONTAINS_CA_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);
      this.onlyContainsCACerts = view[0] !== 0x00;
    }
    if (ONLY_SOME_REASON in asn1.result) {
      const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);
      this.onlySomeReasons = view[0];
    }
    if (INDIRECT_CRL in asn1.result) {
      const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);
      this.indirectCRL = view[0] !== 0x00;
    }
    if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {
      const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);
      this.onlyContainsAttributeCerts = view[0] !== 0x00;
    }
  }
  toSchema() {
    const outputArray = [];
    if (this.distributionPoint) {
      let value;
      if (this.distributionPoint instanceof Array) {
        value = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: Array.from(this.distributionPoint, o => o.toSchema())
        });
      } else {
        value = this.distributionPoint.toSchema();
        value.idBlock.tagClass = 3;
        value.idBlock.tagNumber = 1;
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [value]
      }));
    }
    if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: new Uint8Array([0xFF]).buffer
      }));
    }
    if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: new Uint8Array([0xFF]).buffer
      }));
    }
    if (this.onlySomeReasons !== undefined) {
      const buffer = new ArrayBuffer(1);
      const view = new Uint8Array(buffer);
      view[0] = this.onlySomeReasons;
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        valueHex: buffer
      }));
    }
    if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        },
        valueHex: new Uint8Array([0xFF]).buffer
      }));
    }
    if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 5
        },
        valueHex: new Uint8Array([0xFF]).buffer
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const obj = {};
    if (this.distributionPoint) {
      if (this.distributionPoint instanceof Array) {
        obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());
      } else {
        obj.distributionPoint = this.distributionPoint.toJSON();
      }
    }
    if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {
      obj.onlyContainsUserCerts = this.onlyContainsUserCerts;
    }
    if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {
      obj.onlyContainsCACerts = this.onlyContainsCACerts;
    }
    if (ONLY_SOME_REASON in this) {
      obj.onlySomeReasons = this.onlySomeReasons;
    }
    if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {
      obj.indirectCRL = this.indirectCRL;
    }
    if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {
      obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;
    }
    return obj;
  }
}
IssuingDistributionPoint.CLASS_NAME = "IssuingDistributionPoint";
const BASE = "base";
const MINIMUM = "minimum";
const MAXIMUM = "maximum";
const CLEAR_PROPS$1h = [BASE, MINIMUM, MAXIMUM];
class GeneralSubtree extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.base = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));
    this.minimum = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));
    if (MAXIMUM in parameters) {
      this.maximum = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BASE:
        return new GeneralName();
      case MINIMUM:
        return 0;
      case MAXIMUM:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [GeneralName.schema(names.base || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.minimum || EMPTY_STRING
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.maximum || EMPTY_STRING
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1h);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, GeneralSubtree.schema({
      names: {
        base: {
          names: {
            blockName: BASE
          }
        },
        minimum: MINIMUM,
        maximum: MAXIMUM
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.base = new GeneralName({
      schema: asn1.result.base
    });
    if (MINIMUM in asn1.result) {
      if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;else this.minimum = asn1.result.minimum.valueBlock.valueDec;
    }
    if (MAXIMUM in asn1.result) {
      if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;else this.maximum = asn1.result.maximum.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.base.toSchema());
    if (this.minimum !== 0) {
      let valueMinimum = 0;
      if (this.minimum instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer) {
        valueMinimum = this.minimum;
      } else {
        valueMinimum = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.minimum
        });
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [valueMinimum]
      }));
    }
    if (MAXIMUM in this) {
      let valueMaximum = 0;
      if (this.maximum instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer) {
        valueMaximum = this.maximum;
      } else {
        valueMaximum = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.maximum
        });
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [valueMaximum]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      base: this.base.toJSON()
    };
    if (this.minimum !== 0) {
      if (typeof this.minimum === "number") {
        res.minimum = this.minimum;
      } else {
        res.minimum = this.minimum.toJSON();
      }
    }
    if (this.maximum !== undefined) {
      if (typeof this.maximum === "number") {
        res.maximum = this.maximum;
      } else {
        res.maximum = this.maximum.toJSON();
      }
    }
    return res;
  }
}
GeneralSubtree.CLASS_NAME = "GeneralSubtree";
const PERMITTED_SUBTREES = "permittedSubtrees";
const EXCLUDED_SUBTREES = "excludedSubtrees";
const CLEAR_PROPS$1g = [PERMITTED_SUBTREES, EXCLUDED_SUBTREES];
class NameConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (PERMITTED_SUBTREES in parameters) {
      this.permittedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));
    }
    if (EXCLUDED_SUBTREES in parameters) {
      this.excludedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case PERMITTED_SUBTREES:
      case EXCLUDED_SUBTREES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.permittedSubtrees || EMPTY_STRING,
          value: GeneralSubtree.schema()
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.excludedSubtrees || EMPTY_STRING,
          value: GeneralSubtree.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1g);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, NameConstraints.schema({
      names: {
        permittedSubtrees: PERMITTED_SUBTREES,
        excludedSubtrees: EXCLUDED_SUBTREES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (PERMITTED_SUBTREES in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({
      schema: element
    }));
    if (EXCLUDED_SUBTREES in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    if (this.permittedSubtrees) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.permittedSubtrees, o => o.toSchema())
      }));
    }
    if (this.excludedSubtrees) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.excludedSubtrees, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {};
    if (this.permittedSubtrees) {
      object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());
    }
    if (this.excludedSubtrees) {
      object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());
    }
    return object;
  }
}
NameConstraints.CLASS_NAME = "NameConstraints";
const REQUIRE_EXPLICIT_POLICY = "requireExplicitPolicy";
const INHIBIT_POLICY_MAPPING = "inhibitPolicyMapping";
const CLEAR_PROPS$1f = [REQUIRE_EXPLICIT_POLICY, INHIBIT_POLICY_MAPPING];
class PolicyConstraints extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (REQUIRE_EXPLICIT_POLICY in parameters) {
      this.requireExplicitPolicy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));
    }
    if (INHIBIT_POLICY_MAPPING in parameters) {
      this.inhibitPolicyMapping = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case REQUIRE_EXPLICIT_POLICY:
        return 0;
      case INHIBIT_POLICY_MAPPING:
        return 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.requireExplicitPolicy || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.inhibitPolicyMapping || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1f);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PolicyConstraints.schema({
      names: {
        requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,
        inhibitPolicyMapping: INHIBIT_POLICY_MAPPING
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (REQUIRE_EXPLICIT_POLICY in asn1.result) {
      const field1 = asn1.result.requireExplicitPolicy;
      field1.idBlock.tagClass = 1;
      field1.idBlock.tagNumber = 2;
      const ber1 = field1.toBER(false);
      const int1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(ber1);
      AsnError.assert(int1, "Integer");
      this.requireExplicitPolicy = int1.result.valueBlock.valueDec;
    }
    if (INHIBIT_POLICY_MAPPING in asn1.result) {
      const field2 = asn1.result.inhibitPolicyMapping;
      field2.idBlock.tagClass = 1;
      field2.idBlock.tagNumber = 2;
      const ber2 = field2.toBER(false);
      const int2 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(ber2);
      AsnError.assert(int2, "Integer");
      this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;
    }
  }
  toSchema() {
    const outputArray = [];
    if (REQUIRE_EXPLICIT_POLICY in this) {
      const int1 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.requireExplicitPolicy
      });
      int1.idBlock.tagClass = 3;
      int1.idBlock.tagNumber = 0;
      outputArray.push(int1);
    }
    if (INHIBIT_POLICY_MAPPING in this) {
      const int2 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.inhibitPolicyMapping
      });
      int2.idBlock.tagClass = 3;
      int2.idBlock.tagNumber = 1;
      outputArray.push(int2);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (REQUIRE_EXPLICIT_POLICY in this) {
      res.requireExplicitPolicy = this.requireExplicitPolicy;
    }
    if (INHIBIT_POLICY_MAPPING in this) {
      res.inhibitPolicyMapping = this.inhibitPolicyMapping;
    }
    return res;
  }
}
PolicyConstraints.CLASS_NAME = "PolicyConstraints";
const ISSUER_DOMAIN_POLICY = "issuerDomainPolicy";
const SUBJECT_DOMAIN_POLICY = "subjectDomainPolicy";
const CLEAR_PROPS$1e = [ISSUER_DOMAIN_POLICY, SUBJECT_DOMAIN_POLICY];
class PolicyMapping extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuerDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));
    this.subjectDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER_DOMAIN_POLICY:
        return EMPTY_STRING;
      case SUBJECT_DOMAIN_POLICY:
        return EMPTY_STRING;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.issuerDomainPolicy || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.subjectDomainPolicy || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1e);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PolicyMapping.schema({
      names: {
        issuerDomainPolicy: ISSUER_DOMAIN_POLICY,
        subjectDomainPolicy: SUBJECT_DOMAIN_POLICY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();
    this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.issuerDomainPolicy
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.subjectDomainPolicy
      })]
    });
  }
  toJSON() {
    return {
      issuerDomainPolicy: this.issuerDomainPolicy,
      subjectDomainPolicy: this.subjectDomainPolicy
    };
  }
}
PolicyMapping.CLASS_NAME = "PolicyMapping";
const MAPPINGS = "mappings";
const CLEAR_PROPS$1d = [MAPPINGS];
class PolicyMappings extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.mappings = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MAPPINGS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.mappings || EMPTY_STRING,
        value: PolicyMapping.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1d);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PolicyMappings.schema({
      names: {
        mappings: MAPPINGS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.mappings, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      mappings: Array.from(this.mappings, o => o.toJSON())
    };
  }
}
PolicyMappings.CLASS_NAME = "PolicyMappings";
const NOT_BEFORE$1 = "notBefore";
const NOT_AFTER$1 = "notAfter";
const CLEAR_PROPS$1c = [NOT_BEFORE$1, NOT_AFTER$1];
class PrivateKeyUsagePeriod extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (NOT_BEFORE$1 in parameters) {
      this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));
    }
    if (NOT_AFTER$1 in parameters) {
      this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case NOT_BEFORE$1:
        return new Date();
      case NOT_AFTER$1:
        return new Date();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.notBefore || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.notAfter || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1c);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({
      names: {
        notBefore: NOT_BEFORE$1,
        notAfter: NOT_AFTER$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (NOT_BEFORE$1 in asn1.result) {
      const localNotBefore = new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime();
      localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);
      this.notBefore = localNotBefore.toDate();
    }
    if (NOT_AFTER$1 in asn1.result) {
      const localNotAfter = new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        valueHex: asn1.result.notAfter.valueBlock.valueHex
      });
      localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);
      this.notAfter = localNotAfter.toDate();
    }
  }
  toSchema() {
    const outputArray = [];
    if (NOT_BEFORE$1 in this) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
          valueDate: this.notBefore
        }).valueBlock.valueHexView
      }));
    }
    if (NOT_AFTER$1 in this) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
          valueDate: this.notAfter
        }).valueBlock.valueHexView
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (this.notBefore) {
      res.notBefore = this.notBefore;
    }
    if (this.notAfter) {
      res.notAfter = this.notAfter;
    }
    return res;
  }
}
PrivateKeyUsagePeriod.CLASS_NAME = "PrivateKeyUsagePeriod";
const ID = "id";
const TYPE$2 = "type";
const VALUES = "values";
const QC_STATEMENT_CLEAR_PROPS = [ID, TYPE$2];
const QC_STATEMENTS_CLEAR_PROPS = [VALUES];
class QCStatement extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.id = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));
    if (TYPE$2 in parameters) {
      this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ID:
        return EMPTY_STRING;
      case TYPE$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ID:
        return memberValue === EMPTY_STRING;
      case TYPE$2:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Null;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.id || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.type || EMPTY_STRING,
        optional: true
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, QCStatement.schema({
      names: {
        id: ID,
        type: TYPE$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.id = asn1.result.id.valueBlock.toString();
    if (TYPE$2 in asn1.result) this.type = asn1.result.type;
  }
  toSchema() {
    const value = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.id
    })];
    if (TYPE$2 in this) value.push(this.type);
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value
    });
  }
  toJSON() {
    const object = {
      id: this.id
    };
    if (this.type) {
      object.type = this.type.toJSON();
    }
    return object;
  }
}
QCStatement.CLASS_NAME = "QCStatement";
class QCStatements extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.values = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VALUES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VALUES:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.values || EMPTY_STRING,
        value: QCStatement.schema(names.value || {})
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, QCStatements.schema({
      names: {
        values: VALUES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.values = Array.from(asn1.result.values, element => new QCStatement({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.values, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      values: Array.from(this.values, o => o.toJSON())
    };
  }
}
QCStatements.CLASS_NAME = "QCStatements";
var _a;
class ECNamedCurves {
  static register(name, id, size) {
    this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = {
      name,
      id,
      size
    };
  }
  static find(nameOrId) {
    return this.namedCurves[nameOrId.toLowerCase()] || null;
  }
}
_a = ECNamedCurves;
ECNamedCurves.namedCurves = {};
(() => {
  _a.register("P-256", "1.2.840.10045.3.1.7", 32);
  _a.register("P-384", "1.3.132.0.34", 48);
  _a.register("P-521", "1.3.132.0.35", 66);
  _a.register("brainpoolP256r1", "1.3.36.3.3.2.8.1.1.7", 32);
  _a.register("brainpoolP384r1", "1.3.36.3.3.2.8.1.1.11", 48);
  _a.register("brainpoolP512r1", "1.3.36.3.3.2.8.1.1.13", 64);
})();
const X = "x";
const Y = "y";
const NAMED_CURVE$1 = "namedCurve";
class ECPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.x = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));
    this.y = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));
    this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case X:
      case Y:
        return EMPTY_BUFFER;
      case NAMED_CURVE$1:
        return EMPTY_STRING;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case X:
      case Y:
        return memberValue instanceof ArrayBuffer && pvutils__WEBPACK_IMPORTED_MODULE_3__.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName));
      case NAMED_CURVE$1:
        return typeof memberValue === "string" && memberValue === ECPublicKey.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.RawData();
  }
  fromSchema(schema1) {
    const view = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toUint8Array(schema1);
    if (view[0] !== 0x04) {
      throw new Error("Object's schema was not verified against input data for ECPublicKey");
    }
    const namedCurve = ECNamedCurves.find(this.namedCurve);
    if (!namedCurve) {
      throw new Error(`Incorrect curve OID: ${this.namedCurve}`);
    }
    const coordinateLength = namedCurve.size;
    if (view.byteLength !== coordinateLength * 2 + 1) {
      throw new Error("Object's schema was not verified against input data for ECPublicKey");
    }
    this.namedCurve = namedCurve.name;
    this.x = view.slice(1, coordinateLength + 1).buffer;
    this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.RawData({
      data: pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(new Uint8Array([0x04]).buffer, this.x, this.y)
    });
  }
  toJSON() {
    const namedCurve = ECNamedCurves.find(this.namedCurve);
    return {
      crv: namedCurve ? namedCurve.name : this.namedCurve,
      x: pvutils__WEBPACK_IMPORTED_MODULE_3__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_3__.arrayBufferToString(this.x), true, true, false),
      y: pvutils__WEBPACK_IMPORTED_MODULE_3__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_3__.arrayBufferToString(this.y), true, true, false)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "crv", "x", "y");
    let coordinateLength = 0;
    const namedCurve = ECNamedCurves.find(json.crv);
    if (namedCurve) {
      this.namedCurve = namedCurve.id;
      coordinateLength = namedCurve.size;
    }
    const xConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_3__.fromBase64(json.x, true));
    if (xConvertBuffer.byteLength < coordinateLength) {
      this.x = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(this.x);
      const convertBufferView = new Uint8Array(xConvertBuffer);
      view.set(convertBufferView, 1);
    } else {
      this.x = xConvertBuffer.slice(0, coordinateLength);
    }
    const yConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_3__.fromBase64(json.y, true));
    if (yConvertBuffer.byteLength < coordinateLength) {
      this.y = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(this.y);
      const convertBufferView = new Uint8Array(yConvertBuffer);
      view.set(convertBufferView, 1);
    } else {
      this.y = yConvertBuffer.slice(0, coordinateLength);
    }
  }
}
ECPublicKey.CLASS_NAME = "ECPublicKey";
const MODULUS$1 = "modulus";
const PUBLIC_EXPONENT$1 = "publicExponent";
const CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];
class RSAPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));
    this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MODULUS$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case PUBLIC_EXPONENT$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.modulus || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.publicExponent || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1b);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RSAPublicKey.schema({
      names: {
        modulus: MODULUS$1,
        publicExponent: PUBLIC_EXPONENT$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.modulus = asn1.result.modulus.convertFromDER(256);
    this.publicExponent = asn1.result.publicExponent;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.modulus.convertToDER(), this.publicExponent]
    });
  }
  toJSON() {
    return {
      n: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
      e: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "n", "e");
    const array = pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_3__.fromBase64(json.n, true));
    this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: array.slice(0, Math.pow(2, pvutils__WEBPACK_IMPORTED_MODULE_3__.nearestPowerOf2(array.byteLength)))
    });
    this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_3__.fromBase64(json.e, true)).slice(0, 3)
    });
  }
}
RSAPublicKey.CLASS_NAME = "RSAPublicKey";
const ALGORITHM$1 = "algorithm";
const SUBJECT_PUBLIC_KEY = "subjectPublicKey";
const CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];
class PublicKeyInfo extends PkiObject {
  get parsedKey() {
    if (this._parsedKey === undefined) {
      switch (this.algorithm.algorithmId) {
        case "1.2.840.10045.2.1":
          if ("algorithmParams" in this.algorithm) {
            if (this.algorithm.algorithmParams.constructor.blockName() === asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier.blockName()) {
              try {
                this._parsedKey = new ECPublicKey({
                  namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),
                  schema: this.subjectPublicKey.valueBlock.valueHexView
                });
              } catch (ex) {}
            }
          }
          break;
        case "1.2.840.113549.1.1.1":
          {
            const publicKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.subjectPublicKey.valueBlock.valueHexView);
            if (publicKeyASN1.offset !== -1) {
              try {
                this._parsedKey = new RSAPublicKey({
                  schema: publicKeyASN1.result
                });
              } catch (ex) {}
            }
          }
          break;
      }
      this._parsedKey || (this._parsedKey = null);
    }
    return this._parsedKey || undefined;
  }
  set parsedKey(value) {
    this._parsedKey = value;
  }
  constructor(parameters = {}) {
    super();
    this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));
    this.subjectPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));
    const parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "parsedKey", null);
    if (parsedKey) {
      this.parsedKey = parsedKey;
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM$1:
        return new AlgorithmIdentifier();
      case SUBJECT_PUBLIC_KEY:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.algorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.subjectPublicKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1a);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PublicKeyInfo.schema({
      names: {
        algorithm: {
          names: {
            blockName: ALGORITHM$1
          }
        },
        subjectPublicKey: SUBJECT_PUBLIC_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithm = new AlgorithmIdentifier({
      schema: asn1.result.algorithm
    });
    this.subjectPublicKey = asn1.result.subjectPublicKey;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.algorithm.toSchema(), this.subjectPublicKey]
    });
  }
  toJSON() {
    if (!this.parsedKey) {
      return {
        algorithm: this.algorithm.toJSON(),
        subjectPublicKey: this.subjectPublicKey.toJSON()
      };
    }
    const jwk = {};
    switch (this.algorithm.algorithmId) {
      case "1.2.840.10045.2.1":
        jwk.kty = "EC";
        break;
      case "1.2.840.113549.1.1.1":
        jwk.kty = "RSA";
        break;
    }
    const publicKeyJWK = this.parsedKey.toJSON();
    Object.assign(jwk, publicKeyJWK);
    return jwk;
  }
  fromJSON(json) {
    if ("kty" in json) {
      switch (json.kty.toUpperCase()) {
        case "EC":
          this.parsedKey = new ECPublicKey({
            json
          });
          this.algorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.10045.2.1",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
              value: this.parsedKey.namedCurve
            })
          });
          break;
        case "RSA":
          this.parsedKey = new RSAPublicKey({
            json
          });
          this.algorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.113549.1.1.1",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
          });
          break;
        default:
          throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
      }
      this.subjectPublicKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: this.parsedKey.toSchema().toBER(false)
      });
    }
  }
  importKey(publicKey, crypto = getCrypto(true)) {
    var _this = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        if (!publicKey) {
          throw new Error("Need to provide publicKey input parameter");
        }
        const exportedKey = yield crypto.exportKey("spki", publicKey);
        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(exportedKey);
        try {
          _this.fromSchema(asn1.result);
        } catch (exception) {
          throw new Error("Error during initializing object from schema");
        }
      } catch (e) {
        const message = e instanceof Error ? e.message : `${e}`;
        throw new Error(`Error during exporting public key: ${message}`);
      }
    })();
  }
}
PublicKeyInfo.CLASS_NAME = "PublicKeyInfo";
const VERSION$l = "version";
const PRIVATE_KEY$1 = "privateKey";
const NAMED_CURVE = "namedCurve";
const PUBLIC_KEY$1 = "publicKey";
const CLEAR_PROPS$19 = [VERSION$l, PRIVATE_KEY$1, NAMED_CURVE, PUBLIC_KEY$1];
class ECPrivateKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));
    this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));
    if (NAMED_CURVE in parameters) {
      this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));
    }
    if (PUBLIC_KEY$1 in parameters) {
      this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$l:
        return 1;
      case PRIVATE_KEY$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case NAMED_CURVE:
        return EMPTY_STRING;
      case PUBLIC_KEY$1:
        return new ECPublicKey();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$l:
        return memberValue === ECPrivateKey.defaultValues(memberName);
      case PRIVATE_KEY$1:
        return memberValue.isEqual(ECPrivateKey.defaultValues(memberName));
      case NAMED_CURVE:
        return memberValue === EMPTY_STRING;
      case PUBLIC_KEY$1:
        return ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve) && ECPublicKey.compareWithDefault("x", memberValue.x) && ECPublicKey.compareWithDefault("y", memberValue.y);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.privateKey || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
          name: names.namedCurve || EMPTY_STRING
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
          name: names.publicKey || EMPTY_STRING
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$19);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ECPrivateKey.schema({
      names: {
        version: VERSION$l,
        privateKey: PRIVATE_KEY$1,
        namedCurve: NAMED_CURVE,
        publicKey: PUBLIC_KEY$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.privateKey = asn1.result.privateKey;
    if (NAMED_CURVE in asn1.result) {
      this.namedCurve = asn1.result.namedCurve.valueBlock.toString();
    }
    if (PUBLIC_KEY$1 in asn1.result) {
      const publicKeyData = {
        schema: asn1.result.publicKey.valueBlock.valueHex
      };
      if (NAMED_CURVE in this) {
        publicKeyData.namedCurve = this.namedCurve;
      }
      this.publicKey = new ECPublicKey(publicKeyData);
    }
  }
  toSchema() {
    const outputArray = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }), this.privateKey];
    if (this.namedCurve) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
          value: this.namedCurve
        })]
      }));
    }
    if (this.publicKey) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
          valueHex: this.publicKey.toSchema().toBER(false)
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {
      throw new Error("Not enough information for making JSON: absent \"namedCurve\" value");
    }
    const curve = ECNamedCurves.find(this.namedCurve);
    const privateKeyJSON = {
      crv: curve ? curve.name : this.namedCurve,
      d: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView)
    };
    if (this.publicKey) {
      const publicKeyJSON = this.publicKey.toJSON();
      privateKeyJSON.x = publicKeyJSON.x;
      privateKeyJSON.y = publicKeyJSON.y;
    }
    return privateKeyJSON;
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "crv", "d");
    let coordinateLength = 0;
    const curve = ECNamedCurves.find(json.crv);
    if (curve) {
      this.namedCurve = curve.id;
      coordinateLength = curve.size;
    }
    const convertBuffer = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.d);
    if (convertBuffer.byteLength < coordinateLength) {
      const buffer = new ArrayBuffer(coordinateLength);
      const view = new Uint8Array(buffer);
      const convertBufferView = new Uint8Array(convertBuffer);
      view.set(convertBufferView, 1);
      this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: buffer
      });
    } else {
      this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: convertBuffer.slice(0, coordinateLength)
      });
    }
    if (json.x && json.y) {
      this.publicKey = new ECPublicKey({
        json
      });
    }
  }
}
ECPrivateKey.CLASS_NAME = "ECPrivateKey";
const PRIME = "prime";
const EXPONENT = "exponent";
const COEFFICIENT$1 = "coefficient";
const CLEAR_PROPS$18 = [PRIME, EXPONENT, COEFFICIENT$1];
class OtherPrimeInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.prime = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));
    this.exponent = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));
    this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case PRIME:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case EXPONENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case COEFFICIENT$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.prime || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.exponent || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.coefficient || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$18);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OtherPrimeInfo.schema({
      names: {
        prime: PRIME,
        exponent: EXPONENT,
        coefficient: COEFFICIENT$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.prime = asn1.result.prime.convertFromDER();
    this.exponent = asn1.result.exponent.convertFromDER();
    this.coefficient = asn1.result.coefficient.convertFromDER();
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.prime.convertToDER(), this.exponent.convertToDER(), this.coefficient.convertToDER()]
    });
  }
  toJSON() {
    return {
      r: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),
      d: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),
      t: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
    };
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "r", "d", "r");
    this.prime = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.r)
    });
    this.exponent = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.d)
    });
    this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.t)
    });
  }
}
OtherPrimeInfo.CLASS_NAME = "OtherPrimeInfo";
const VERSION$k = "version";
const MODULUS = "modulus";
const PUBLIC_EXPONENT = "publicExponent";
const PRIVATE_EXPONENT = "privateExponent";
const PRIME1 = "prime1";
const PRIME2 = "prime2";
const EXPONENT1 = "exponent1";
const EXPONENT2 = "exponent2";
const COEFFICIENT = "coefficient";
const OTHER_PRIME_INFOS = "otherPrimeInfos";
const CLEAR_PROPS$17 = [VERSION$k, MODULUS, PUBLIC_EXPONENT, PRIVATE_EXPONENT, PRIME1, PRIME2, EXPONENT1, EXPONENT2, COEFFICIENT, OTHER_PRIME_INFOS];
class RSAPrivateKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));
    this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));
    this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));
    this.privateExponent = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));
    this.prime1 = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));
    this.prime2 = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));
    this.exponent1 = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));
    this.exponent2 = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));
    this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));
    if (OTHER_PRIME_INFOS in parameters) {
      this.otherPrimeInfos = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$k:
        return 0;
      case MODULUS:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case PUBLIC_EXPONENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case PRIVATE_EXPONENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case PRIME1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case PRIME2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case EXPONENT1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case EXPONENT2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case COEFFICIENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case OTHER_PRIME_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.modulus || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.publicExponent || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.privateExponent || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.prime1 || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.prime2 || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.exponent1 || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.exponent2 || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.coefficient || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.otherPrimeInfosName || EMPTY_STRING,
          value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$17);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RSAPrivateKey.schema({
      names: {
        version: VERSION$k,
        modulus: MODULUS,
        publicExponent: PUBLIC_EXPONENT,
        privateExponent: PRIVATE_EXPONENT,
        prime1: PRIME1,
        prime2: PRIME2,
        exponent1: EXPONENT1,
        exponent2: EXPONENT2,
        coefficient: COEFFICIENT,
        otherPrimeInfo: {
          names: {
            blockName: OTHER_PRIME_INFOS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.modulus = asn1.result.modulus.convertFromDER(256);
    this.publicExponent = asn1.result.publicExponent;
    this.privateExponent = asn1.result.privateExponent.convertFromDER(256);
    this.prime1 = asn1.result.prime1.convertFromDER(128);
    this.prime2 = asn1.result.prime2.convertFromDER(128);
    this.exponent1 = asn1.result.exponent1.convertFromDER(128);
    this.exponent2 = asn1.result.exponent2.convertFromDER(128);
    this.coefficient = asn1.result.coefficient.convertFromDER(128);
    if (OTHER_PRIME_INFOS in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(this.modulus.convertToDER());
    outputArray.push(this.publicExponent);
    outputArray.push(this.privateExponent.convertToDER());
    outputArray.push(this.prime1.convertToDER());
    outputArray.push(this.prime2.convertToDER());
    outputArray.push(this.exponent1.convertToDER());
    outputArray.push(this.exponent2.convertToDER());
    outputArray.push(this.coefficient.convertToDER());
    if (this.otherPrimeInfos) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.otherPrimeInfos, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const jwk = {
      n: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),
      e: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),
      d: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),
      p: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),
      q: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),
      dp: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),
      dq: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),
      qi: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView)
    };
    if (this.otherPrimeInfos) {
      jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());
    }
    return jwk;
  }
  fromJSON(json) {
    ParameterError.assert("json", json, "n", "e", "d", "p", "q", "dp", "dq", "qi");
    this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.n)
    });
    this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.e)
    });
    this.privateExponent = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.d)
    });
    this.prime1 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.p)
    });
    this.prime2 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.q)
    });
    this.exponent1 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.dp)
    });
    this.exponent2 = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.dq)
    });
    this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.FromBase64Url(json.qi)
    });
    if (json.oth) {
      this.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({
        json: element
      }));
    }
  }
}
RSAPrivateKey.CLASS_NAME = "RSAPrivateKey";
const VERSION$j = "version";
const PRIVATE_KEY_ALGORITHM = "privateKeyAlgorithm";
const PRIVATE_KEY = "privateKey";
const ATTRIBUTES$5 = "attributes";
const PARSED_KEY = "parsedKey";
const CLEAR_PROPS$16 = [VERSION$j, PRIVATE_KEY_ALGORITHM, PRIVATE_KEY, ATTRIBUTES$5];
class PrivateKeyInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));
    this.privateKeyAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));
    this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));
    if (ATTRIBUTES$5 in parameters) {
      this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));
    }
    if (PARSED_KEY in parameters) {
      this.parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));
    }
    if (parameters.json) {
      this.fromJSON(parameters.json);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$j:
        return 0;
      case PRIVATE_KEY_ALGORITHM:
        return new AlgorithmIdentifier();
      case PRIVATE_KEY:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case ATTRIBUTES$5:
        return [];
      case PARSED_KEY:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.privateKey || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.attributes || EMPTY_STRING,
          value: Attribute.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$16);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PrivateKeyInfo.schema({
      names: {
        version: VERSION$j,
        privateKeyAlgorithm: {
          names: {
            blockName: PRIVATE_KEY_ALGORITHM
          }
        },
        privateKey: PRIVATE_KEY,
        attributes: ATTRIBUTES$5
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.privateKeyAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.privateKeyAlgorithm
    });
    this.privateKey = asn1.result.privateKey;
    if (ATTRIBUTES$5 in asn1.result) this.attributes = Array.from(asn1.result.attributes, element => new Attribute({
      schema: element
    }));
    switch (this.privateKeyAlgorithm.algorithmId) {
      case "1.2.840.113549.1.1.1":
        {
          const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.privateKey.valueBlock.valueHexView);
          if (privateKeyASN1.offset !== -1) this.parsedKey = new RSAPrivateKey({
            schema: privateKeyASN1.result
          });
        }
        break;
      case "1.2.840.10045.2.1":
        if ("algorithmParams" in this.privateKeyAlgorithm) {
          if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier) {
            const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.privateKey.valueBlock.valueHexView);
            if (privateKeyASN1.offset !== -1) {
              this.parsedKey = new ECPrivateKey({
                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),
                schema: privateKeyASN1.result
              });
            }
          }
        }
        break;
    }
  }
  toSchema() {
    const outputArray = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }), this.privateKeyAlgorithm.toSchema(), this.privateKey];
    if (this.attributes) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.attributes, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (!this.parsedKey) {
      const object = {
        version: this.version,
        privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),
        privateKey: this.privateKey.toJSON()
      };
      if (this.attributes) {
        object.attributes = Array.from(this.attributes, o => o.toJSON());
      }
      return object;
    }
    const jwk = {};
    switch (this.privateKeyAlgorithm.algorithmId) {
      case "1.2.840.10045.2.1":
        jwk.kty = "EC";
        break;
      case "1.2.840.113549.1.1.1":
        jwk.kty = "RSA";
        break;
    }
    const publicKeyJWK = this.parsedKey.toJSON();
    Object.assign(jwk, publicKeyJWK);
    return jwk;
  }
  fromJSON(json) {
    if ("kty" in json) {
      switch (json.kty.toUpperCase()) {
        case "EC":
          this.parsedKey = new ECPrivateKey({
            json
          });
          this.privateKeyAlgorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.10045.2.1",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
              value: this.parsedKey.namedCurve
            })
          });
          break;
        case "RSA":
          this.parsedKey = new RSAPrivateKey({
            json
          });
          this.privateKeyAlgorithm = new AlgorithmIdentifier({
            algorithmId: "1.2.840.113549.1.1.1",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
          });
          break;
        default:
          throw new Error(`Invalid value for "kty" parameter: ${json.kty}`);
      }
      this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: this.parsedKey.toSchema().toBER(false)
      });
    }
  }
}
PrivateKeyInfo.CLASS_NAME = "PrivateKeyInfo";
const CONTENT_TYPE$1 = "contentType";
const CONTENT_ENCRYPTION_ALGORITHM = "contentEncryptionAlgorithm";
const ENCRYPTED_CONTENT = "encryptedContent";
const CLEAR_PROPS$15 = [CONTENT_TYPE$1, CONTENT_ENCRYPTION_ALGORITHM, ENCRYPTED_CONTENT];
const PIECE_SIZE = 1024;
class EncryptedContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));
    this.contentEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));
    if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {
      this.encryptedContent = parameters.encryptedContent;
      if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {
        if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {
          const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            idBlock: {
              isConstructed: true
            },
            isConstructed: true
          });
          let offset = 0;
          const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;
          let length = valueHex.byteLength;
          while (length > 0) {
            const pieceView = new Uint8Array(valueHex, offset, offset + PIECE_SIZE > valueHex.byteLength ? valueHex.byteLength - offset : PIECE_SIZE);
            const _array = new ArrayBuffer(pieceView.length);
            const _view = new Uint8Array(_array);
            for (let i = 0; i < _view.length; i++) _view[i] = pieceView[i];
            constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
              valueHex: _array
            }));
            length -= pieceView.length;
            offset += pieceView.length;
          }
          this.encryptedContent = constrString;
        }
      }
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CONTENT_TYPE$1:
        return EMPTY_STRING;
      case CONTENT_ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_CONTENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CONTENT_TYPE$1:
        return memberValue === EMPTY_STRING;
      case CONTENT_ENCRYPTION_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case ENCRYPTED_CONTENT:
        return memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.contentType || EMPTY_STRING
      }), AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.encryptedContent || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
            value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString()
          })]
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
          name: names.encryptedContent || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$15);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, EncryptedContentInfo.schema({
      names: {
        contentType: CONTENT_TYPE$1,
        contentEncryptionAlgorithm: {
          names: {
            blockName: CONTENT_ENCRYPTION_ALGORITHM
          }
        },
        encryptedContent: ENCRYPTED_CONTENT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.contentType = asn1.result.contentType.valueBlock.toString();
    this.contentEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.contentEncryptionAlgorithm
    });
    if (ENCRYPTED_CONTENT in asn1.result) {
      this.encryptedContent = asn1.result.encryptedContent;
      this.encryptedContent.idBlock.tagClass = 1;
      this.encryptedContent.idBlock.tagNumber = 4;
    }
  }
  toSchema() {
    const sequenceLengthBlock = {
      isIndefiniteForm: false
    };
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.contentType
    }));
    outputArray.push(this.contentEncryptionAlgorithm.toSchema());
    if (this.encryptedContent) {
      sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
      const encryptedValue = this.encryptedContent;
      encryptedValue.idBlock.tagClass = 3;
      encryptedValue.idBlock.tagNumber = 0;
      encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;
      outputArray.push(encryptedValue);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      lenBlock: sequenceLengthBlock,
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      contentType: this.contentType,
      contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()
    };
    if (this.encryptedContent) {
      res.encryptedContent = this.encryptedContent.toJSON();
    }
    return res;
  }
  getEncryptedContent() {
    if (!this.encryptedContent) {
      throw new Error("Parameter 'encryptedContent' is undefined");
    }
    return asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString.prototype.getValue.call(this.encryptedContent);
  }
}
EncryptedContentInfo.CLASS_NAME = "EncryptedContentInfo";
const HASH_ALGORITHM$4 = "hashAlgorithm";
const MASK_GEN_ALGORITHM$1 = "maskGenAlgorithm";
const SALT_LENGTH = "saltLength";
const TRAILER_FIELD = "trailerField";
const CLEAR_PROPS$14 = [HASH_ALGORITHM$4, MASK_GEN_ALGORITHM$1, SALT_LENGTH, TRAILER_FIELD];
class RSASSAPSSParams extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));
    this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));
    this.saltLength = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));
    this.trailerField = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$4:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        });
      case MASK_GEN_ALGORITHM$1:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.8",
          algorithmParams: new AlgorithmIdentifier({
            algorithmId: "1.3.14.3.2.26",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
          }).toSchema()
        });
      case SALT_LENGTH:
        return 20;
      case TRAILER_FIELD:
        return 1;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        optional: true,
        value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        optional: true,
        value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.saltLength || EMPTY_STRING
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.trailerField || EMPTY_STRING
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$14);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RSASSAPSSParams.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM$4
          }
        },
        maskGenAlgorithm: {
          names: {
            blockName: MASK_GEN_ALGORITHM$1
          }
        },
        saltLength: SALT_LENGTH,
        trailerField: TRAILER_FIELD
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (HASH_ALGORITHM$4 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    if (MASK_GEN_ALGORITHM$1 in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.maskGenAlgorithm
    });
    if (SALT_LENGTH in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;
    if (TRAILER_FIELD in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec;
  }
  toSchema() {
    const outputArray = [];
    if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.hashAlgorithm.toSchema()]
      }));
    }
    if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [this.maskGenAlgorithm.toSchema()]
      }));
    }
    if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.saltLength
        })]
      }));
    }
    if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.trailerField
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {
      res.hashAlgorithm = this.hashAlgorithm.toJSON();
    }
    if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {
      res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
    }
    if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {
      res.saltLength = this.saltLength;
    }
    if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {
      res.trailerField = this.trailerField;
    }
    return res;
  }
}
RSASSAPSSParams.CLASS_NAME = "RSASSAPSSParams";
const SALT = "salt";
const ITERATION_COUNT = "iterationCount";
const KEY_LENGTH = "keyLength";
const PRF = "prf";
const CLEAR_PROPS$13 = [SALT, ITERATION_COUNT, KEY_LENGTH, PRF];
class PBKDF2Params extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.salt = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));
    this.iterationCount = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));
    if (KEY_LENGTH in parameters) {
      this.keyLength = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));
    }
    if (PRF in parameters) {
      this.prf = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SALT:
        return {};
      case ITERATION_COUNT:
        return -1;
      case KEY_LENGTH:
        return 0;
      case PRF:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          name: names.saltPrimitive || EMPTY_STRING
        }), AlgorithmIdentifier.schema(names.saltConstructed || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.iterationCount || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.keyLength || EMPTY_STRING,
        optional: true
      }), AlgorithmIdentifier.schema(names.prf || {
        names: {
          optional: true
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$13);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PBKDF2Params.schema({
      names: {
        saltPrimitive: SALT,
        saltConstructed: {
          names: {
            blockName: SALT
          }
        },
        iterationCount: ITERATION_COUNT,
        keyLength: KEY_LENGTH,
        prf: {
          names: {
            blockName: PRF,
            optional: true
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.salt = asn1.result.salt;
    this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;
    if (KEY_LENGTH in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;
    if (PRF in asn1.result) this.prf = new AlgorithmIdentifier({
      schema: asn1.result.prf
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.salt);
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.iterationCount
    }));
    if (KEY_LENGTH in this) {
      if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.keyLength
      }));
    }
    if (this.prf) {
      if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      salt: this.salt.toJSON(),
      iterationCount: this.iterationCount
    };
    if (KEY_LENGTH in this) {
      if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength) res.keyLength = this.keyLength;
    }
    if (this.prf) {
      if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false) res.prf = this.prf.toJSON();
    }
    return res;
  }
}
PBKDF2Params.CLASS_NAME = "PBKDF2Params";
const KEY_DERIVATION_FUNC = "keyDerivationFunc";
const ENCRYPTION_SCHEME = "encryptionScheme";
const CLEAR_PROPS$12 = [KEY_DERIVATION_FUNC, ENCRYPTION_SCHEME];
class PBES2Params extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyDerivationFunc = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));
    this.encryptionScheme = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_DERIVATION_FUNC:
        return new AlgorithmIdentifier();
      case ENCRYPTION_SCHEME:
        return new AlgorithmIdentifier();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.keyDerivationFunc || {}), AlgorithmIdentifier.schema(names.encryptionScheme || {})]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$12);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PBES2Params.schema({
      names: {
        keyDerivationFunc: {
          names: {
            blockName: KEY_DERIVATION_FUNC
          }
        },
        encryptionScheme: {
          names: {
            blockName: ENCRYPTION_SCHEME
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyDerivationFunc = new AlgorithmIdentifier({
      schema: asn1.result.keyDerivationFunc
    });
    this.encryptionScheme = new AlgorithmIdentifier({
      schema: asn1.result.encryptionScheme
    });
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.keyDerivationFunc.toSchema(), this.encryptionScheme.toSchema()]
    });
  }
  toJSON() {
    return {
      keyDerivationFunc: this.keyDerivationFunc.toJSON(),
      encryptionScheme: this.encryptionScheme.toJSON()
    };
  }
}
PBES2Params.CLASS_NAME = "PBES2Params";
class AbstractCryptoEngine {
  constructor(parameters) {
    this.crypto = parameters.crypto;
    this.subtle = "webkitSubtle" in parameters.crypto ? parameters.crypto.webkitSubtle : parameters.crypto.subtle;
    this.name = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "name", EMPTY_STRING);
  }
  encrypt(...args) {
    var _this2 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this2.subtle.encrypt(...args);
    })();
  }
  decrypt(...args) {
    var _this3 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this3.subtle.decrypt(...args);
    })();
  }
  sign(...args) {
    return this.subtle.sign(...args);
  }
  verify(...args) {
    var _this4 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this4.subtle.verify(...args);
    })();
  }
  digest(...args) {
    var _this5 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this5.subtle.digest(...args);
    })();
  }
  generateKey(...args) {
    var _this6 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this6.subtle.generateKey(...args);
    })();
  }
  deriveKey(...args) {
    var _this7 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this7.subtle.deriveKey(...args);
    })();
  }
  deriveBits(...args) {
    var _this8 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this8.subtle.deriveBits(...args);
    })();
  }
  wrapKey(...args) {
    var _this9 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this9.subtle.wrapKey(...args);
    })();
  }
  unwrapKey(...args) {
    var _this10 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this10.subtle.unwrapKey(...args);
    })();
  }
  exportKey(...args) {
    return this.subtle.exportKey(...args);
  }
  importKey(...args) {
    return this.subtle.importKey(...args);
  }
  getRandomValues(array) {
    return this.crypto.getRandomValues(array);
  }
}
function makePKCS12B2Key(_x, _x2, _x3, _x4, _x5) {
  return _makePKCS12B2Key.apply(this, arguments);
}
function _makePKCS12B2Key() {
  _makePKCS12B2Key = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (hashAlgorithm, keyLength, password, salt, iterationCount) {
    let u;
    let v;
    let md;
    switch (hashAlgorithm.toUpperCase()) {
      case "SHA-1":
        u = 20;
        v = 64;
        md = _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_5__.sha1;
        break;
      case "SHA-256":
        u = 32;
        v = 64;
        md = _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_6__.sha256;
        break;
      case "SHA-384":
        u = 48;
        v = 128;
        md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__.sha384;
        break;
      case "SHA-512":
        u = 64;
        v = 128;
        md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__.sha512;
        break;
      default:
        throw new Error("Unsupported hashing algorithm");
    }
    const originalPassword = new Uint8Array(password);
    let decodedPassword = new TextDecoder().decode(password);
    const encodedPassword = new TextEncoder().encode(decodedPassword);
    if (encodedPassword.some((byte, i) => byte !== originalPassword[i])) {
      decodedPassword = String.fromCharCode(...originalPassword);
    }
    const passwordTransformed = new Uint8Array(decodedPassword.length * 2 + 2);
    const passwordView = new DataView(passwordTransformed.buffer);
    for (let i = 0; i < decodedPassword.length; i++) {
      passwordView.setUint16(i * 2, decodedPassword.charCodeAt(i), false);
    }
    passwordView.setUint16(decodedPassword.length * 2, 0, false);
    const D = new Uint8Array(v).fill(3);
    const saltView = new Uint8Array(salt);
    const S = new Uint8Array(v * Math.ceil(saltView.length / v)).map((_, i) => saltView[i % saltView.length]);
    const P = new Uint8Array(v * Math.ceil(passwordTransformed.length / v)).map((_, i) => passwordTransformed[i % passwordTransformed.length]);
    let I = new Uint8Array(S.length + P.length);
    I.set(S);
    I.set(P, S.length);
    const c = Math.ceil((keyLength >> 3) / u);
    const result = [];
    for (let i = 0; i < c; i++) {
      let A = new Uint8Array(D.length + I.length);
      A.set(D);
      A.set(I, D.length);
      for (let j = 0; j < iterationCount; j++) {
        A = md(A);
      }
      const B = new Uint8Array(v).map((_, i) => A[i % A.length]);
      const k = Math.ceil(saltView.length / v) + Math.ceil(passwordTransformed.length / v);
      const iRound = [];
      for (let j = 0; j < k; j++) {
        const chunk = Array.from(I.slice(j * v, (j + 1) * v));
        let x = 0x1ff;
        for (let l = B.length - 1; l >= 0; l--) {
          x >>= 8;
          x += B[l] + (chunk[l] || 0);
          chunk[l] = x & 0xff;
        }
        iRound.push(...chunk);
      }
      I = new Uint8Array(iRound);
      result.push(...A);
    }
    return new Uint8Array(result.slice(0, keyLength >> 3)).buffer;
  });
  return _makePKCS12B2Key.apply(this, arguments);
}
function prepareAlgorithm(data) {
  const res = typeof data === "string" ? {
    name: data
  } : data;
  if ("hash" in res) {
    return {
      ...res,
      hash: prepareAlgorithm(res.hash)
    };
  }
  return res;
}
class CryptoEngine extends AbstractCryptoEngine {
  importKey(format, keyData, algorithm, extractable, keyUsages) {
    var _this11 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a, _b, _c, _d, _e, _f;
      let jwk = {};
      const alg = prepareAlgorithm(algorithm);
      switch (format.toLowerCase()) {
        case "raw":
          return _this11.subtle.importKey("raw", keyData, algorithm, extractable, keyUsages);
        case "spki":
          {
            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(keyData));
            AsnError.assert(asn1, "keyData");
            const publicKeyInfo = new PublicKeyInfo();
            try {
              publicKeyInfo.fromSchema(asn1.result);
            } catch {
              throw new ArgumentError("Incorrect keyData");
            }
            switch (alg.name.toUpperCase()) {
              case "RSA-PSS":
                {
                  if (!alg.hash) {
                    throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                  }
                  switch (alg.hash.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "PS1";
                      break;
                    case "SHA-256":
                      jwk.alg = "PS256";
                      break;
                    case "SHA-384":
                      jwk.alg = "PS384";
                      break;
                    case "SHA-512":
                      jwk.alg = "PS512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                  }
                }
              case "RSASSA-PKCS1-V1_5":
                {
                  keyUsages = ["verify"];
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                  if (!jwk.alg) {
                    if (!alg.hash) {
                      throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                    }
                    switch (alg.hash.name.toUpperCase()) {
                      case "SHA-1":
                        jwk.alg = "RS1";
                        break;
                      case "SHA-256":
                        jwk.alg = "RS256";
                        break;
                      case "SHA-384":
                        jwk.alg = "RS384";
                        break;
                      case "SHA-512":
                        jwk.alg = "RS512";
                        break;
                      default:
                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                    }
                  }
                  const publicKeyJSON = publicKeyInfo.toJSON();
                  Object.assign(jwk, publicKeyJSON);
                }
                break;
              case "ECDSA":
                keyUsages = ["verify"];
              case "ECDH":
                {
                  jwk = {
                    kty: "EC",
                    ext: extractable,
                    key_ops: keyUsages
                  };
                  if (publicKeyInfo.algorithm.algorithmId !== "1.2.840.10045.2.1") {
                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);
                  }
                  const publicKeyJSON = publicKeyInfo.toJSON();
                  Object.assign(jwk, publicKeyJSON);
                }
                break;
              case "RSA-OAEP":
                {
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  if (_this11.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";else {
                    if (!alg.hash) {
                      throw new ParameterError("hash", "algorithm.hash", "Incorrect hash algorithm: Hash algorithm is missed");
                    }
                    switch (alg.hash.name.toUpperCase()) {
                      case "SHA-1":
                        jwk.alg = "RSA-OAEP";
                        break;
                      case "SHA-256":
                        jwk.alg = "RSA-OAEP-256";
                        break;
                      case "SHA-384":
                        jwk.alg = "RSA-OAEP-384";
                        break;
                      case "SHA-512":
                        jwk.alg = "RSA-OAEP-512";
                        break;
                      default:
                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);
                    }
                  }
                  const publicKeyJSON = publicKeyInfo.toJSON();
                  Object.assign(jwk, publicKeyJSON);
                }
                break;
              case "RSAES-PKCS1-V1_5":
                {
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  jwk.alg = "PS1";
                  const publicKeyJSON = publicKeyInfo.toJSON();
                  Object.assign(jwk, publicKeyJSON);
                }
                break;
              default:
                throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
            }
          }
          break;
        case "pkcs8":
          {
            const privateKeyInfo = new PrivateKeyInfo();
            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(keyData));
            AsnError.assert(asn1, "keyData");
            try {
              privateKeyInfo.fromSchema(asn1.result);
            } catch (ex) {
              throw new Error("Incorrect keyData");
            }
            if (!privateKeyInfo.parsedKey) throw new Error("Incorrect keyData");
            switch (alg.name.toUpperCase()) {
              case "RSA-PSS":
                {
                  switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {
                    case "SHA-1":
                      jwk.alg = "PS1";
                      break;
                    case "SHA-256":
                      jwk.alg = "PS256";
                      break;
                    case "SHA-384":
                      jwk.alg = "PS384";
                      break;
                    case "SHA-512":
                      jwk.alg = "PS512";
                      break;
                    default:
                      throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);
                  }
                }
              case "RSASSA-PKCS1-V1_5":
                {
                  keyUsages = ["sign"];
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.113549.1.1.1") throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                  if ("alg" in jwk === false) {
                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {
                      case "SHA-1":
                        jwk.alg = "RS1";
                        break;
                      case "SHA-256":
                        jwk.alg = "RS256";
                        break;
                      case "SHA-384":
                        jwk.alg = "RS384";
                        break;
                      case "SHA-512":
                        jwk.alg = "RS512";
                        break;
                      default:
                        throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);
                    }
                  }
                  const privateKeyJSON = privateKeyInfo.toJSON();
                  Object.assign(jwk, privateKeyJSON);
                }
                break;
              case "ECDSA":
                keyUsages = ["sign"];
              case "ECDH":
                {
                  jwk = {
                    kty: "EC",
                    ext: extractable,
                    key_ops: keyUsages
                  };
                  if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== "1.2.840.10045.2.1") throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);
                  const privateKeyJSON = privateKeyInfo.toJSON();
                  Object.assign(jwk, privateKeyJSON);
                }
                break;
              case "RSA-OAEP":
                {
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  if (_this11.name.toLowerCase() === "safari") jwk.alg = "RSA-OAEP";else {
                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {
                      case "SHA-1":
                        jwk.alg = "RSA-OAEP";
                        break;
                      case "SHA-256":
                        jwk.alg = "RSA-OAEP-256";
                        break;
                      case "SHA-384":
                        jwk.alg = "RSA-OAEP-384";
                        break;
                      case "SHA-512":
                        jwk.alg = "RSA-OAEP-512";
                        break;
                      default:
                        throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);
                    }
                  }
                  const privateKeyJSON = privateKeyInfo.toJSON();
                  Object.assign(jwk, privateKeyJSON);
                }
                break;
              case "RSAES-PKCS1-V1_5":
                {
                  keyUsages = ["decrypt"];
                  jwk.kty = "RSA";
                  jwk.ext = extractable;
                  jwk.key_ops = keyUsages;
                  jwk.alg = "PS1";
                  const privateKeyJSON = privateKeyInfo.toJSON();
                  Object.assign(jwk, privateKeyJSON);
                }
                break;
              default:
                throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);
            }
          }
          break;
        case "jwk":
          jwk = keyData;
          break;
        default:
          throw new Error(`Incorrect format: ${format}`);
      }
      if (_this11.name.toLowerCase() === "safari") {
        try {
          return _this11.subtle.importKey("jwk", pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);
        } catch {
          return _this11.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
        }
      }
      return _this11.subtle.importKey("jwk", jwk, algorithm, extractable, keyUsages);
    })();
  }
  exportKey(format, key) {
    var _this12 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let jwk = yield _this12.subtle.exportKey("jwk", key);
      if (_this12.name.toLowerCase() === "safari") {
        if (jwk instanceof ArrayBuffer) {
          jwk = JSON.parse(pvutils__WEBPACK_IMPORTED_MODULE_3__.arrayBufferToString(jwk));
        }
      }
      switch (format.toLowerCase()) {
        case "raw":
          return _this12.subtle.exportKey("raw", key);
        case "spki":
          {
            const publicKeyInfo = new PublicKeyInfo();
            try {
              publicKeyInfo.fromJSON(jwk);
            } catch (ex) {
              throw new Error("Incorrect key data");
            }
            return publicKeyInfo.toSchema().toBER(false);
          }
        case "pkcs8":
          {
            const privateKeyInfo = new PrivateKeyInfo();
            try {
              privateKeyInfo.fromJSON(jwk);
            } catch (ex) {
              throw new Error("Incorrect key data");
            }
            return privateKeyInfo.toSchema().toBER(false);
          }
        case "jwk":
          return jwk;
        default:
          throw new Error(`Incorrect format: ${format}`);
      }
    })();
  }
  convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {
    var _this13 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {
        return keyData;
      }
      const key = yield _this13.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);
      return _this13.exportKey(outputFormat, key);
    })();
  }
  getAlgorithmByOID(oid, safety = false, target) {
    switch (oid) {
      case "1.2.840.113549.1.1.1":
        return {
          name: "RSAES-PKCS1-v1_5"
        };
      case "1.2.840.113549.1.1.5":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.113549.1.1.11":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.113549.1.1.12":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.113549.1.1.13":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.2.840.113549.1.1.10":
        return {
          name: "RSA-PSS"
        };
      case "1.2.840.113549.1.1.7":
        return {
          name: "RSA-OAEP"
        };
      case "1.2.840.10045.2.1":
      case "1.2.840.10045.4.1":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.10045.4.3.2":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.10045.4.3.3":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.10045.4.3.4":
        return {
          name: "ECDSA",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.3.133.16.840.63.0.2":
        return {
          name: "ECDH",
          kdf: "SHA-1"
        };
      case "1.3.132.1.11.1":
        return {
          name: "ECDH",
          kdf: "SHA-256"
        };
      case "1.3.132.1.11.2":
        return {
          name: "ECDH",
          kdf: "SHA-384"
        };
      case "1.3.132.1.11.3":
        return {
          name: "ECDH",
          kdf: "SHA-512"
        };
      case "2.16.840.1.101.3.4.1.2":
        return {
          name: "AES-CBC",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.22":
        return {
          name: "AES-CBC",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.42":
        return {
          name: "AES-CBC",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.6":
        return {
          name: "AES-GCM",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.26":
        return {
          name: "AES-GCM",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.46":
        return {
          name: "AES-GCM",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.4":
        return {
          name: "AES-CFB",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.24":
        return {
          name: "AES-CFB",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.44":
        return {
          name: "AES-CFB",
          length: 256
        };
      case "2.16.840.1.101.3.4.1.5":
        return {
          name: "AES-KW",
          length: 128
        };
      case "2.16.840.1.101.3.4.1.25":
        return {
          name: "AES-KW",
          length: 192
        };
      case "2.16.840.1.101.3.4.1.45":
        return {
          name: "AES-KW",
          length: 256
        };
      case "1.2.840.113549.2.7":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-1"
          }
        };
      case "1.2.840.113549.2.9":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        };
      case "1.2.840.113549.2.10":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-384"
          }
        };
      case "1.2.840.113549.2.11":
        return {
          name: "HMAC",
          hash: {
            name: "SHA-512"
          }
        };
      case "1.2.840.113549.1.9.16.3.5":
        return {
          name: "DH"
        };
      case "1.3.14.3.2.26":
        return {
          name: "SHA-1"
        };
      case "2.16.840.1.101.3.4.2.1":
        return {
          name: "SHA-256"
        };
      case "2.16.840.1.101.3.4.2.2":
        return {
          name: "SHA-384"
        };
      case "2.16.840.1.101.3.4.2.3":
        return {
          name: "SHA-512"
        };
      case "1.2.840.113549.1.5.12":
        return {
          name: "PBKDF2"
        };
      case "1.2.840.10045.3.1.7":
        return {
          name: "P-256"
        };
      case "1.3.132.0.34":
        return {
          name: "P-384"
        };
      case "1.3.132.0.35":
        return {
          name: "P-521"
        };
    }
    if (safety) {
      throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);
    }
    return {};
  }
  getOIDByAlgorithm(algorithm, safety = false, target) {
    let result = EMPTY_STRING;
    switch (algorithm.name.toUpperCase()) {
      case "RSAES-PKCS1-V1_5":
        result = "1.2.840.113549.1.1.1";
        break;
      case "RSASSA-PKCS1-V1_5":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.113549.1.1.5";
            break;
          case "SHA-256":
            result = "1.2.840.113549.1.1.11";
            break;
          case "SHA-384":
            result = "1.2.840.113549.1.1.12";
            break;
          case "SHA-512":
            result = "1.2.840.113549.1.1.13";
            break;
        }
        break;
      case "RSA-PSS":
        result = "1.2.840.113549.1.1.10";
        break;
      case "RSA-OAEP":
        result = "1.2.840.113549.1.1.7";
        break;
      case "ECDSA":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.10045.4.1";
            break;
          case "SHA-256":
            result = "1.2.840.10045.4.3.2";
            break;
          case "SHA-384":
            result = "1.2.840.10045.4.3.3";
            break;
          case "SHA-512":
            result = "1.2.840.10045.4.3.4";
            break;
        }
        break;
      case "ECDH":
        switch (algorithm.kdf.toUpperCase()) {
          case "SHA-1":
            result = "1.3.133.16.840.63.0.2";
            break;
          case "SHA-256":
            result = "1.3.132.1.11.1";
            break;
          case "SHA-384":
            result = "1.3.132.1.11.2";
            break;
          case "SHA-512":
            result = "1.3.132.1.11.3";
            break;
        }
        break;
      case "AES-CTR":
        break;
      case "AES-CBC":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.2";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.22";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.42";
            break;
        }
        break;
      case "AES-CMAC":
        break;
      case "AES-GCM":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.6";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.26";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.46";
            break;
        }
        break;
      case "AES-CFB":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.4";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.24";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.44";
            break;
        }
        break;
      case "AES-KW":
        switch (algorithm.length) {
          case 128:
            result = "2.16.840.1.101.3.4.1.5";
            break;
          case 192:
            result = "2.16.840.1.101.3.4.1.25";
            break;
          case 256:
            result = "2.16.840.1.101.3.4.1.45";
            break;
        }
        break;
      case "HMAC":
        switch (algorithm.hash.name.toUpperCase()) {
          case "SHA-1":
            result = "1.2.840.113549.2.7";
            break;
          case "SHA-256":
            result = "1.2.840.113549.2.9";
            break;
          case "SHA-384":
            result = "1.2.840.113549.2.10";
            break;
          case "SHA-512":
            result = "1.2.840.113549.2.11";
            break;
        }
        break;
      case "DH":
        result = "1.2.840.113549.1.9.16.3.5";
        break;
      case "SHA-1":
        result = "1.3.14.3.2.26";
        break;
      case "SHA-256":
        result = "2.16.840.1.101.3.4.2.1";
        break;
      case "SHA-384":
        result = "2.16.840.1.101.3.4.2.2";
        break;
      case "SHA-512":
        result = "2.16.840.1.101.3.4.2.3";
        break;
      case "CONCAT":
        break;
      case "HKDF":
        break;
      case "PBKDF2":
        result = "1.2.840.113549.1.5.12";
        break;
      case "P-256":
        result = "1.2.840.10045.3.1.7";
        break;
      case "P-384":
        result = "1.3.132.0.34";
        break;
      case "P-521":
        result = "1.3.132.0.35";
        break;
    }
    if (!result && safety) {
      throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);
    }
    return result;
  }
  getAlgorithmParameters(algorithmName, operation) {
    let result = {
      algorithm: {},
      usages: []
    };
    switch (algorithmName.toUpperCase()) {
      case "RSAES-PKCS1-V1_5":
      case "RSASSA-PKCS1-V1_5":
        switch (operation.toLowerCase()) {
          case "generatekey":
            result = {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5",
                modulusLength: 2048,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["sign", "verify"]
            };
            break;
          case "verify":
          case "sign":
          case "importkey":
            result = {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["verify"]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSASSA-PKCS1-v1_5"
              },
              usages: []
            };
        }
        break;
      case "RSA-PSS":
        switch (operation.toLowerCase()) {
          case "sign":
          case "verify":
            result = {
              algorithm: {
                name: "RSA-PSS",
                hash: {
                  name: "SHA-1"
                },
                saltLength: 20
              },
              usages: ["sign", "verify"]
            };
            break;
          case "generatekey":
            result = {
              algorithm: {
                name: "RSA-PSS",
                modulusLength: 2048,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: {
                  name: "SHA-1"
                }
              },
              usages: ["sign", "verify"]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "RSA-PSS",
                hash: {
                  name: "SHA-1"
                }
              },
              usages: ["verify"]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSA-PSS"
              },
              usages: []
            };
        }
        break;
      case "RSA-OAEP":
        switch (operation.toLowerCase()) {
          case "encrypt":
          case "decrypt":
            result = {
              algorithm: {
                name: "RSA-OAEP"
              },
              usages: ["encrypt", "decrypt"]
            };
            break;
          case "generatekey":
            result = {
              algorithm: {
                name: "RSA-OAEP",
                modulusLength: 2048,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "RSA-OAEP",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["encrypt"]
            };
            break;
          case "exportkey":
          default:
            return {
              algorithm: {
                name: "RSA-OAEP"
              },
              usages: []
            };
        }
        break;
      case "ECDSA":
        switch (operation.toLowerCase()) {
          case "generatekey":
            result = {
              algorithm: {
                name: "ECDSA",
                namedCurve: "P-256"
              },
              usages: ["sign", "verify"]
            };
            break;
          case "importkey":
            result = {
              algorithm: {
                name: "ECDSA",
                namedCurve: "P-256"
              },
              usages: ["verify"]
            };
            break;
          case "verify":
          case "sign":
            result = {
              algorithm: {
                name: "ECDSA",
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["sign"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "ECDSA"
              },
              usages: []
            };
        }
        break;
      case "ECDH":
        switch (operation.toLowerCase()) {
          case "exportkey":
          case "importkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "ECDH",
                namedCurve: "P-256"
              },
              usages: ["deriveKey", "deriveBits"]
            };
            break;
          case "derivekey":
          case "derivebits":
            result = {
              algorithm: {
                name: "ECDH",
                namedCurve: "P-256",
                public: []
              },
              usages: ["encrypt", "decrypt"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "ECDH"
              },
              usages: []
            };
        }
        break;
      case "AES-CTR":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-CTR",
                length: 256
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-CTR",
                counter: new Uint8Array(16),
                length: 10
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-CTR"
              },
              usages: []
            };
        }
        break;
      case "AES-CBC":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-CBC",
                length: 256
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-CBC",
                iv: this.getRandomValues(new Uint8Array(16))
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-CBC"
              },
              usages: []
            };
        }
        break;
      case "AES-GCM":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "AES-GCM",
                length: 256
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          case "decrypt":
          case "encrypt":
            result = {
              algorithm: {
                name: "AES-GCM",
                iv: this.getRandomValues(new Uint8Array(16))
              },
              usages: ["encrypt", "decrypt", "wrapKey", "unwrapKey"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-GCM"
              },
              usages: []
            };
        }
        break;
      case "AES-KW":
        switch (operation.toLowerCase()) {
          case "importkey":
          case "exportkey":
          case "generatekey":
          case "wrapkey":
          case "unwrapkey":
            result = {
              algorithm: {
                name: "AES-KW",
                length: 256
              },
              usages: ["wrapKey", "unwrapKey"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "AES-KW"
              },
              usages: []
            };
        }
        break;
      case "HMAC":
        switch (operation.toLowerCase()) {
          case "sign":
          case "verify":
            result = {
              algorithm: {
                name: "HMAC"
              },
              usages: ["sign", "verify"]
            };
            break;
          case "importkey":
          case "exportkey":
          case "generatekey":
            result = {
              algorithm: {
                name: "HMAC",
                length: 32,
                hash: {
                  name: "SHA-256"
                }
              },
              usages: ["sign", "verify"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "HMAC"
              },
              usages: []
            };
        }
        break;
      case "HKDF":
        switch (operation.toLowerCase()) {
          case "derivekey":
            result = {
              algorithm: {
                name: "HKDF",
                hash: "SHA-256",
                salt: new Uint8Array([]),
                info: new Uint8Array([])
              },
              usages: ["encrypt", "decrypt"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "HKDF"
              },
              usages: []
            };
        }
        break;
      case "PBKDF2":
        switch (operation.toLowerCase()) {
          case "derivekey":
            result = {
              algorithm: {
                name: "PBKDF2",
                hash: {
                  name: "SHA-256"
                },
                salt: new Uint8Array([]),
                iterations: 10000
              },
              usages: ["encrypt", "decrypt"]
            };
            break;
          default:
            return {
              algorithm: {
                name: "PBKDF2"
              },
              usages: []
            };
        }
        break;
    }
    return result;
  }
  getHashAlgorithm(signatureAlgorithm) {
    let result = EMPTY_STRING;
    switch (signatureAlgorithm.algorithmId) {
      case "1.2.840.10045.4.1":
      case "1.2.840.113549.1.1.5":
        result = "SHA-1";
        break;
      case "1.2.840.10045.4.3.2":
      case "1.2.840.113549.1.1.11":
        result = "SHA-256";
        break;
      case "1.2.840.10045.4.3.3":
      case "1.2.840.113549.1.1.12":
        result = "SHA-384";
        break;
      case "1.2.840.10045.4.3.4":
      case "1.2.840.113549.1.1.13":
        result = "SHA-512";
        break;
      case "1.2.840.113549.1.1.10":
        {
          try {
            const params = new RSASSAPSSParams({
              schema: signatureAlgorithm.algorithmParams
            });
            if (params.hashAlgorithm) {
              const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);
              if ("name" in algorithm) {
                result = algorithm.name;
              } else {
                return EMPTY_STRING;
              }
            } else result = "SHA-1";
          } catch {}
        }
        break;
    }
    return result;
  }
  encryptEncryptedContentInfo(parameters) {
    var _this14 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assert(parameters, "password", "contentEncryptionAlgorithm", "hmacHashAlgorithm", "iterationCount", "contentToEncrypt", "contentToEncrypt", "contentType");
      const contentEncryptionOID = _this14.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
      const pbkdf2OID = _this14.getOIDByAlgorithm({
        name: "PBKDF2"
      }, true, "PBKDF2");
      const hmacOID = _this14.getOIDByAlgorithm({
        name: "HMAC",
        hash: {
          name: parameters.hmacHashAlgorithm
        }
      }, true, "hmacHashAlgorithm");
      const ivBuffer = new ArrayBuffer(16);
      const ivView = new Uint8Array(ivBuffer);
      _this14.getRandomValues(ivView);
      const saltBuffer = new ArrayBuffer(64);
      const saltView = new Uint8Array(saltBuffer);
      _this14.getRandomValues(saltView);
      const contentView = new Uint8Array(parameters.contentToEncrypt);
      const pbkdf2Params = new PBKDF2Params({
        salt: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: saltBuffer
        }),
        iterationCount: parameters.iterationCount,
        prf: new AlgorithmIdentifier({
          algorithmId: hmacOID,
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        })
      });
      const passwordView = new Uint8Array(parameters.password);
      const pbkdfKey = yield _this14.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
      const derivedKey = yield _this14.deriveKey({
        name: "PBKDF2",
        hash: {
          name: parameters.hmacHashAlgorithm
        },
        salt: saltView,
        iterations: parameters.iterationCount
      }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, ["encrypt"]);
      const encryptedData = yield _this14.encrypt({
        name: parameters.contentEncryptionAlgorithm.name,
        iv: ivView
      }, derivedKey, contentView);
      const pbes2Parameters = new PBES2Params({
        keyDerivationFunc: new AlgorithmIdentifier({
          algorithmId: pbkdf2OID,
          algorithmParams: pbkdf2Params.toSchema()
        }),
        encryptionScheme: new AlgorithmIdentifier({
          algorithmId: contentEncryptionOID,
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: ivBuffer
          })
        })
      });
      return new EncryptedContentInfo({
        contentType: parameters.contentType,
        contentEncryptionAlgorithm: new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.5.13",
          algorithmParams: pbes2Parameters.toSchema()
        }),
        encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: encryptedData
        })
      });
    })();
  }
  decryptEncryptedContentInfo(parameters) {
    var _this15 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assert(parameters, "password", "encryptedContentInfo");
      if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== "1.2.840.113549.1.5.13") throw new Error(`Unknown "contentEncryptionAlgorithm": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);
      let pbes2Parameters;
      try {
        pbes2Parameters = new PBES2Params({
          schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams
        });
      } catch (ex) {
        throw new Error("Incorrectly encoded \"pbes2Parameters\"");
      }
      let pbkdf2Params;
      try {
        pbkdf2Params = new PBKDF2Params({
          schema: pbes2Parameters.keyDerivationFunc.algorithmParams
        });
      } catch (ex) {
        throw new Error("Incorrectly encoded \"pbkdf2Params\"");
      }
      const contentEncryptionAlgorithm = _this15.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);
      const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;
      const ivView = new Uint8Array(ivBuffer);
      const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;
      const saltView = new Uint8Array(saltBuffer);
      const iterationCount = pbkdf2Params.iterationCount;
      let hmacHashAlgorithm = "SHA-1";
      if (pbkdf2Params.prf) {
        const algorithm = _this15.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);
        hmacHashAlgorithm = algorithm.hash.name;
      }
      const pbkdfKey = yield _this15.importKey("raw", parameters.password, "PBKDF2", false, ["deriveKey"]);
      const result = yield _this15.deriveKey({
        name: "PBKDF2",
        hash: {
          name: hmacHashAlgorithm
        },
        salt: saltView,
        iterations: iterationCount
      }, pbkdfKey, contentEncryptionAlgorithm, false, ["decrypt"]);
      const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();
      return _this15.decrypt({
        name: contentEncryptionAlgorithm.name,
        iv: ivView
      }, result, dataBuffer);
    })();
  }
  stampDataWithPassword(parameters) {
    var _this16 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (parameters instanceof Object === false) throw new Error("Parameters must have type \"Object\"");
      ParameterError.assert(parameters, "password", "hashAlgorithm", "iterationCount", "salt", "contentToStamp");
      let length;
      switch (parameters.hashAlgorithm.toLowerCase()) {
        case "sha-1":
          length = 160;
          break;
        case "sha-256":
          length = 256;
          break;
        case "sha-384":
          length = 384;
          break;
        case "sha-512":
          length = 512;
          break;
        default:
          throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
      }
      const hmacAlgorithm = {
        name: "HMAC",
        length,
        hash: {
          name: parameters.hashAlgorithm
        }
      };
      const pkcsKey = yield makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
      const hmacKey = yield _this16.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, ["sign"]);
      return _this16.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));
    })();
  }
  verifyDataStampedWithPassword(parameters) {
    var _this17 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assert(parameters, "password", "hashAlgorithm", "salt", "iterationCount", "contentToVerify", "signatureToVerify");
      let length = 0;
      switch (parameters.hashAlgorithm.toLowerCase()) {
        case "sha-1":
          length = 160;
          break;
        case "sha-256":
          length = 256;
          break;
        case "sha-384":
          length = 384;
          break;
        case "sha-512":
          length = 512;
          break;
        default:
          throw new Error(`Incorrect "parameters.hashAlgorithm" parameter: ${parameters.hashAlgorithm}`);
      }
      const hmacAlgorithm = {
        name: "HMAC",
        length,
        hash: {
          name: parameters.hashAlgorithm
        }
      };
      const pkcsKey = yield makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);
      const hmacKey = yield _this17.importKey("raw", new Uint8Array(pkcsKey), hmacAlgorithm, false, ["verify"]);
      return _this17.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));
    })();
  }
  getSignatureParameters(privateKey, hashAlgorithm = "SHA-1") {
    var _this18 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this18.getOIDByAlgorithm({
        name: hashAlgorithm
      }, true, "hashAlgorithm");
      const signatureAlgorithm = new AlgorithmIdentifier();
      const parameters = _this18.getAlgorithmParameters(privateKey.algorithm.name, "sign");
      if (!Object.keys(parameters.algorithm).length) {
        throw new Error("Parameter 'algorithm' is empty");
      }
      const algorithm = parameters.algorithm;
      if ("hash" in privateKey.algorithm && privateKey.algorithm.hash && privateKey.algorithm.hash.name) {
        algorithm.hash.name = privateKey.algorithm.hash.name;
      } else {
        algorithm.hash.name = hashAlgorithm;
      }
      switch (privateKey.algorithm.name.toUpperCase()) {
        case "RSASSA-PKCS1-V1_5":
        case "ECDSA":
          signatureAlgorithm.algorithmId = _this18.getOIDByAlgorithm(algorithm, true);
          break;
        case "RSA-PSS":
          {
            switch (algorithm.hash.name.toUpperCase()) {
              case "SHA-256":
                algorithm.saltLength = 32;
                break;
              case "SHA-384":
                algorithm.saltLength = 48;
                break;
              case "SHA-512":
                algorithm.saltLength = 64;
                break;
            }
            const paramsObject = {};
            if (algorithm.hash.name.toUpperCase() !== "SHA-1") {
              const hashAlgorithmOID = _this18.getOIDByAlgorithm({
                name: algorithm.hash.name
              }, true, "hashAlgorithm");
              paramsObject.hashAlgorithm = new AlgorithmIdentifier({
                algorithmId: hashAlgorithmOID,
                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
              });
              paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({
                algorithmId: "1.2.840.113549.1.1.8",
                algorithmParams: paramsObject.hashAlgorithm.toSchema()
              });
            }
            if (algorithm.saltLength !== 20) paramsObject.saltLength = algorithm.saltLength;
            const pssParameters = new RSASSAPSSParams(paramsObject);
            signatureAlgorithm.algorithmId = "1.2.840.113549.1.1.10";
            signatureAlgorithm.algorithmParams = pssParameters.toSchema();
          }
          break;
        default:
          throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);
      }
      return {
        signatureAlgorithm,
        parameters
      };
    })();
  }
  signWithPrivateKey(data, privateKey, parameters) {
    var _this19 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const signature = yield _this19.sign(parameters.algorithm, privateKey, data);
      if (parameters.algorithm.name === "ECDSA") {
        return createCMSECDSASignature(signature);
      }
      return signature;
    })();
  }
  fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {
    const parameters = {};
    const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);
    if (shaAlgorithm === EMPTY_STRING) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
    let algorithmId;
    if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;
    const algorithmObject = this.getAlgorithmByOID(algorithmId, true);
    parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, "importKey");
    if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
    if (algorithmObject.name === "ECDSA") {
      const publicKeyAlgorithm = publicKeyInfo.algorithm;
      if (!publicKeyAlgorithm.algorithmParams) {
        throw new Error("Algorithm parameters for ECDSA public key are missed");
      }
      const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;
      if ("idBlock" in publicKeyAlgorithm.algorithmParams) {
        if (!(publicKeyAlgorithmParams.idBlock.tagClass === 1 && publicKeyAlgorithmParams.idBlock.tagNumber === 6)) {
          throw new Error("Incorrect type for ECDSA public key parameters");
        }
      }
      const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);
      parameters.algorithm.algorithm.namedCurve = curveObject.name;
    }
    return parameters;
  }
  getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {
    var _this20 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!parameters) {
        parameters = _this20.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);
      }
      const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);
      return _this20.importKey("spki", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);
    })();
  }
  verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {
    var _this21 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let publicKey;
      if (!shaAlgorithm) {
        shaAlgorithm = _this21.getHashAlgorithm(signatureAlgorithm);
        if (!shaAlgorithm) throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);
        publicKey = yield _this21.getPublicKey(publicKeyInfo, signatureAlgorithm);
      } else {
        const parameters = {};
        let algorithmId;
        if (signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.10") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;
        const algorithmObject = _this21.getAlgorithmByOID(algorithmId, true);
        parameters.algorithm = _this21.getAlgorithmParameters(algorithmObject.name, "importKey");
        if ("hash" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm;
        if (algorithmObject.name === "ECDSA") {
          let algorithmParamsChecked = false;
          if ("algorithmParams" in publicKeyInfo.algorithm === true) {
            if ("idBlock" in publicKeyInfo.algorithm.algorithmParams) {
              if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;
            }
          }
          if (algorithmParamsChecked === false) {
            throw new Error("Incorrect type for ECDSA public key parameters");
          }
          const curveObject = _this21.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);
          parameters.algorithm.algorithm.namedCurve = curveObject.name;
        }
        publicKey = yield _this21.getPublicKey(publicKeyInfo, null, parameters);
      }
      const algorithm = _this21.getAlgorithmParameters(publicKey.algorithm.name, "verify");
      if ("hash" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm;
      let signatureValue = signature.valueBlock.valueHexView;
      if (publicKey.algorithm.name === "ECDSA") {
        const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);
        if (!namedCurve) {
          throw new Error("Unsupported named curve in use");
        }
        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(signatureValue);
        AsnError.assert(asn1, "Signature value");
        signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);
      }
      if (publicKey.algorithm.name === "RSA-PSS") {
        const pssParameters = new RSASSAPSSParams({
          schema: signatureAlgorithm.algorithmParams
        });
        if ("saltLength" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;
        let hashAlgo = "SHA-1";
        if ("hashAlgorithm" in pssParameters) {
          const hashAlgorithm = _this21.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);
          hashAlgo = hashAlgorithm.name;
        }
        algorithm.algorithm.hash.name = hashAlgo;
      }
      return _this21.verify(algorithm.algorithm, publicKey, signatureValue, data);
    })();
  }
}
let engine = {
  name: "none",
  crypto: null
};
function isCryptoEngine(engine) {
  return engine && typeof engine === "object" && "crypto" in engine ? true : false;
}
function setEngine(name, ...args) {
  let crypto = null;
  if (args.length < 2) {
    if (args.length) {
      crypto = args[0];
    } else {
      crypto = typeof self !== "undefined" && self.crypto ? new CryptoEngine({
        name: "browser",
        crypto: self.crypto
      }) : null;
    }
  } else {
    const cryptoArg = args[0];
    const subtleArg = args[1];
    if (isCryptoEngine(subtleArg)) {
      crypto = subtleArg;
    } else if (isCryptoEngine(cryptoArg)) {
      crypto = cryptoArg;
    } else if ("subtle" in cryptoArg && "getRandomValues" in cryptoArg) {
      crypto = new CryptoEngine({
        crypto: cryptoArg
      });
    }
  }
  if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
    if (typeof global[process.pid] === "undefined") {
      global[process.pid] = {};
    } else {
      if (typeof global[process.pid] !== "object") {
        throw new Error(`Name global.${process.pid} already exists and it is not an object`);
      }
    }
    if (typeof global[process.pid].pkijs === "undefined") {
      global[process.pid].pkijs = {};
    } else {
      if (typeof global[process.pid].pkijs !== "object") {
        throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);
      }
    }
    global[process.pid].pkijs.engine = {
      name: name,
      crypto
    };
  } else {
    engine = {
      name: name,
      crypto
    };
  }
}
function getEngine() {
  if (typeof process !== "undefined" && "pid" in process && typeof global !== "undefined" && typeof window === "undefined") {
    let _engine;
    try {
      _engine = global[process.pid].pkijs.engine;
    } catch (ex) {
      throw new Error("Please call 'setEngine' before call to 'getEngine'");
    }
    return _engine;
  }
  return engine;
}
function getCrypto(safety = false) {
  const _engine = getEngine();
  if (!_engine.crypto && safety) {
    throw new Error("Unable to create WebCrypto object");
  }
  return _engine.crypto;
}
function getRandomValues(view) {
  return getCrypto(true).getRandomValues(view);
}
function getOIDByAlgorithm(algorithm, safety, target) {
  return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);
}
function getAlgorithmParameters(algorithmName, operation) {
  return getCrypto(true).getAlgorithmParameters(algorithmName, operation);
}
function createCMSECDSASignature(signatureBuffer) {
  if (signatureBuffer.byteLength % 2 !== 0) return EMPTY_BUFFER;
  const length = signatureBuffer.byteLength / 2;
  const rBuffer = new ArrayBuffer(length);
  const rView = new Uint8Array(rBuffer);
  rView.set(new Uint8Array(signatureBuffer, 0, length));
  const rInteger = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
    valueHex: rBuffer
  });
  const sBuffer = new ArrayBuffer(length);
  const sView = new Uint8Array(sBuffer);
  sView.set(new Uint8Array(signatureBuffer, length, length));
  const sInteger = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
    valueHex: sBuffer
  });
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    value: [rInteger.convertToDER(), sInteger.convertToDER()]
  }).toBER(false);
}
function createECDSASignatureFromCMS(cmsSignature, pointSize) {
  if (!(cmsSignature instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence && cmsSignature.valueBlock.value.length === 2 && cmsSignature.valueBlock.value[0] instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer && cmsSignature.valueBlock.value[1] instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer)) return EMPTY_BUFFER;
  const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;
  const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;
  const res = new Uint8Array(pointSize * 2);
  res.set(rValueView, pointSize - rValueView.byteLength);
  res.set(sValueView, 2 * pointSize - sValueView.byteLength);
  return res.buffer;
}
function getAlgorithmByOID(oid, safety = false, target) {
  return getCrypto(true).getAlgorithmByOID(oid, safety, target);
}
function getHashAlgorithm(signatureAlgorithm) {
  return getCrypto(true).getHashAlgorithm(signatureAlgorithm);
}
function kdfWithCounter(_x6, _x7, _x8, _x9, _x10) {
  return _kdfWithCounter.apply(this, arguments);
}
function _kdfWithCounter() {
  _kdfWithCounter = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (hashFunction, zBuffer, Counter, SharedInfo, crypto) {
    switch (hashFunction.toUpperCase()) {
      case "SHA-1":
      case "SHA-256":
      case "SHA-384":
      case "SHA-512":
        break;
      default:
        throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
    }
    ArgumentError.assert(zBuffer, "zBuffer", "ArrayBuffer");
    if (zBuffer.byteLength === 0) throw new ArgumentError("'zBuffer' has zero length, error");
    ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
    if (Counter > 255) throw new ArgumentError("Please set 'Counter' argument to value less or equal to 255");
    const counterBuffer = new ArrayBuffer(4);
    const counterView = new Uint8Array(counterBuffer);
    counterView[0] = 0x00;
    counterView[1] = 0x00;
    counterView[2] = 0x00;
    counterView[3] = Counter;
    let combinedBuffer = EMPTY_BUFFER;
    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(combinedBuffer, zBuffer);
    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(combinedBuffer, counterBuffer);
    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(combinedBuffer, SharedInfo);
    const result = yield crypto.digest({
      name: hashFunction
    }, combinedBuffer);
    return {
      counter: Counter,
      result
    };
  });
  return _kdfWithCounter.apply(this, arguments);
}
function kdf(_x11, _x12, _x13, _x14) {
  return _kdf.apply(this, arguments);
}
function _kdf() {
  _kdf = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {
    let hashLength = 0;
    let maxCounter = 1;
    switch (hashFunction.toUpperCase()) {
      case "SHA-1":
        hashLength = 160;
        break;
      case "SHA-256":
        hashLength = 256;
        break;
      case "SHA-384":
        hashLength = 384;
        break;
      case "SHA-512":
        hashLength = 512;
        break;
      default:
        throw new ArgumentError(`Unknown hash function: ${hashFunction}`);
    }
    ArgumentError.assert(Zbuffer, "Zbuffer", "ArrayBuffer");
    if (Zbuffer.byteLength === 0) throw new ArgumentError("'Zbuffer' has zero length, error");
    ArgumentError.assert(SharedInfo, "SharedInfo", "ArrayBuffer");
    const quotient = keydatalen / hashLength;
    if (Math.floor(quotient) > 0) {
      maxCounter = Math.floor(quotient);
      if (quotient - maxCounter > 0) maxCounter++;
    }
    const incomingResult = [];
    for (let i = 1; i <= maxCounter; i++) incomingResult.push(yield kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));
    let combinedBuffer = EMPTY_BUFFER;
    let currentCounter = 1;
    let found = true;
    while (found) {
      found = false;
      for (const result of incomingResult) {
        if (result.counter === currentCounter) {
          combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilConcatBuf(combinedBuffer, result.result);
          found = true;
          break;
        }
      }
      currentCounter++;
    }
    keydatalen >>= 3;
    if (combinedBuffer.byteLength > keydatalen) {
      const newBuffer = new ArrayBuffer(keydatalen);
      const newView = new Uint8Array(newBuffer);
      const combinedView = new Uint8Array(combinedBuffer);
      for (let i = 0; i < keydatalen; i++) newView[i] = combinedView[i];
      return newBuffer;
    }
    return combinedBuffer;
  });
  return _kdf.apply(this, arguments);
}
const VERSION$i = "version";
const LOG_ID = "logID";
const EXTENSIONS$6 = "extensions";
const TIMESTAMP = "timestamp";
const HASH_ALGORITHM$3 = "hashAlgorithm";
const SIGNATURE_ALGORITHM$8 = "signatureAlgorithm";
const SIGNATURE$7 = "signature";
const NONE = "none";
const MD5 = "md5";
const SHA1 = "sha1";
const SHA224 = "sha224";
const SHA256 = "sha256";
const SHA384 = "sha384";
const SHA512 = "sha512";
const ANONYMOUS = "anonymous";
const RSA = "rsa";
const DSA = "dsa";
const ECDSA = "ecdsa";
class SignedCertificateTimestamp extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));
    this.logID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));
    this.timestamp = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));
    this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));
    this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));
    if ("stream" in parameters && parameters.stream) {
      this.fromStream(parameters.stream);
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$i:
        return 0;
      case LOG_ID:
      case EXTENSIONS$6:
        return EMPTY_BUFFER;
      case TIMESTAMP:
        return new Date(0);
      case HASH_ALGORITHM$3:
      case SIGNATURE_ALGORITHM$8:
        return EMPTY_STRING;
      case SIGNATURE$7:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  fromSchema(schema) {
    if (schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.RawData === false) throw new Error("Object's schema was not verified against input data for SignedCertificateTimestamp");
    const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream({
      stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.ByteStream({
        buffer: schema.data
      })
    });
    this.fromStream(seqStream);
  }
  fromStream(stream) {
    const blockLength = stream.getUint16();
    this.version = stream.getBlock(1)[0];
    if (this.version === 0) {
      this.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);
      this.timestamp = new Date(pvutils__WEBPACK_IMPORTED_MODULE_3__.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));
      const extensionsLength = stream.getUint16();
      this.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0);
      switch (stream.getBlock(1)[0]) {
        case 0:
          this.hashAlgorithm = NONE;
          break;
        case 1:
          this.hashAlgorithm = MD5;
          break;
        case 2:
          this.hashAlgorithm = SHA1;
          break;
        case 3:
          this.hashAlgorithm = SHA224;
          break;
        case 4:
          this.hashAlgorithm = SHA256;
          break;
        case 5:
          this.hashAlgorithm = SHA384;
          break;
        case 6:
          this.hashAlgorithm = SHA512;
          break;
        default:
          throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
      switch (stream.getBlock(1)[0]) {
        case 0:
          this.signatureAlgorithm = ANONYMOUS;
          break;
        case 1:
          this.signatureAlgorithm = RSA;
          break;
        case 2:
          this.signatureAlgorithm = DSA;
          break;
        case 3:
          this.signatureAlgorithm = ECDSA;
          break;
        default:
          throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
      const signatureLength = stream.getUint16();
      const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(signatureData);
      AsnError.assert(asn1, "SignedCertificateTimestamp");
      this.signature = asn1.result;
      if (blockLength !== 47 + extensionsLength + signatureLength) {
        throw new Error("Object's stream was not correct for SignedCertificateTimestamp");
      }
    }
  }
  toSchema() {
    const stream = this.toStream();
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.RawData({
      data: stream.stream.buffer
    });
  }
  toStream() {
    const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream();
    stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);
    stream.appendChar(this.version);
    stream.appendView(new Uint8Array(this.logID));
    const timeBuffer = new ArrayBuffer(8);
    const timeView = new Uint8Array(timeBuffer);
    const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilToBase(this.timestamp.valueOf(), 8);
    timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
    stream.appendView(timeView);
    stream.appendUint16(this.extensions.byteLength);
    if (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));
    let _hashAlgorithm;
    switch (this.hashAlgorithm.toLowerCase()) {
      case NONE:
        _hashAlgorithm = 0;
        break;
      case MD5:
        _hashAlgorithm = 1;
        break;
      case SHA1:
        _hashAlgorithm = 2;
        break;
      case SHA224:
        _hashAlgorithm = 3;
        break;
      case SHA256:
        _hashAlgorithm = 4;
        break;
      case SHA384:
        _hashAlgorithm = 5;
        break;
      case SHA512:
        _hashAlgorithm = 6;
        break;
      default:
        throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);
    }
    stream.appendChar(_hashAlgorithm);
    let _signatureAlgorithm;
    switch (this.signatureAlgorithm.toLowerCase()) {
      case ANONYMOUS:
        _signatureAlgorithm = 0;
        break;
      case RSA:
        _signatureAlgorithm = 1;
        break;
      case DSA:
        _signatureAlgorithm = 2;
        break;
      case ECDSA:
        _signatureAlgorithm = 3;
        break;
      default:
        throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);
    }
    stream.appendChar(_signatureAlgorithm);
    const _signature = this.signature.toBER(false);
    stream.appendUint16(_signature.byteLength);
    stream.appendView(new Uint8Array(_signature));
    return stream;
  }
  toJSON() {
    return {
      version: this.version,
      logID: pvutils__WEBPACK_IMPORTED_MODULE_3__.bufferToHexCodes(this.logID),
      timestamp: this.timestamp,
      extensions: pvutils__WEBPACK_IMPORTED_MODULE_3__.bufferToHexCodes(this.extensions),
      hashAlgorithm: this.hashAlgorithm,
      signatureAlgorithm: this.signatureAlgorithm,
      signature: this.signature.toJSON()
    };
  }
  verify(logs, data, dataType = 0, crypto = getCrypto(true)) {
    var _this22 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const logId = pvutils__WEBPACK_IMPORTED_MODULE_3__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_3__.arrayBufferToString(_this22.logID));
      let publicKeyBase64 = null;
      const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream();
      for (const log of logs) {
        if (log.log_id === logId) {
          publicKeyBase64 = log.key;
          break;
        }
      }
      if (!publicKeyBase64) {
        throw new Error(`Public key not found for CT with logId: ${logId}`);
      }
      const pki = pvutils__WEBPACK_IMPORTED_MODULE_3__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_3__.fromBase64(publicKeyBase64));
      const publicKeyInfo = PublicKeyInfo.fromBER(pki);
      stream.appendChar(0x00);
      stream.appendChar(0x00);
      const timeBuffer = new ArrayBuffer(8);
      const timeView = new Uint8Array(timeBuffer);
      const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_3__.utilToBase(_this22.timestamp.valueOf(), 8);
      timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);
      stream.appendView(timeView);
      stream.appendUint16(dataType);
      if (dataType === 0) stream.appendUint24(data.byteLength);
      stream.appendView(new Uint8Array(data));
      stream.appendUint16(_this22.extensions.byteLength);
      if (_this22.extensions.byteLength !== 0) stream.appendView(new Uint8Array(_this22.extensions));
      return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: _this22.signature.toBER(false)
      }), publicKeyInfo, {
        algorithmId: EMPTY_STRING
      }, "SHA-256");
    })();
  }
}
SignedCertificateTimestamp.CLASS_NAME = "SignedCertificateTimestamp";
function verifySCTsForCertificate(_x15, _x16, _x17) {
  return _verifySCTsForCertificate.apply(this, arguments);
}
function _verifySCTsForCertificate() {
  _verifySCTsForCertificate = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificate, issuerCertificate, logs, index = -1, crypto = getCrypto(true)) {
    let parsedValue = null;
    const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream();
    if (certificate.extensions) {
      for (let i = certificate.extensions.length - 1; i >= 0; i--) {
        switch (certificate.extensions[i].extnID) {
          case id_SignedCertificateTimestampList:
            {
              parsedValue = certificate.extensions[i].parsedValue;
              if (!parsedValue || parsedValue.timestamps.length === 0) throw new Error("Nothing to verify in the certificate");
              certificate.extensions.splice(i, 1);
            }
            break;
        }
      }
    }
    if (parsedValue === null) throw new Error("No SignedCertificateTimestampList extension in the specified certificate");
    const tbs = certificate.encodeTBS().toBER();
    const issuerId = yield crypto.digest({
      name: "SHA-256"
    }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));
    stream.appendView(new Uint8Array(issuerId));
    stream.appendUint24(tbs.byteLength);
    stream.appendView(new Uint8Array(tbs));
    const preCert = stream.stream.slice(0, stream.length);
    if (index === -1) {
      const verifyArray = [];
      for (const timestamp of parsedValue.timestamps) {
        const verifyResult = yield timestamp.verify(logs, preCert.buffer, 1, crypto);
        verifyArray.push(verifyResult);
      }
      return verifyArray;
    }
    if (index >= parsedValue.timestamps.length) index = parsedValue.timestamps.length - 1;
    return [yield parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];
  });
  return _verifySCTsForCertificate.apply(this, arguments);
}
const TIMESTAMPS = "timestamps";
class SignedCertificateTimestampList extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.timestamps = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TIMESTAMPS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TIMESTAMPS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    var _a;
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    (_a = names.optional) !== null && _a !== void 0 ? _a : names.optional = false;
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
      name: names.blockName || "SignedCertificateTimestampList",
      optional: names.optional
    });
  }
  fromSchema(schema) {
    if (schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString === false) {
      throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
    }
    const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream({
      stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.ByteStream({
        buffer: schema.valueBlock.valueHex
      })
    });
    const dataLength = seqStream.getUint16();
    if (dataLength !== seqStream.length) {
      throw new Error("Object's schema was not verified against input data for SignedCertificateTimestampList");
    }
    while (seqStream.length) {
      this.timestamps.push(new SignedCertificateTimestamp({
        stream: seqStream
      }));
    }
  }
  toSchema() {
    const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_4__.SeqStream();
    let overallLength = 0;
    const timestampsData = [];
    for (const timestamp of this.timestamps) {
      const timestampStream = timestamp.toStream();
      timestampsData.push(timestampStream);
      overallLength += timestampStream.stream.buffer.byteLength;
    }
    stream.appendUint16(overallLength);
    for (const timestamp of timestampsData) {
      stream.appendView(timestamp.stream.view);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
      valueHex: stream.stream.buffer.slice(0)
    });
  }
  toJSON() {
    return {
      timestamps: Array.from(this.timestamps, o => o.toJSON())
    };
  }
}
SignedCertificateTimestampList.CLASS_NAME = "SignedCertificateTimestampList";
const ATTRIBUTES$4 = "attributes";
const CLEAR_PROPS$11 = [ATTRIBUTES$4];
class SubjectDirectoryAttributes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ATTRIBUTES$4:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.attributes || EMPTY_STRING,
        value: Attribute.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$11);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({
      names: {
        attributes: ATTRIBUTES$4
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.attributes = Array.from(asn1.result.attributes, element => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.attributes, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      attributes: Array.from(this.attributes, o => o.toJSON())
    };
  }
}
SubjectDirectoryAttributes.CLASS_NAME = "SubjectDirectoryAttributes";
class ExtensionValueFactory {
  static getItems() {
    if (!this.types) {
      this.types = {};
      ExtensionValueFactory.register(id_SubjectAltName, "SubjectAltName", AltName);
      ExtensionValueFactory.register(id_IssuerAltName, "IssuerAltName", AltName);
      ExtensionValueFactory.register(id_AuthorityKeyIdentifier, "AuthorityKeyIdentifier", AuthorityKeyIdentifier);
      ExtensionValueFactory.register(id_BasicConstraints, "BasicConstraints", BasicConstraints);
      ExtensionValueFactory.register(id_MicrosoftCaVersion, "MicrosoftCaVersion", CAVersion);
      ExtensionValueFactory.register(id_CertificatePolicies, "CertificatePolicies", CertificatePolicies);
      ExtensionValueFactory.register(id_MicrosoftAppPolicies, "CertificatePoliciesMicrosoft", CertificatePolicies);
      ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, "MicrosoftCertTemplateV2", CertificateTemplate);
      ExtensionValueFactory.register(id_CRLDistributionPoints, "CRLDistributionPoints", CRLDistributionPoints);
      ExtensionValueFactory.register(id_FreshestCRL, "FreshestCRL", CRLDistributionPoints);
      ExtensionValueFactory.register(id_ExtKeyUsage, "ExtKeyUsage", ExtKeyUsage);
      ExtensionValueFactory.register(id_CertificateIssuer, "CertificateIssuer", GeneralNames);
      ExtensionValueFactory.register(id_AuthorityInfoAccess, "AuthorityInfoAccess", InfoAccess);
      ExtensionValueFactory.register(id_SubjectInfoAccess, "SubjectInfoAccess", InfoAccess);
      ExtensionValueFactory.register(id_IssuingDistributionPoint, "IssuingDistributionPoint", IssuingDistributionPoint);
      ExtensionValueFactory.register(id_NameConstraints, "NameConstraints", NameConstraints);
      ExtensionValueFactory.register(id_PolicyConstraints, "PolicyConstraints", PolicyConstraints);
      ExtensionValueFactory.register(id_PolicyMappings, "PolicyMappings", PolicyMappings);
      ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, "PrivateKeyUsagePeriod", PrivateKeyUsagePeriod);
      ExtensionValueFactory.register(id_QCStatements, "QCStatements", QCStatements);
      ExtensionValueFactory.register(id_SignedCertificateTimestampList, "SignedCertificateTimestampList", SignedCertificateTimestampList);
      ExtensionValueFactory.register(id_SubjectDirectoryAttributes, "SubjectDirectoryAttributes", SubjectDirectoryAttributes);
    }
    return this.types;
  }
  static fromBER(id, raw) {
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(raw);
    if (asn1.offset === -1) {
      return null;
    }
    const item = this.find(id);
    if (item) {
      try {
        return new item.type({
          schema: asn1.result
        });
      } catch (ex) {
        const res = new item.type();
        res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;
        return res;
      }
    }
    return asn1.result;
  }
  static find(id) {
    const types = this.getItems();
    return types[id] || null;
  }
  static register(id, name, type) {
    this.getItems()[id] = {
      name,
      type
    };
  }
}
const EXTN_ID = "extnID";
const CRITICAL = "critical";
const EXTN_VALUE = "extnValue";
const PARSED_VALUE$5 = "parsedValue";
const CLEAR_PROPS$10 = [EXTN_ID, CRITICAL, EXTN_VALUE];
class Extension extends PkiObject {
  get parsedValue() {
    if (this._parsedValue === undefined) {
      const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);
      this._parsedValue = parsedValue;
    }
    return this._parsedValue || undefined;
  }
  set parsedValue(value) {
    this._parsedValue = value;
  }
  constructor(parameters = {}) {
    super();
    this.extnID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));
    this.critical = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));
    if (EXTN_VALUE in parameters) {
      this.extnValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: parameters.extnValue
      });
    } else {
      this.extnValue = Extension.defaultValues(EXTN_VALUE);
    }
    if (PARSED_VALUE$5 in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case EXTN_ID:
        return EMPTY_STRING;
      case CRITICAL:
        return false;
      case EXTN_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case PARSED_VALUE$5:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.extnID || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
        name: names.critical || EMPTY_STRING,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.extnValue || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$10);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Extension.schema({
      names: {
        extnID: EXTN_ID,
        critical: CRITICAL,
        extnValue: EXTN_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.extnID = asn1.result.extnID.valueBlock.toString();
    if (CRITICAL in asn1.result) {
      this.critical = asn1.result.critical.valueBlock.value;
    }
    this.extnValue = asn1.result.extnValue;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.extnID
    }));
    if (this.critical !== Extension.defaultValues(CRITICAL)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
        value: this.critical
      }));
    }
    outputArray.push(this.extnValue);
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const object = {
      extnID: this.extnID,
      extnValue: this.extnValue.toJSON()
    };
    if (this.critical !== Extension.defaultValues(CRITICAL)) {
      object.critical = this.critical;
    }
    if (this.parsedValue && this.parsedValue.toJSON) {
      object.parsedValue = this.parsedValue.toJSON();
    }
    return object;
  }
}
Extension.CLASS_NAME = "Extension";
const EXTENSIONS$5 = "extensions";
const CLEAR_PROPS$$ = [EXTENSIONS$5];
class Extensions extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case EXTENSIONS$5:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      optional,
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.extensions || EMPTY_STRING,
        value: Extension.schema(names.extension || {})
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$$);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Extensions.schema({
      names: {
        extensions: EXTENSIONS$5
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.extensions = Array.from(asn1.result.extensions, element => new Extension({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.extensions, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      extensions: this.extensions.map(o => o.toJSON())
    };
  }
}
Extensions.CLASS_NAME = "Extensions";
const ISSUER$5 = "issuer";
const SERIAL_NUMBER$6 = "serialNumber";
const ISSUER_UID = "issuerUID";
const CLEAR_PROPS$_ = [ISSUER$5, SERIAL_NUMBER$6, ISSUER_UID];
class IssuerSerial extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));
    if (ISSUER_UID in parameters) {
      this.issuerUID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER$5:
        return new GeneralNames();
      case SERIAL_NUMBER$6:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case ISSUER_UID:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [GeneralNames.schema(names.issuer || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        optional: true,
        name: names.issuerUID || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$_);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, IssuerSerial.schema({
      names: {
        issuer: {
          names: {
            blockName: ISSUER$5
          }
        },
        serialNumber: SERIAL_NUMBER$6,
        issuerUID: ISSUER_UID
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuer = new GeneralNames({
      schema: asn1.result.issuer
    });
    this.serialNumber = asn1.result.serialNumber;
    if (ISSUER_UID in asn1.result) this.issuerUID = asn1.result.issuerUID;
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.issuer.toSchema(), this.serialNumber]
    });
    if (this.issuerUID) {
      result.valueBlock.value.push(this.issuerUID);
    }
    return result;
  }
  toJSON() {
    const result = {
      issuer: this.issuer.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
    if (this.issuerUID) {
      result.issuerUID = this.issuerUID.toJSON();
    }
    return result;
  }
}
IssuerSerial.CLASS_NAME = "IssuerSerial";
const VERSION$h = "version";
const BASE_CERTIFICATE_ID$2 = "baseCertificateID";
const SUBJECT_NAME = "subjectName";
const ISSUER$4 = "issuer";
const SIGNATURE$6 = "signature";
const SERIAL_NUMBER$5 = "serialNumber";
const ATTR_CERT_VALIDITY_PERIOD$1 = "attrCertValidityPeriod";
const ATTRIBUTES$3 = "attributes";
const ISSUER_UNIQUE_ID$2 = "issuerUniqueID";
const EXTENSIONS$4 = "extensions";
const CLEAR_PROPS$Z = [VERSION$h, BASE_CERTIFICATE_ID$2, SUBJECT_NAME, ISSUER$4, SIGNATURE$6, SERIAL_NUMBER$5, ATTR_CERT_VALIDITY_PERIOD$1, ATTRIBUTES$3, ISSUER_UNIQUE_ID$2, EXTENSIONS$4];
class AttributeCertificateInfoV1 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));
    if (BASE_CERTIFICATE_ID$2 in parameters) {
      this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));
    }
    if (SUBJECT_NAME in parameters) {
      this.subjectName = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));
    }
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));
    this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));
    this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));
    if (ISSUER_UNIQUE_ID$2 in parameters) this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));
    if (EXTENSIONS$4 in parameters) {
      this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$h:
        return 0;
      case BASE_CERTIFICATE_ID$2:
        return new IssuerSerial();
      case SUBJECT_NAME:
        return new GeneralNames();
      case ISSUER$4:
        return new GeneralNames();
      case SIGNATURE$6:
        return new AlgorithmIdentifier();
      case SERIAL_NUMBER$5:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case ATTR_CERT_VALIDITY_PERIOD$1:
        return new AttCertValidityPeriod();
      case ATTRIBUTES$3:
        return [];
      case ISSUER_UNIQUE_ID$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      case EXTENSIONS$4:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.baseCertificateID || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: IssuerSerial.schema().valueBlock.value
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.subjectName || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: GeneralNames.schema().valueBlock.value
        })]
      }), GeneralNames.schema({
        names: {
          blockName: names.issuer || EMPTY_STRING
        }
      }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || EMPTY_STRING
      }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        name: names.attributes || EMPTY_STRING,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          value: Attribute.schema()
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        optional: true,
        name: names.issuerUniqueID || EMPTY_STRING
      }), Extensions.schema(names.extensions || {}, true)]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$Z);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({
      names: {
        version: VERSION$h,
        baseCertificateID: BASE_CERTIFICATE_ID$2,
        subjectName: SUBJECT_NAME,
        issuer: ISSUER$4,
        signature: {
          names: {
            blockName: SIGNATURE$6
          }
        },
        serialNumber: SERIAL_NUMBER$5,
        attrCertValidityPeriod: {
          names: {
            blockName: ATTR_CERT_VALIDITY_PERIOD$1
          }
        },
        attributes: ATTRIBUTES$3,
        issuerUniqueID: ISSUER_UNIQUE_ID$2,
        extensions: {
          names: {
            blockName: EXTENSIONS$4
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (BASE_CERTIFICATE_ID$2 in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (SUBJECT_NAME in asn1.result) {
      this.subjectName = new GeneralNames({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.subjectName.valueBlock.value
        })
      });
    }
    this.issuer = asn1.result.issuer;
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result.signature
    });
    this.serialNumber = asn1.result.serialNumber;
    this.attrCertValidityPeriod = new AttCertValidityPeriod({
      schema: asn1.result.attrCertValidityPeriod
    });
    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({
      schema: element
    }));
    if (ISSUER_UNIQUE_ID$2 in asn1.result) {
      this.issuerUniqueID = asn1.result.issuerUniqueID;
    }
    if (EXTENSIONS$4 in asn1.result) {
      this.extensions = new Extensions({
        schema: asn1.result.extensions
      });
    }
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      })]
    });
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.subjectName) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.subjectName.toSchema().valueBlock.value
      }));
    }
    result.valueBlock.value.push(this.issuer.toSchema());
    result.valueBlock.value.push(this.signature.toSchema());
    result.valueBlock.value.push(this.serialNumber);
    result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());
    result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.attributes, o => o.toSchema())
    }));
    if (this.issuerUniqueID) {
      result.valueBlock.value.push(this.issuerUniqueID);
    }
    if (this.extensions) {
      result.valueBlock.value.push(this.extensions.toSchema());
    }
    return result;
  }
  toJSON() {
    const result = {
      version: this.version
    };
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.subjectName) {
      result.subjectName = this.subjectName.toJSON();
    }
    result.issuer = this.issuer.toJSON();
    result.signature = this.signature.toJSON();
    result.serialNumber = this.serialNumber.toJSON();
    result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();
    result.attributes = Array.from(this.attributes, o => o.toJSON());
    if (this.issuerUniqueID) {
      result.issuerUniqueID = this.issuerUniqueID.toJSON();
    }
    if (this.extensions) {
      result.extensions = this.extensions.toJSON();
    }
    return result;
  }
}
AttributeCertificateInfoV1.CLASS_NAME = "AttributeCertificateInfoV1";
const ACINFO$1 = "acinfo";
const SIGNATURE_ALGORITHM$7 = "signatureAlgorithm";
const SIGNATURE_VALUE$4 = "signatureValue";
const CLEAR_PROPS$Y = [ACINFO$1, SIGNATURE_VALUE$4, SIGNATURE_ALGORITHM$7];
class AttributeCertificateV1 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));
    this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACINFO$1:
        return new AttributeCertificateInfoV1();
      case SIGNATURE_ALGORITHM$7:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$4:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AttributeCertificateInfoV1.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signatureValue || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$Y);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttributeCertificateV1.schema({
      names: {
        acinfo: {
          names: {
            blockName: ACINFO$1
          }
        },
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$7
          }
        },
        signatureValue: SIGNATURE_VALUE$4
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.acinfo = new AttributeCertificateInfoV1({
      schema: asn1.result.acinfo
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]
    });
  }
  toJSON() {
    return {
      acinfo: this.acinfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
  }
}
AttributeCertificateV1.CLASS_NAME = "AttributeCertificateV1";
const DIGESTED_OBJECT_TYPE = "digestedObjectType";
const OTHER_OBJECT_TYPE_ID = "otherObjectTypeID";
const DIGEST_ALGORITHM$2 = "digestAlgorithm";
const OBJECT_DIGEST = "objectDigest";
const CLEAR_PROPS$X = [DIGESTED_OBJECT_TYPE, OTHER_OBJECT_TYPE_ID, DIGEST_ALGORITHM$2, OBJECT_DIGEST];
class ObjectDigestInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.digestedObjectType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));
    if (OTHER_OBJECT_TYPE_ID in parameters) {
      this.otherObjectTypeID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));
    }
    this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));
    this.objectDigest = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DIGESTED_OBJECT_TYPE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Enumerated();
      case OTHER_OBJECT_TYPE_ID:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier();
      case DIGEST_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case OBJECT_DIGEST:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Enumerated({
        name: names.digestedObjectType || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        optional: true,
        name: names.otherObjectTypeID || EMPTY_STRING
      }), AlgorithmIdentifier.schema(names.digestAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.objectDigest || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$X);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ObjectDigestInfo.schema({
      names: {
        digestedObjectType: DIGESTED_OBJECT_TYPE,
        otherObjectTypeID: OTHER_OBJECT_TYPE_ID,
        digestAlgorithm: {
          names: {
            blockName: DIGEST_ALGORITHM$2
          }
        },
        objectDigest: OBJECT_DIGEST
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.digestedObjectType = asn1.result.digestedObjectType;
    if (OTHER_OBJECT_TYPE_ID in asn1.result) {
      this.otherObjectTypeID = asn1.result.otherObjectTypeID;
    }
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.digestAlgorithm
    });
    this.objectDigest = asn1.result.objectDigest;
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.digestedObjectType]
    });
    if (this.otherObjectTypeID) {
      result.valueBlock.value.push(this.otherObjectTypeID);
    }
    result.valueBlock.value.push(this.digestAlgorithm.toSchema());
    result.valueBlock.value.push(this.objectDigest);
    return result;
  }
  toJSON() {
    const result = {
      digestedObjectType: this.digestedObjectType.toJSON(),
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      objectDigest: this.objectDigest.toJSON()
    };
    if (this.otherObjectTypeID) {
      result.otherObjectTypeID = this.otherObjectTypeID.toJSON();
    }
    return result;
  }
}
ObjectDigestInfo.CLASS_NAME = "ObjectDigestInfo";
const ISSUER_NAME = "issuerName";
const BASE_CERTIFICATE_ID$1 = "baseCertificateID";
const OBJECT_DIGEST_INFO$1 = "objectDigestInfo";
const CLEAR_PROPS$W = [ISSUER_NAME, BASE_CERTIFICATE_ID$1, OBJECT_DIGEST_INFO$1];
class V2Form extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (ISSUER_NAME in parameters) {
      this.issuerName = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));
    }
    if (BASE_CERTIFICATE_ID$1 in parameters) {
      this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));
    }
    if (OBJECT_DIGEST_INFO$1 in parameters) {
      this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER_NAME:
        return new GeneralNames();
      case BASE_CERTIFICATE_ID$1:
        return new IssuerSerial();
      case OBJECT_DIGEST_INFO$1:
        return new ObjectDigestInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [GeneralNames.schema({
        names: {
          blockName: names.issuerName
        }
      }, true), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        name: names.baseCertificateID || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: IssuerSerial.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        name: names.objectDigestInfo || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: ObjectDigestInfo.schema().valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$W);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, V2Form.schema({
      names: {
        issuerName: ISSUER_NAME,
        baseCertificateID: BASE_CERTIFICATE_ID$1,
        objectDigestInfo: OBJECT_DIGEST_INFO$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (ISSUER_NAME in asn1.result) this.issuerName = new GeneralNames({
      schema: asn1.result.issuerName
    });
    if (BASE_CERTIFICATE_ID$1 in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (OBJECT_DIGEST_INFO$1 in asn1.result) {
      this.objectDigestInfo = new ObjectDigestInfo({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.objectDigestInfo.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence();
    if (this.issuerName) result.valueBlock.value.push(this.issuerName.toSchema());
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.objectDigestInfo) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.objectDigestInfo.toSchema().valueBlock.value
      }));
    }
    return result;
  }
  toJSON() {
    const result = {};
    if (this.issuerName) {
      result.issuerName = this.issuerName.toJSON();
    }
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.objectDigestInfo) {
      result.objectDigestInfo = this.objectDigestInfo.toJSON();
    }
    return result;
  }
}
V2Form.CLASS_NAME = "V2Form";
const BASE_CERTIFICATE_ID = "baseCertificateID";
const ENTITY_NAME = "entityName";
const OBJECT_DIGEST_INFO = "objectDigestInfo";
const CLEAR_PROPS$V = [BASE_CERTIFICATE_ID, ENTITY_NAME, OBJECT_DIGEST_INFO];
class Holder extends PkiObject {
  constructor(parameters = {}) {
    super();
    if (BASE_CERTIFICATE_ID in parameters) {
      this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));
    }
    if (ENTITY_NAME in parameters) {
      this.entityName = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));
    }
    if (OBJECT_DIGEST_INFO in parameters) {
      this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BASE_CERTIFICATE_ID:
        return new IssuerSerial();
      case ENTITY_NAME:
        return new GeneralNames();
      case OBJECT_DIGEST_INFO:
        return new ObjectDigestInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        name: names.baseCertificateID || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: IssuerSerial.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        name: names.entityName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: GeneralNames.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        name: names.objectDigestInfo || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: ObjectDigestInfo.schema().valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$V);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Holder.schema({
      names: {
        baseCertificateID: BASE_CERTIFICATE_ID,
        entityName: ENTITY_NAME,
        objectDigestInfo: OBJECT_DIGEST_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (BASE_CERTIFICATE_ID in asn1.result) {
      this.baseCertificateID = new IssuerSerial({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.baseCertificateID.valueBlock.value
        })
      });
    }
    if (ENTITY_NAME in asn1.result) {
      this.entityName = new GeneralNames({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.entityName.valueBlock.value
        })
      });
    }
    if (OBJECT_DIGEST_INFO in asn1.result) {
      this.objectDigestInfo = new ObjectDigestInfo({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.objectDigestInfo.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence();
    if (this.baseCertificateID) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.baseCertificateID.toSchema().valueBlock.value
      }));
    }
    if (this.entityName) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.entityName.toSchema().valueBlock.value
      }));
    }
    if (this.objectDigestInfo) {
      result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: this.objectDigestInfo.toSchema().valueBlock.value
      }));
    }
    return result;
  }
  toJSON() {
    const result = {};
    if (this.baseCertificateID) {
      result.baseCertificateID = this.baseCertificateID.toJSON();
    }
    if (this.entityName) {
      result.entityName = this.entityName.toJSON();
    }
    if (this.objectDigestInfo) {
      result.objectDigestInfo = this.objectDigestInfo.toJSON();
    }
    return result;
  }
}
Holder.CLASS_NAME = "Holder";
const VERSION$g = "version";
const HOLDER = "holder";
const ISSUER$3 = "issuer";
const SIGNATURE$5 = "signature";
const SERIAL_NUMBER$4 = "serialNumber";
const ATTR_CERT_VALIDITY_PERIOD = "attrCertValidityPeriod";
const ATTRIBUTES$2 = "attributes";
const ISSUER_UNIQUE_ID$1 = "issuerUniqueID";
const EXTENSIONS$3 = "extensions";
const CLEAR_PROPS$U = [VERSION$g, HOLDER, ISSUER$3, SIGNATURE$5, SERIAL_NUMBER$4, ATTR_CERT_VALIDITY_PERIOD, ATTRIBUTES$2, ISSUER_UNIQUE_ID$1, EXTENSIONS$3];
class AttributeCertificateInfoV2 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));
    this.holder = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));
    this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));
    this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));
    if (ISSUER_UNIQUE_ID$1 in parameters) {
      this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));
    }
    if (EXTENSIONS$3 in parameters) {
      this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$g:
        return 1;
      case HOLDER:
        return new Holder();
      case ISSUER$3:
        return {};
      case SIGNATURE$5:
        return new AlgorithmIdentifier();
      case SERIAL_NUMBER$4:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case ATTR_CERT_VALIDITY_PERIOD:
        return new AttCertValidityPeriod();
      case ATTRIBUTES$2:
        return [];
      case ISSUER_UNIQUE_ID$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      case EXTENSIONS$3:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), Holder.schema(names.holder || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [GeneralNames.schema({
          names: {
            blockName: names.issuer || EMPTY_STRING
          }
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.issuer || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: V2Form.schema().valueBlock.value
        })]
      }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || EMPTY_STRING
      }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        name: names.attributes || EMPTY_STRING,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          value: Attribute.schema()
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        optional: true,
        name: names.issuerUniqueID || EMPTY_STRING
      }), Extensions.schema(names.extensions || {}, true)]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$U);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({
      names: {
        version: VERSION$g,
        holder: {
          names: {
            blockName: HOLDER
          }
        },
        issuer: ISSUER$3,
        signature: {
          names: {
            blockName: SIGNATURE$5
          }
        },
        serialNumber: SERIAL_NUMBER$4,
        attrCertValidityPeriod: {
          names: {
            blockName: ATTR_CERT_VALIDITY_PERIOD
          }
        },
        attributes: ATTRIBUTES$2,
        issuerUniqueID: ISSUER_UNIQUE_ID$1,
        extensions: {
          names: {
            blockName: EXTENSIONS$3
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.holder = new Holder({
      schema: asn1.result.holder
    });
    switch (asn1.result.issuer.idBlock.tagClass) {
      case 3:
        this.issuer = new V2Form({
          schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
            value: asn1.result.issuer.valueBlock.value
          })
        });
        break;
      case 1:
      default:
        throw new Error("Incorrect value for 'issuer' in AttributeCertificateInfoV2");
    }
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result.signature
    });
    this.serialNumber = asn1.result.serialNumber;
    this.attrCertValidityPeriod = new AttCertValidityPeriod({
      schema: asn1.result.attrCertValidityPeriod
    });
    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({
      schema: element
    }));
    if (ISSUER_UNIQUE_ID$1 in asn1.result) {
      this.issuerUniqueID = asn1.result.issuerUniqueID;
    }
    if (EXTENSIONS$3 in asn1.result) {
      this.extensions = new Extensions({
        schema: asn1.result.extensions
      });
    }
  }
  toSchema() {
    const result = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      }), this.holder.toSchema(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.issuer.toSchema().valueBlock.value
      }), this.signature.toSchema(), this.serialNumber, this.attrCertValidityPeriod.toSchema(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.attributes, o => o.toSchema())
      })]
    });
    if (this.issuerUniqueID) {
      result.valueBlock.value.push(this.issuerUniqueID);
    }
    if (this.extensions) {
      result.valueBlock.value.push(this.extensions.toSchema());
    }
    return result;
  }
  toJSON() {
    const result = {
      version: this.version,
      holder: this.holder.toJSON(),
      issuer: this.issuer.toJSON(),
      signature: this.signature.toJSON(),
      serialNumber: this.serialNumber.toJSON(),
      attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),
      attributes: Array.from(this.attributes, o => o.toJSON())
    };
    if (this.issuerUniqueID) {
      result.issuerUniqueID = this.issuerUniqueID.toJSON();
    }
    if (this.extensions) {
      result.extensions = this.extensions.toJSON();
    }
    return result;
  }
}
AttributeCertificateInfoV2.CLASS_NAME = "AttributeCertificateInfoV2";
const ACINFO = "acinfo";
const SIGNATURE_ALGORITHM$6 = "signatureAlgorithm";
const SIGNATURE_VALUE$3 = "signatureValue";
const CLEAR_PROPS$T = [ACINFO, SIGNATURE_ALGORITHM$6, SIGNATURE_VALUE$3];
class AttributeCertificateV2 extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));
    this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ACINFO:
        return new AttributeCertificateInfoV2();
      case SIGNATURE_ALGORITHM$6:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$3:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AttributeCertificateInfoV2.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signatureValue || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$T);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AttributeCertificateV2.schema({
      names: {
        acinfo: {
          names: {
            blockName: ACINFO
          }
        },
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$6
          }
        },
        signatureValue: SIGNATURE_VALUE$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.acinfo = new AttributeCertificateInfoV2({
      schema: asn1.result.acinfo
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]
    });
  }
  toJSON() {
    return {
      acinfo: this.acinfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
  }
}
AttributeCertificateV2.CLASS_NAME = "AttributeCertificateV2";
const CONTENT_TYPE = "contentType";
const CONTENT = "content";
const CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];
class ContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));
    this.content = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CONTENT_TYPE:
        return EMPTY_STRING;
      case CONTENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CONTENT_TYPE:
        return typeof memberValue === "string" && memberValue === this.defaultValues(CONTENT_TYPE);
      case CONTENT:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    if ("optional" in names === false) {
      names.optional = false;
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || "ContentInfo",
      optional: names.optional,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.contentType || CONTENT_TYPE
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.content || CONTENT
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$S);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ContentInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.contentType = asn1.result.contentType.valueBlock.toString();
    this.content = asn1.result.content;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.contentType
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.content]
      })]
    });
  }
  toJSON() {
    const object = {
      contentType: this.contentType
    };
    if (!(this.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) {
      object.content = this.content.toJSON();
    }
    return object;
  }
}
ContentInfo.CLASS_NAME = "ContentInfo";
ContentInfo.DATA = id_ContentType_Data;
ContentInfo.SIGNED_DATA = id_ContentType_SignedData;
ContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;
ContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;
const TYPE$1 = "type";
const VALUE$4 = "value";
const UTC_TIME_NAME = "utcTimeName";
const GENERAL_TIME_NAME = "generalTimeName";
const CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];
var TimeType;
(function (TimeType) {
  TimeType[TimeType["UTCTime"] = 0] = "UTCTime";
  TimeType[TimeType["GeneralizedTime"] = 1] = "GeneralizedTime";
  TimeType[TimeType["empty"] = 2] = "empty";
})(TimeType || (TimeType = {}));
class Time extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));
    this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE$1:
        return 0;
      case VALUE$4:
        return new Date(0, 0, 0);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}, optional = false) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      optional,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.UTCTime({
        name: names.utcTimeName || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.generalTimeName || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$R);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Time.schema({
      names: {
        utcTimeName: UTC_TIME_NAME,
        generalTimeName: GENERAL_TIME_NAME
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (UTC_TIME_NAME in asn1.result) {
      this.type = 0;
      this.value = asn1.result.utcTimeName.toDate();
    }
    if (GENERAL_TIME_NAME in asn1.result) {
      this.type = 1;
      this.value = asn1.result.generalTimeName.toDate();
    }
  }
  toSchema() {
    if (this.type === 0) {
      return new asn1js__WEBPACK_IMPORTED_MODULE_1__.UTCTime({
        valueDate: this.value
      });
    } else if (this.type === 1) {
      return new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        valueDate: this.value
      });
    }
    return {};
  }
  toJSON() {
    return {
      type: this.type,
      value: this.value
    };
  }
}
Time.CLASS_NAME = "Time";
const TBS$4 = "tbs";
const VERSION$f = "version";
const SERIAL_NUMBER$3 = "serialNumber";
const SIGNATURE$4 = "signature";
const ISSUER$2 = "issuer";
const NOT_BEFORE = "notBefore";
const NOT_AFTER = "notAfter";
const SUBJECT$1 = "subject";
const SUBJECT_PUBLIC_KEY_INFO = "subjectPublicKeyInfo";
const ISSUER_UNIQUE_ID = "issuerUniqueID";
const SUBJECT_UNIQUE_ID = "subjectUniqueID";
const EXTENSIONS$2 = "extensions";
const SIGNATURE_ALGORITHM$5 = "signatureAlgorithm";
const SIGNATURE_VALUE$2 = "signatureValue";
const TBS_CERTIFICATE = "tbsCertificate";
const TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;
const TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;
const TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;
const TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;
const TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;
const TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;
const TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;
const TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;
const TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;
const TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;
const TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;
const CLEAR_PROPS$Q = [TBS_CERTIFICATE, TBS_CERTIFICATE_VERSION, TBS_CERTIFICATE_SERIAL_NUMBER, TBS_CERTIFICATE_SIGNATURE, TBS_CERTIFICATE_ISSUER, TBS_CERTIFICATE_NOT_BEFORE, TBS_CERTIFICATE_NOT_AFTER, TBS_CERTIFICATE_SUBJECT, TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY, TBS_CERTIFICATE_ISSUER_UNIQUE_ID, TBS_CERTIFICATE_SUBJECT_UNIQUE_ID, TBS_CERTIFICATE_EXTENSIONS, SIGNATURE_ALGORITHM$5, SIGNATURE_VALUE$2];
function tbsCertificate(parameters = {}) {
  const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    name: names.blockName || TBS_CERTIFICATE,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      name: names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER
    }), AlgorithmIdentifier.schema(names.signature || {
      names: {
        blockName: TBS_CERTIFICATE_SIGNATURE
      }
    }), RelativeDistinguishedNames.schema(names.issuer || {
      names: {
        blockName: TBS_CERTIFICATE_ISSUER
      }
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.tbsCertificateValidity || "tbsCertificate.validity",
      value: [Time.schema(names.notBefore || {
        names: {
          utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,
          generalTimeName: TBS_CERTIFICATE_NOT_BEFORE
        }
      }), Time.schema(names.notAfter || {
        names: {
          utcTimeName: TBS_CERTIFICATE_NOT_AFTER,
          generalTimeName: TBS_CERTIFICATE_NOT_AFTER
        }
      })]
    }), RelativeDistinguishedNames.schema(names.subject || {
      names: {
        blockName: TBS_CERTIFICATE_SUBJECT
      }
    }), PublicKeyInfo.schema(names.subjectPublicKeyInfo || {
      names: {
        blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
      }
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      name: names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID,
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 1
      }
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
      name: names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 2
      }
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 3
      },
      value: [Extensions.schema(names.extensions || {
        names: {
          blockName: TBS_CERTIFICATE_EXTENSIONS
        }
      })]
    })]
  });
}
class Certificate extends PkiObject {
  get tbs() {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));
    this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));
    this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));
    this.subject = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));
    this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));
    if (ISSUER_UNIQUE_ID in parameters) {
      this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));
    }
    if (SUBJECT_UNIQUE_ID in parameters) {
      this.subjectUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));
    }
    if (EXTENSIONS$2 in parameters) {
      this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));
    }
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));
    this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$4:
        return EMPTY_BUFFER;
      case VERSION$f:
        return 0;
      case SERIAL_NUMBER$3:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case SIGNATURE$4:
        return new AlgorithmIdentifier();
      case ISSUER$2:
        return new RelativeDistinguishedNames();
      case NOT_BEFORE:
        return new Time();
      case NOT_AFTER:
        return new Time();
      case SUBJECT$1:
        return new RelativeDistinguishedNames();
      case SUBJECT_PUBLIC_KEY_INFO:
        return new PublicKeyInfo();
      case ISSUER_UNIQUE_ID:
        return EMPTY_BUFFER;
      case SUBJECT_UNIQUE_ID:
        return EMPTY_BUFFER;
      case EXTENSIONS$2:
        return [];
      case SIGNATURE_ALGORITHM$5:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [tbsCertificate(names.tbsCertificate), AlgorithmIdentifier.schema(names.signatureAlgorithm || {
        names: {
          blockName: SIGNATURE_ALGORITHM$5
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signatureValue || SIGNATURE_VALUE$2
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$Q);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Certificate.schema({
      names: {
        tbsCertificate: {
          names: {
            extensions: {
              names: {
                extensions: TBS_CERTIFICATE_EXTENSIONS
              }
            }
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;
    if (TBS_CERTIFICATE_VERSION in asn1.result) this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;
    this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result[TBS_CERTIFICATE_SIGNATURE]
    });
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERTIFICATE_ISSUER]
    });
    this.notBefore = new Time({
      schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE]
    });
    this.notAfter = new Time({
      schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER]
    });
    this.subject = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERTIFICATE_SUBJECT]
    });
    this.subjectPublicKeyInfo = new PublicKeyInfo({
      schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY]
    });
    if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result) this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;
    if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result) this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;
    if (TBS_CERTIFICATE_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({
      schema: element
    }));
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [];
    if (VERSION$f in this && this.version !== Certificate.defaultValues(VERSION$f)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          value: this.version
        })]
      }));
    }
    outputArray.push(this.serialNumber);
    outputArray.push(this.signature.toSchema());
    outputArray.push(this.issuer.toSchema());
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.notBefore.toSchema(), this.notAfter.toSchema()]
    }));
    outputArray.push(this.subject.toSchema());
    outputArray.push(this.subjectPublicKeyInfo.toSchema());
    if (this.issuerUniqueID) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        valueHex: this.issuerUniqueID
      }));
    }
    if (this.subjectUniqueID) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        valueHex: this.subjectUniqueID
      }));
    }
    if (this.extensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: Array.from(this.extensions, o => o.toSchema())
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (!this.tbsView.byteLength) {
        return Certificate.schema().value[0];
      }
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Certificate");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
    });
  }
  toJSON() {
    const res = {
      tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToHex(this.tbsView),
      version: this.version,
      serialNumber: this.serialNumber.toJSON(),
      signature: this.signature.toJSON(),
      issuer: this.issuer.toJSON(),
      notBefore: this.notBefore.toJSON(),
      notAfter: this.notAfter.toJSON(),
      subject: this.subject.toJSON(),
      subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (VERSION$f in this && this.version !== Certificate.defaultValues(VERSION$f)) {
      res.version = this.version;
    }
    if (this.issuerUniqueID) {
      res.issuerUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToHex(this.issuerUniqueID);
    }
    if (this.subjectUniqueID) {
      res.subjectUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToHex(this.subjectUniqueID);
    }
    if (this.extensions) {
      res.extensions = Array.from(this.extensions, o => o.toJSON());
    }
    return res;
  }
  getPublicKey(parameters, crypto = getCrypto(true)) {
    var _this23 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return crypto.getPublicKey(_this23.subjectPublicKeyInfo, _this23.signatureAlgorithm, parameters);
    })();
  }
  getKeyHash(hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this24 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return crypto.digest({
        name: hashAlgorithm
      }, _this24.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
    })();
  }
  sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this25 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!privateKey) {
        throw new Error("Need to provide a private key for signing");
      }
      const signatureParameters = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const parameters = signatureParameters.parameters;
      _this25.signature = signatureParameters.signatureAlgorithm;
      _this25.signatureAlgorithm = signatureParameters.signatureAlgorithm;
      _this25.tbsView = new Uint8Array(_this25.encodeTBS().toBER());
      const signature = yield crypto.signWithPrivateKey(_this25.tbsView, privateKey, parameters);
      _this25.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: signature
      });
    })();
  }
  verify(issuerCertificate, crypto = getCrypto(true)) {
    var _this26 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let subjectPublicKeyInfo;
      if (issuerCertificate) {
        subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;
      } else if (_this26.issuer.isEqual(_this26.subject)) {
        subjectPublicKeyInfo = _this26.subjectPublicKeyInfo;
      }
      if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {
        throw new Error("Please provide issuer certificate as a parameter");
      }
      return crypto.verifyWithPublicKey(_this26.tbsView, _this26.signatureValue, subjectPublicKeyInfo, _this26.signatureAlgorithm);
    })();
  }
}
Certificate.CLASS_NAME = "Certificate";
function checkCA(cert, signerCert = null) {
  if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {
    return null;
  }
  let isCA = false;
  if (cert.extensions) {
    for (const extension of cert.extensions) {
      if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {
        if (extension.parsedValue.cA) {
          isCA = true;
          break;
        }
      }
    }
  }
  if (isCA) {
    return cert;
  }
  return null;
}
const CERT_ID$1 = "certId";
const CERT_VALUE = "certValue";
const PARSED_VALUE$4 = "parsedValue";
const CLEAR_PROPS$P = [CERT_ID$1, CERT_VALUE];
class CertBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));
    this.certValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));
    if (PARSED_VALUE$4 in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERT_ID$1:
        return EMPTY_STRING;
      case CERT_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      case PARSED_VALUE$4:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERT_ID$1:
        return memberValue === EMPTY_STRING;
      case CERT_VALUE:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      case PARSED_VALUE$4:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.id || "id"
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.value || "value"
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$P);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertBag.schema({
      names: {
        id: CERT_ID$1,
        value: CERT_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certId = asn1.result.certId.valueBlock.toString();
    this.certValue = asn1.result.certValue;
    const certValueHex = this.certValue.valueBlock.valueHexView;
    switch (this.certId) {
      case id_CertBag_X509Certificate:
        {
          try {
            this.parsedValue = Certificate.fromBER(certValueHex);
          } catch (ex) {
            AttributeCertificateV2.fromBER(certValueHex);
          }
        }
        break;
      case id_CertBag_AttributeCertificate:
        {
          this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);
        }
        break;
      case id_CertBag_SDSICertificate:
      default:
        throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);
    }
  }
  toSchema() {
    if (PARSED_VALUE$4 in this) {
      if ("acinfo" in this.parsedValue) {
        this.certId = id_CertBag_AttributeCertificate;
      } else {
        this.certId = id_CertBag_X509Certificate;
      }
      this.certValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: this.parsedValue.toSchema().toBER(false)
      });
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.certId
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: ["toSchema" in this.certValue ? this.certValue.toSchema() : this.certValue]
      })]
    });
  }
  toJSON() {
    return {
      certId: this.certId,
      certValue: this.certValue.toJSON()
    };
  }
}
CertBag.CLASS_NAME = "CertBag";
const USER_CERTIFICATE = "userCertificate";
const REVOCATION_DATE = "revocationDate";
const CRL_ENTRY_EXTENSIONS = "crlEntryExtensions";
const CLEAR_PROPS$O = [USER_CERTIFICATE, REVOCATION_DATE, CRL_ENTRY_EXTENSIONS];
class RevokedCertificate extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.userCertificate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));
    this.revocationDate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));
    if (CRL_ENTRY_EXTENSIONS in parameters) {
      this.crlEntryExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case USER_CERTIFICATE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case REVOCATION_DATE:
        return new Time();
      case CRL_ENTRY_EXTENSIONS:
        return new Extensions();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.userCertificate || USER_CERTIFICATE
      }), Time.schema({
        names: {
          utcTimeName: names.revocationDate || REVOCATION_DATE,
          generalTimeName: names.revocationDate || REVOCATION_DATE
        }
      }), Extensions.schema({
        names: {
          blockName: names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS
        }
      }, true)]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$O);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RevokedCertificate.schema());
    AsnError.assertSchema(asn1, this.className);
    this.userCertificate = asn1.result.userCertificate;
    this.revocationDate = new Time({
      schema: asn1.result.revocationDate
    });
    if (CRL_ENTRY_EXTENSIONS in asn1.result) {
      this.crlEntryExtensions = new Extensions({
        schema: asn1.result.crlEntryExtensions
      });
    }
  }
  toSchema() {
    const outputArray = [this.userCertificate, this.revocationDate.toSchema()];
    if (this.crlEntryExtensions) {
      outputArray.push(this.crlEntryExtensions.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      userCertificate: this.userCertificate.toJSON(),
      revocationDate: this.revocationDate.toJSON()
    };
    if (this.crlEntryExtensions) {
      res.crlEntryExtensions = this.crlEntryExtensions.toJSON();
    }
    return res;
  }
}
RevokedCertificate.CLASS_NAME = "RevokedCertificate";
const TBS$3 = "tbs";
const VERSION$e = "version";
const SIGNATURE$3 = "signature";
const ISSUER$1 = "issuer";
const THIS_UPDATE$1 = "thisUpdate";
const NEXT_UPDATE$1 = "nextUpdate";
const REVOKED_CERTIFICATES = "revokedCertificates";
const CRL_EXTENSIONS = "crlExtensions";
const SIGNATURE_ALGORITHM$4 = "signatureAlgorithm";
const SIGNATURE_VALUE$1 = "signatureValue";
const TBS_CERT_LIST = "tbsCertList";
const TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;
const TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;
const TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;
const TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;
const TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;
const TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;
const TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;
const CLEAR_PROPS$N = [TBS_CERT_LIST, TBS_CERT_LIST_VERSION, TBS_CERT_LIST_SIGNATURE, TBS_CERT_LIST_ISSUER, TBS_CERT_LIST_THIS_UPDATE, TBS_CERT_LIST_NEXT_UPDATE, TBS_CERT_LIST_REVOKED_CERTIFICATES, TBS_CERT_LIST_EXTENSIONS, SIGNATURE_ALGORITHM$4, SIGNATURE_VALUE$1];
function tbsCertList(parameters = {}) {
  const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    name: names.blockName || TBS_CERT_LIST,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      optional: true,
      name: names.tbsCertListVersion || TBS_CERT_LIST_VERSION,
      value: 2
    }), AlgorithmIdentifier.schema(names.signature || {
      names: {
        blockName: TBS_CERT_LIST_SIGNATURE
      }
    }), RelativeDistinguishedNames.schema(names.issuer || {
      names: {
        blockName: TBS_CERT_LIST_ISSUER
      }
    }), Time.schema(names.tbsCertListThisUpdate || {
      names: {
        utcTimeName: TBS_CERT_LIST_THIS_UPDATE,
        generalTimeName: TBS_CERT_LIST_THIS_UPDATE
      }
    }), Time.schema(names.tbsCertListNextUpdate || {
      names: {
        utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,
        generalTimeName: TBS_CERT_LIST_NEXT_UPDATE
      }
    }, true), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      optional: true,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES,
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer(), Time.schema(), Extensions.schema({}, true)]
        })
      })]
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [Extensions.schema(names.crlExtensions || {
        names: {
          blockName: TBS_CERT_LIST_EXTENSIONS
        }
      })]
    })]
  });
}
const WELL_KNOWN_EXTENSIONS = [id_AuthorityKeyIdentifier, id_IssuerAltName, id_CRLNumber, id_BaseCRLNumber, id_IssuingDistributionPoint, id_FreshestCRL, id_AuthorityInfoAccess, id_CRLReason, id_InvalidityDate, id_CertificateIssuer];
class CertificateRevocationList extends PkiObject {
  get tbs() {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));
    this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));
    if (NEXT_UPDATE$1 in parameters) {
      this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));
    }
    if (REVOKED_CERTIFICATES in parameters) {
      this.revokedCertificates = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));
    }
    if (CRL_EXTENSIONS in parameters) {
      this.crlExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));
    }
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));
    this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$3:
        return EMPTY_BUFFER;
      case VERSION$e:
        return 0;
      case SIGNATURE$3:
        return new AlgorithmIdentifier();
      case ISSUER$1:
        return new RelativeDistinguishedNames();
      case THIS_UPDATE$1:
        return new Time();
      case NEXT_UPDATE$1:
        return new Time();
      case REVOKED_CERTIFICATES:
        return [];
      case CRL_EXTENSIONS:
        return new Extensions();
      case SIGNATURE_ALGORITHM$4:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || "CertificateList",
      value: [tbsCertList(parameters), AlgorithmIdentifier.schema(names.signatureAlgorithm || {
        names: {
          blockName: SIGNATURE_ALGORITHM$4
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signatureValue || SIGNATURE_VALUE$1
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$N);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertificateRevocationList.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;
    if (TBS_CERT_LIST_VERSION in asn1.result) {
      this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;
    }
    this.signature = new AlgorithmIdentifier({
      schema: asn1.result[TBS_CERT_LIST_SIGNATURE]
    });
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result[TBS_CERT_LIST_ISSUER]
    });
    this.thisUpdate = new Time({
      schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE]
    });
    if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {
      this.nextUpdate = new Time({
        schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE]
      });
    }
    if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {
      this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({
        schema: element
      }));
    }
    if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {
      this.crlExtensions = new Extensions({
        schema: asn1.result[TBS_CERT_LIST_EXTENSIONS]
      });
    }
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [];
    if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      }));
    }
    outputArray.push(this.signature.toSchema());
    outputArray.push(this.issuer.toSchema());
    outputArray.push(this.thisUpdate.toSchema());
    if (this.nextUpdate) {
      outputArray.push(this.nextUpdate.toSchema());
    }
    if (this.revokedCertificates) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.revokedCertificates, o => o.toSchema())
      }));
    }
    if (this.crlExtensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.crlExtensions.toSchema()]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (!encodeFlag) {
      if (!this.tbsView.byteLength) {
        return CertificateRevocationList.schema();
      }
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Certificate Revocation List");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
    });
  }
  toJSON() {
    const res = {
      tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToHex(this.tbsView),
      version: this.version,
      signature: this.signature.toJSON(),
      issuer: this.issuer.toJSON(),
      thisUpdate: this.thisUpdate.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) res.version = this.version;
    if (this.nextUpdate) {
      res.nextUpdate = this.nextUpdate.toJSON();
    }
    if (this.revokedCertificates) {
      res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());
    }
    if (this.crlExtensions) {
      res.crlExtensions = this.crlExtensions.toJSON();
    }
    return res;
  }
  isCertificateRevoked(certificate) {
    if (!this.issuer.isEqual(certificate.issuer)) {
      return false;
    }
    if (!this.revokedCertificates) {
      return false;
    }
    for (const revokedCertificate of this.revokedCertificates) {
      if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {
        return true;
      }
    }
    return false;
  }
  sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this27 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!privateKey) {
        throw new Error("Need to provide a private key for signing");
      }
      const signatureParameters = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const {
        parameters
      } = signatureParameters;
      _this27.signature = signatureParameters.signatureAlgorithm;
      _this27.signatureAlgorithm = signatureParameters.signatureAlgorithm;
      _this27.tbsView = new Uint8Array(_this27.encodeTBS().toBER());
      const signature = yield crypto.signWithPrivateKey(_this27.tbsView, privateKey, parameters);
      _this27.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: signature
      });
    })();
  }
  verify(parameters = {}, crypto = getCrypto(true)) {
    var _this28 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let subjectPublicKeyInfo;
      if (parameters.issuerCertificate) {
        subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;
        if (!_this28.issuer.isEqual(parameters.issuerCertificate.subject)) {
          return false;
        }
      }
      if (parameters.publicKeyInfo) {
        subjectPublicKeyInfo = parameters.publicKeyInfo;
      }
      if (!subjectPublicKeyInfo) {
        throw new Error("Issuer's certificate must be provided as an input parameter");
      }
      if (_this28.crlExtensions) {
        for (const extension of _this28.crlExtensions.extensions) {
          if (extension.critical) {
            if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID)) return false;
          }
        }
      }
      return crypto.verifyWithPublicKey(_this28.tbsView, _this28.signatureValue, subjectPublicKeyInfo, _this28.signatureAlgorithm);
    })();
  }
}
CertificateRevocationList.CLASS_NAME = "CertificateRevocationList";
const CRL_ID = "crlId";
const CRL_VALUE = "crlValue";
const PARSED_VALUE$3 = "parsedValue";
const CLEAR_PROPS$M = [CRL_ID, CRL_VALUE];
class CRLBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crlId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));
    this.crlValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));
    if (PARSED_VALUE$3 in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CRL_ID:
        return EMPTY_STRING;
      case CRL_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      case PARSED_VALUE$3:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CRL_ID:
        return memberValue === EMPTY_STRING;
      case CRL_VALUE:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      case PARSED_VALUE$3:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.id || "id"
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.value || "value"
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$M);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CRLBag.schema({
      names: {
        id: CRL_ID,
        value: CRL_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.crlId = asn1.result.crlId.valueBlock.toString();
    this.crlValue = asn1.result.crlValue;
    switch (this.crlId) {
      case id_CRLBag_X509CRL:
        {
          this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);
        }
        break;
      default:
        throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);
    }
  }
  toSchema() {
    if (this.parsedValue) {
      this.crlId = id_CRLBag_X509CRL;
      this.crlValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: this.parsedValue.toSchema().toBER(false)
      });
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.crlId
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.crlValue.toSchema()]
      })]
    });
  }
  toJSON() {
    return {
      crlId: this.crlId,
      crlValue: this.crlValue.toJSON()
    };
  }
}
CRLBag.CLASS_NAME = "CRLBag";
const VERSION$d = "version";
const ENCRYPTED_CONTENT_INFO$1 = "encryptedContentInfo";
const UNPROTECTED_ATTRS$1 = "unprotectedAttrs";
const CLEAR_PROPS$L = [VERSION$d, ENCRYPTED_CONTENT_INFO$1, UNPROTECTED_ATTRS$1];
class EncryptedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));
    this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));
    if (UNPROTECTED_ATTRS$1 in parameters) {
      this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$d:
        return 0;
      case ENCRYPTED_CONTENT_INFO$1:
        return new EncryptedContentInfo();
      case UNPROTECTED_ATTRS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$d:
        return memberValue === 0;
      case ENCRYPTED_CONTENT_INFO$1:
        return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent);
      case UNPROTECTED_ATTRS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), EncryptedContentInfo.schema(names.encryptedContentInfo || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.unprotectedAttrs || EMPTY_STRING,
          value: Attribute.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$L);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, EncryptedData.schema({
      names: {
        version: VERSION$d,
        encryptedContentInfo: {
          names: {
            blockName: ENCRYPTED_CONTENT_INFO$1
          }
        },
        unprotectedAttrs: UNPROTECTED_ATTRS$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.encryptedContentInfo = new EncryptedContentInfo({
      schema: asn1.result.encryptedContentInfo
    });
    if (UNPROTECTED_ATTRS$1 in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(this.encryptedContentInfo.toSchema());
    if (this.unprotectedAttrs) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.unprotectedAttrs, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      encryptedContentInfo: this.encryptedContentInfo.toJSON()
    };
    if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());
    return res;
  }
  encrypt(parameters, crypto = getCrypto(true)) {
    var _this29 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ArgumentError.assert(parameters, "parameters", "object");
      const encryptParams = {
        ...parameters,
        contentType: "1.2.840.113549.1.7.1"
      };
      _this29.encryptedContentInfo = yield crypto.encryptEncryptedContentInfo(encryptParams);
    })();
  }
  decrypt(parameters, crypto = getCrypto(true)) {
    var _this30 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ArgumentError.assert(parameters, "parameters", "object");
      const decryptParams = {
        ...parameters,
        encryptedContentInfo: _this30.encryptedContentInfo
      };
      return crypto.decryptEncryptedContentInfo(decryptParams);
    })();
  }
}
EncryptedData.CLASS_NAME = "EncryptedData";
const ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
const ENCRYPTED_DATA = "encryptedData";
const PARSED_VALUE$2 = "parsedValue";
const CLEAR_PROPS$K = [ENCRYPTION_ALGORITHM, ENCRYPTED_DATA];
class PKCS8ShroudedKeyBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.encryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));
    this.encryptedData = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));
    if (PARSED_VALUE$2 in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_DATA:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case PARSED_VALUE$2:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ENCRYPTION_ALGORITHM:
        return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
      case ENCRYPTED_DATA:
        return memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName));
      case PARSED_VALUE$2:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.encryptionAlgorithm || {
        names: {
          blockName: ENCRYPTION_ALGORITHM
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          name: names.encryptedData || ENCRYPTED_DATA
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          idBlock: {
            isConstructed: true
          },
          name: names.encryptedData || ENCRYPTED_DATA
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$K);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({
      names: {
        encryptionAlgorithm: {
          names: {
            blockName: ENCRYPTION_ALGORITHM
          }
        },
        encryptedData: ENCRYPTED_DATA
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.encryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.encryptionAlgorithm
    });
    this.encryptedData = asn1.result.encryptedData;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.encryptionAlgorithm.toSchema(), this.encryptedData]
    });
  }
  toJSON() {
    return {
      encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),
      encryptedData: this.encryptedData.toJSON()
    };
  }
  parseInternalValues(parameters, crypto = getCrypto(true)) {
    var _this31 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const cmsEncrypted = new EncryptedData({
        encryptedContentInfo: new EncryptedContentInfo({
          contentEncryptionAlgorithm: _this31.encryptionAlgorithm,
          encryptedContent: _this31.encryptedData
        })
      });
      const decryptedData = yield cmsEncrypted.decrypt(parameters, crypto);
      _this31.parsedValue = PrivateKeyInfo.fromBER(decryptedData);
    })();
  }
  makeInternalValues(parameters, crypto = getCrypto(true)) {
    var _this32 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this32.parsedValue) {
        throw new Error("Please initialize \"parsedValue\" first");
      }
      const cmsEncrypted = new EncryptedData();
      const encryptParams = {
        ...parameters,
        contentToEncrypt: _this32.parsedValue.toSchema().toBER(false)
      };
      yield cmsEncrypted.encrypt(encryptParams, crypto);
      if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {
        throw new Error("The filed `encryptedContent` in EncryptedContentInfo is empty");
      }
      _this32.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;
      _this32.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;
    })();
  }
}
PKCS8ShroudedKeyBag.CLASS_NAME = "PKCS8ShroudedKeyBag";
const SECRET_TYPE_ID = "secretTypeId";
const SECRET_VALUE = "secretValue";
const CLEAR_PROPS$J = [SECRET_TYPE_ID, SECRET_VALUE];
class SecretBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.secretTypeId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));
    this.secretValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SECRET_TYPE_ID:
        return EMPTY_STRING;
      case SECRET_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SECRET_TYPE_ID:
        return memberValue === EMPTY_STRING;
      case SECRET_VALUE:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.id || "id"
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.value || "value"
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$J);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SecretBag.schema({
      names: {
        id: SECRET_TYPE_ID,
        value: SECRET_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();
    this.secretValue = asn1.result.secretValue;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.secretTypeId
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.secretValue.toSchema()]
      })]
    });
  }
  toJSON() {
    return {
      secretTypeId: this.secretTypeId,
      secretValue: this.secretValue.toJSON()
    };
  }
}
SecretBag.CLASS_NAME = "SecretBag";
class SafeBagValueFactory {
  static getItems() {
    if (!this.items) {
      this.items = {};
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.1", PrivateKeyInfo);
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.2", PKCS8ShroudedKeyBag);
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.3", CertBag);
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.4", CRLBag);
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.5", SecretBag);
      SafeBagValueFactory.register("1.2.840.113549.1.12.10.1.6", SafeContents);
    }
    return this.items;
  }
  static register(id, type) {
    this.getItems()[id] = type;
  }
  static find(id) {
    return this.getItems()[id] || null;
  }
}
const BAG_ID = "bagId";
const BAG_VALUE = "bagValue";
const BAG_ATTRIBUTES = "bagAttributes";
const CLEAR_PROPS$I = [BAG_ID, BAG_VALUE, BAG_ATTRIBUTES];
class SafeBag extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.bagId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));
    this.bagValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));
    if (BAG_ATTRIBUTES in parameters) {
      this.bagAttributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case BAG_ID:
        return EMPTY_STRING;
      case BAG_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      case BAG_ATTRIBUTES:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case BAG_ID:
        return memberValue === EMPTY_STRING;
      case BAG_VALUE:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      case BAG_ATTRIBUTES:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.bagId || BAG_ID
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.bagValue || BAG_VALUE
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.bagAttributes || BAG_ATTRIBUTES,
          value: Attribute.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$I);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SafeBag.schema({
      names: {
        bagId: BAG_ID,
        bagValue: BAG_VALUE,
        bagAttributes: BAG_ATTRIBUTES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.bagId = asn1.result.bagId.valueBlock.toString();
    const bagType = SafeBagValueFactory.find(this.bagId);
    if (!bagType) {
      throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);
    }
    this.bagValue = new bagType({
      schema: asn1.result.bagValue
    });
    if (BAG_ATTRIBUTES in asn1.result) {
      this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.bagId
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [this.bagValue.toSchema()]
    })];
    if (this.bagAttributes) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        value: Array.from(this.bagAttributes, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const output = {
      bagId: this.bagId,
      bagValue: this.bagValue.toJSON()
    };
    if (this.bagAttributes) {
      output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());
    }
    return output;
  }
}
SafeBag.CLASS_NAME = "SafeBag";
const SAFE_BUGS = "safeBags";
class SafeContents extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.safeBags = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SAFE_BUGS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SAFE_BUGS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.safeBags || EMPTY_STRING,
        value: SafeBag.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [SAFE_BUGS]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SafeContents.schema({
      names: {
        safeBags: SAFE_BUGS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.safeBags, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      safeBags: Array.from(this.safeBags, o => o.toJSON())
    };
  }
}
SafeContents.CLASS_NAME = "SafeContents";
const OTHER_CERT_FORMAT = "otherCertFormat";
const OTHER_CERT = "otherCert";
const CLEAR_PROPS$H = [OTHER_CERT_FORMAT, OTHER_CERT];
class OtherCertificateFormat extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.otherCertFormat = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));
    this.otherCert = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case OTHER_CERT_FORMAT:
        return EMPTY_STRING;
      case OTHER_CERT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.otherCertFormat || OTHER_CERT_FORMAT
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.otherCert || OTHER_CERT
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$H);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OtherCertificateFormat.schema());
    AsnError.assertSchema(asn1, this.className);
    this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();
    this.otherCert = asn1.result.otherCert;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.otherCertFormat
      }), this.otherCert]
    });
  }
  toJSON() {
    const res = {
      otherCertFormat: this.otherCertFormat
    };
    if (!(this.otherCert instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) {
      res.otherCert = this.otherCert.toJSON();
    }
    return res;
  }
}
const CERTIFICATES$1 = "certificates";
const CLEAR_PROPS$G = [CERTIFICATES$1];
class CertificateSet extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTIFICATES$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.certificates || CERTIFICATES$1,
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
          value: [Certificate.schema(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any()]
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: 1
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence()]
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: 2
            },
            value: AttributeCertificateV2.schema().valueBlock.value
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: 3
            },
            value: OtherCertificateFormat.schema().valueBlock.value
          })]
        })
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$G);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertificateSet.schema());
    AsnError.assertSchema(asn1, this.className);
    this.certificates = Array.from(asn1.result.certificates || [], element => {
      const initialTagNumber = element.idBlock.tagNumber;
      if (element.idBlock.tagClass === 1) return new Certificate({
        schema: element
      });
      const elementSequence = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: element.valueBlock.value
      });
      switch (initialTagNumber) {
        case 1:
          if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {
            return new AttributeCertificateV2({
              schema: elementSequence
            });
          } else {
            return new AttributeCertificateV1({
              schema: elementSequence
            });
          }
        case 2:
          return new AttributeCertificateV2({
            schema: elementSequence
          });
        case 3:
          return new OtherCertificateFormat({
            schema: elementSequence
          });
      }
      return element;
    });
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      value: Array.from(this.certificates, element => {
        switch (true) {
          case element instanceof Certificate:
            return element.toSchema();
          case element instanceof AttributeCertificateV1:
            return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 1
              },
              value: element.toSchema().valueBlock.value
            });
          case element instanceof AttributeCertificateV2:
            return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 2
              },
              value: element.toSchema().valueBlock.value
            });
          case element instanceof OtherCertificateFormat:
            return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
              idBlock: {
                tagClass: 3,
                tagNumber: 3
              },
              value: element.toSchema().valueBlock.value
            });
        }
        return element.toSchema();
      })
    });
  }
  toJSON() {
    return {
      certificates: Array.from(this.certificates, o => o.toJSON())
    };
  }
}
CertificateSet.CLASS_NAME = "CertificateSet";
const OTHER_REV_INFO_FORMAT = "otherRevInfoFormat";
const OTHER_REV_INFO = "otherRevInfo";
const CLEAR_PROPS$F = [OTHER_REV_INFO_FORMAT, OTHER_REV_INFO];
class OtherRevocationInfoFormat extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.otherRevInfoFormat = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));
    this.otherRevInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case OTHER_REV_INFO_FORMAT:
        return EMPTY_STRING;
      case OTHER_REV_INFO:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.otherRevInfo || OTHER_REV_INFO
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$F);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());
    AsnError.assertSchema(asn1, this.className);
    this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();
    this.otherRevInfo = asn1.result.otherRevInfo;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.otherRevInfoFormat
      }), this.otherRevInfo]
    });
  }
  toJSON() {
    const res = {
      otherRevInfoFormat: this.otherRevInfoFormat
    };
    if (!(this.otherRevInfo instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) {
      res.otherRevInfo = this.otherRevInfo.toJSON();
    }
    return res;
  }
}
OtherRevocationInfoFormat.CLASS_NAME = "OtherRevocationInfoFormat";
const CRLS$3 = "crls";
const OTHER_REVOCATION_INFOS = "otherRevocationInfos";
const CLEAR_PROPS$E = [CRLS$3];
class RevocationInfoChoices extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crls = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));
    this.otherRevocationInfos = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CRLS$3:
        return [];
      case OTHER_REVOCATION_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.crls || EMPTY_STRING,
        value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
          value: [CertificateRevocationList.schema(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            idBlock: {
              tagClass: 3,
              tagNumber: 1
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any()]
          })]
        })
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$E);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RevocationInfoChoices.schema({
      names: {
        crls: CRLS$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.crls) {
      for (const element of asn1.result.crls) {
        if (element.idBlock.tagClass === 1) this.crls.push(new CertificateRevocationList({
          schema: element
        }));else this.otherRevocationInfos.push(new OtherRevocationInfoFormat({
          schema: element
        }));
      }
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(...Array.from(this.crls, o => o.toSchema()));
    outputArray.push(...Array.from(this.otherRevocationInfos, element => {
      const schema = element.toSchema();
      schema.idBlock.tagClass = 3;
      schema.idBlock.tagNumber = 1;
      return schema;
    }));
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      value: outputArray
    });
  }
  toJSON() {
    return {
      crls: Array.from(this.crls, o => o.toJSON()),
      otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())
    };
  }
}
RevocationInfoChoices.CLASS_NAME = "RevocationInfoChoices";
const CERTS$3 = "certs";
const CRLS$2 = "crls";
const CLEAR_PROPS$D = [CERTS$3, CRLS$2];
class OriginatorInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.crls = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERTS$3:
        return new CertificateSet();
      case CRLS$2:
        return new RevocationInfoChoices();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERTS$3:
        return memberValue.certificates.length === 0;
      case CRLS$2:
        return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.certs || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: CertificateSet.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.crls || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: RevocationInfoChoices.schema().valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$D);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OriginatorInfo.schema({
      names: {
        certs: CERTS$3,
        crls: CRLS$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (CERTS$3 in asn1.result) {
      this.certs = new CertificateSet({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
          value: asn1.result.certs.valueBlock.value
        })
      });
    }
    if (CRLS$2 in asn1.result) {
      this.crls = new RevocationInfoChoices({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
          value: asn1.result.crls.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    const sequenceValue = [];
    if (this.certs) {
      sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.certs.toSchema().valueBlock.value
      }));
    }
    if (this.crls) {
      sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: this.crls.toSchema().valueBlock.value
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: sequenceValue
    });
  }
  toJSON() {
    const res = {};
    if (this.certs) {
      res.certs = this.certs.toJSON();
    }
    if (this.crls) {
      res.crls = this.crls.toJSON();
    }
    return res;
  }
}
OriginatorInfo.CLASS_NAME = "OriginatorInfo";
const ISSUER = "issuer";
const SERIAL_NUMBER$2 = "serialNumber";
const CLEAR_PROPS$C = [ISSUER, SERIAL_NUMBER$2];
class IssuerAndSerialNumber extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ISSUER:
        return new RelativeDistinguishedNames();
      case SERIAL_NUMBER$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [RelativeDistinguishedNames.schema(names.issuer || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$C);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, IssuerAndSerialNumber.schema({
      names: {
        issuer: {
          names: {
            blockName: ISSUER
          }
        },
        serialNumber: SERIAL_NUMBER$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.issuer = new RelativeDistinguishedNames({
      schema: asn1.result.issuer
    });
    this.serialNumber = asn1.result.serialNumber;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.issuer.toSchema(), this.serialNumber]
    });
  }
  toJSON() {
    return {
      issuer: this.issuer.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
  }
}
IssuerAndSerialNumber.CLASS_NAME = "IssuerAndSerialNumber";
const VARIANT$3 = "variant";
const VALUE$3 = "value";
const CLEAR_PROPS$B = ["blockName"];
class RecipientIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));
    if (VALUE$3 in parameters) {
      this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$3:
        return -1;
      case VALUE$3:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$3:
        return memberValue === -1;
      case VALUE$3:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      value: [IssuerAndSerialNumber.schema({
        names: {
          blockName: names.blockName || EMPTY_STRING
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$B);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RecipientIdentifier.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      this.variant = 2;
      this.value = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: asn1.result.blockName.valueBlock.valueHex
      });
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        if (!(this.value instanceof IssuerAndSerialNumber)) {
          throw new Error("Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.");
        }
        return this.value.toSchema();
      case 2:
        if (!(this.value instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString)) {
          throw new Error("Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.");
        }
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          valueHex: this.value.valueBlock.valueHexView
        });
      default:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if ((this.variant === 1 || this.variant === 2) && this.value) {
      res.value = this.value.toJSON();
    }
    return res;
  }
}
RecipientIdentifier.CLASS_NAME = "RecipientIdentifier";
const VERSION$c = "version";
const RID$1 = "rid";
const KEY_ENCRYPTION_ALGORITHM$3 = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY$3 = "encryptedKey";
const RECIPIENT_CERTIFICATE$1 = "recipientCertificate";
const CLEAR_PROPS$A = [VERSION$c, RID$1, KEY_ENCRYPTION_ALGORITHM$3, ENCRYPTED_KEY$3];
class KeyTransRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));
    this.rid = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));
    this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));
    this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));
    this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$c:
        return -1;
      case RID$1:
        return {};
      case KEY_ENCRYPTION_ALGORITHM$3:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY$3:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case RECIPIENT_CERTIFICATE$1:
        return new Certificate();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$c:
        return memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c);
      case RID$1:
        return Object.keys(memberValue).length === 0;
      case KEY_ENCRYPTION_ALGORITHM$3:
      case ENCRYPTED_KEY$3:
        return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));
      case RECIPIENT_CERTIFICATE$1:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), RecipientIdentifier.schema(names.rid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.encryptedKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$A);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, KeyTransRecipientInfo.schema({
      names: {
        version: VERSION$c,
        rid: {
          names: {
            blockName: RID$1
          }
        },
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$3
          }
        },
        encryptedKey: ENCRYPTED_KEY$3
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (asn1.result.rid.idBlock.tagClass === 3) {
      this.rid = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: asn1.result.rid.valueBlock.valueHex
      });
    } else {
      this.rid = new IssuerAndSerialNumber({
        schema: asn1.result.rid
      });
    }
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    const outputArray = [];
    if (this.rid instanceof IssuerAndSerialNumber) {
      this.version = 0;
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      }));
      outputArray.push(this.rid.toSchema());
    } else {
      this.version = 2;
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      }));
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        valueHex: this.rid.valueBlock.valueHexView
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.encryptedKey);
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    return {
      version: this.version,
      rid: this.rid.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
}
KeyTransRecipientInfo.CLASS_NAME = "KeyTransRecipientInfo";
const ALGORITHM = "algorithm";
const PUBLIC_KEY = "publicKey";
const CLEAR_PROPS$z = [ALGORITHM, PUBLIC_KEY];
class OriginatorPublicKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));
    this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ALGORITHM:
        return new AlgorithmIdentifier();
      case PUBLIC_KEY:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ALGORITHM:
      case PUBLIC_KEY:
        return memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.algorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.publicKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$z);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OriginatorPublicKey.schema({
      names: {
        algorithm: {
          names: {
            blockName: ALGORITHM
          }
        },
        publicKey: PUBLIC_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.algorithm = new AlgorithmIdentifier({
      schema: asn1.result.algorithm
    });
    this.publicKey = asn1.result.publicKey;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.algorithm.toSchema(), this.publicKey]
    });
  }
  toJSON() {
    return {
      algorithm: this.algorithm.toJSON(),
      publicKey: this.publicKey.toJSON()
    };
  }
}
OriginatorPublicKey.CLASS_NAME = "OriginatorPublicKey";
const VARIANT$2 = "variant";
const VALUE$2 = "value";
const CLEAR_PROPS$y = ["blockName"];
class OriginatorIdentifierOrKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));
    if (VALUE$2 in parameters) {
      this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$2:
        return -1;
      case VALUE$2:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$2:
        return memberValue === -1;
      case VALUE$2:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      value: [IssuerAndSerialNumber.schema({
        names: {
          blockName: names.blockName || EMPTY_STRING
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        name: names.blockName || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        name: names.blockName || EMPTY_STRING,
        value: OriginatorPublicKey.schema().valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$y);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      if (asn1.result.blockName.idBlock.tagNumber === 0) {
        asn1.result.blockName.idBlock.tagClass = 1;
        asn1.result.blockName.idBlock.tagNumber = 4;
        this.variant = 2;
        this.value = asn1.result.blockName;
      } else {
        this.variant = 3;
        this.value = new OriginatorPublicKey({
          schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
            value: asn1.result.blockName.valueBlock.value
          })
        });
      }
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        return this.value.toSchema();
      case 2:
        this.value.idBlock.tagClass = 3;
        this.value.idBlock.tagNumber = 0;
        return this.value;
      case 3:
        {
          const _schema = this.value.toSchema();
          _schema.idBlock.tagClass = 3;
          _schema.idBlock.tagNumber = 1;
          return _schema;
        }
      default:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.variant === 1 || this.variant === 2 || this.variant === 3) {
      res.value = this.value.toJSON();
    }
    return res;
  }
}
OriginatorIdentifierOrKey.CLASS_NAME = "OriginatorIdentifierOrKey";
const KEY_ATTR_ID = "keyAttrId";
const KEY_ATTR = "keyAttr";
const CLEAR_PROPS$x = [KEY_ATTR_ID, KEY_ATTR];
class OtherKeyAttribute extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyAttrId = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));
    if (KEY_ATTR in parameters) {
      this.keyAttr = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_ATTR_ID:
        return EMPTY_STRING;
      case KEY_ATTR:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_ATTR_ID:
        return typeof memberValue === "string" && memberValue === EMPTY_STRING;
      case KEY_ATTR:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      optional: names.optional || true,
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.keyAttrId || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        optional: true,
        name: names.keyAttr || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$x);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OtherKeyAttribute.schema({
      names: {
        keyAttrId: KEY_ATTR_ID,
        keyAttr: KEY_ATTR
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();
    if (KEY_ATTR in asn1.result) {
      this.keyAttr = asn1.result.keyAttr;
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.keyAttrId
    }));
    if (KEY_ATTR in this) {
      outputArray.push(this.keyAttr);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyAttrId: this.keyAttrId
    };
    if (KEY_ATTR in this) {
      res.keyAttr = this.keyAttr.toJSON();
    }
    return res;
  }
}
OtherKeyAttribute.CLASS_NAME = "OtherKeyAttribute";
const SUBJECT_KEY_IDENTIFIER = "subjectKeyIdentifier";
const DATE$1 = "date";
const OTHER$1 = "other";
const CLEAR_PROPS$w = [SUBJECT_KEY_IDENTIFIER, DATE$1, OTHER$1];
class RecipientKeyIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.subjectKeyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
    if (DATE$1 in parameters) {
      this.date = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));
    }
    if (OTHER$1 in parameters) {
      this.other = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SUBJECT_KEY_IDENTIFIER:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case DATE$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime();
      case OTHER$1:
        return new OtherKeyAttribute();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SUBJECT_KEY_IDENTIFIER:
        return memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));
      case DATE$1:
        return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
      case OTHER$1:
        return memberValue.keyAttrId === EMPTY_STRING && "keyAttr" in memberValue === false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.subjectKeyIdentifier || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        optional: true,
        name: names.date || EMPTY_STRING
      }), OtherKeyAttribute.schema(names.other || {})]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$w);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RecipientKeyIdentifier.schema({
      names: {
        subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,
        date: DATE$1,
        other: {
          names: {
            blockName: OTHER$1
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;
    if (DATE$1 in asn1.result) this.date = asn1.result.date;
    if (OTHER$1 in asn1.result) this.other = new OtherKeyAttribute({
      schema: asn1.result.other
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.subjectKeyIdentifier);
    if (this.date) {
      outputArray.push(this.date);
    }
    if (this.other) {
      outputArray.push(this.other.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()
    };
    if (this.date) {
      res.date = this.date.toJSON();
    }
    if (this.other) {
      res.other = this.other.toJSON();
    }
    return res;
  }
}
RecipientKeyIdentifier.CLASS_NAME = "RecipientKeyIdentifier";
const VARIANT$1 = "variant";
const VALUE$1 = "value";
const CLEAR_PROPS$v = ["blockName"];
class KeyAgreeRecipientIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));
    this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT$1:
        return -1;
      case VALUE$1:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT$1:
        return memberValue === -1;
      case VALUE$1:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      value: [IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {
        names: {
          blockName: names.blockName || EMPTY_STRING
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: RecipientKeyIdentifier.schema(names.rKeyId || {
          names: {
            blockName: names.blockName || EMPTY_STRING
          }
        }).valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$v);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new IssuerAndSerialNumber({
        schema: asn1.result.blockName
      });
    } else {
      this.variant = 2;
      this.value = new RecipientKeyIdentifier({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.blockName.valueBlock.value
        })
      });
    }
  }
  toSchema() {
    switch (this.variant) {
      case 1:
        return this.value.toSchema();
      case 2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: this.value.toSchema().valueBlock.value
        });
      default:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.variant === 1 || this.variant === 2) {
      res.value = this.value.toJSON();
    }
    return res;
  }
}
KeyAgreeRecipientIdentifier.CLASS_NAME = "KeyAgreeRecipientIdentifier";
const RID = "rid";
const ENCRYPTED_KEY$2 = "encryptedKey";
const CLEAR_PROPS$u = [RID, ENCRYPTED_KEY$2];
class RecipientEncryptedKey extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.rid = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));
    this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RID:
        return new KeyAgreeRecipientIdentifier();
      case ENCRYPTED_KEY$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RID:
        return memberValue.variant === -1 && "value" in memberValue === false;
      case ENCRYPTED_KEY$2:
        return memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [KeyAgreeRecipientIdentifier.schema(names.rid || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.encryptedKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$u);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RecipientEncryptedKey.schema({
      names: {
        rid: {
          names: {
            blockName: RID
          }
        },
        encryptedKey: ENCRYPTED_KEY$2
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.rid = new KeyAgreeRecipientIdentifier({
      schema: asn1.result.rid
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.rid.toSchema(), this.encryptedKey]
    });
  }
  toJSON() {
    return {
      rid: this.rid.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
}
RecipientEncryptedKey.CLASS_NAME = "RecipientEncryptedKey";
const ENCRYPTED_KEYS = "encryptedKeys";
const RECIPIENT_ENCRYPTED_KEYS = "RecipientEncryptedKeys";
const CLEAR_PROPS$t = [RECIPIENT_ENCRYPTED_KEYS];
class RecipientEncryptedKeys extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.encryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ENCRYPTED_KEYS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ENCRYPTED_KEYS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.RecipientEncryptedKeys || EMPTY_STRING,
        value: RecipientEncryptedKey.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$t);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RecipientEncryptedKeys.schema({
      names: {
        RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.encryptedKeys, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())
    };
  }
}
RecipientEncryptedKeys.CLASS_NAME = "RecipientEncryptedKeys";
const VERSION$b = "version";
const ORIGINATOR = "originator";
const UKM = "ukm";
const KEY_ENCRYPTION_ALGORITHM$2 = "keyEncryptionAlgorithm";
const RECIPIENT_ENCRYPTED_KEY = "recipientEncryptedKeys";
const RECIPIENT_CERTIFICATE = "recipientCertificate";
const RECIPIENT_PUBLIC_KEY = "recipientPublicKey";
const CLEAR_PROPS$s = [VERSION$b, ORIGINATOR, UKM, KEY_ENCRYPTION_ALGORITHM$2, RECIPIENT_ENCRYPTED_KEY];
class KeyAgreeRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));
    this.originator = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));
    if (UKM in parameters) {
      this.ukm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));
    }
    this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));
    this.recipientEncryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));
    this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));
    this.recipientPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$b:
        return 0;
      case ORIGINATOR:
        return new OriginatorIdentifierOrKey();
      case UKM:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case KEY_ENCRYPTION_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case RECIPIENT_ENCRYPTED_KEY:
        return new RecipientEncryptedKeys();
      case RECIPIENT_CERTIFICATE:
        return new Certificate();
      case RECIPIENT_PUBLIC_KEY:
        return null;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$b:
        return memberValue === 0;
      case ORIGINATOR:
        return memberValue.variant === -1 && "value" in memberValue === false;
      case UKM:
        return memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM));
      case KEY_ENCRYPTION_ALGORITHM$2:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case RECIPIENT_ENCRYPTED_KEY:
        return memberValue.encryptedKeys.length === 0;
      case RECIPIENT_CERTIFICATE:
        return false;
      case RECIPIENT_PUBLIC_KEY:
        return false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [OriginatorIdentifierOrKey.schema(names.originator || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          name: names.ukm || EMPTY_STRING
        })]
      }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$s);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({
      names: {
        version: VERSION$b,
        originator: {
          names: {
            blockName: ORIGINATOR
          }
        },
        ukm: UKM,
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$2
          }
        },
        recipientEncryptedKeys: {
          names: {
            blockName: RECIPIENT_ENCRYPTED_KEY
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.originator = new OriginatorIdentifierOrKey({
      schema: asn1.result.originator
    });
    if (UKM in asn1.result) this.ukm = asn1.result.ukm;
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.recipientEncryptedKeys = new RecipientEncryptedKeys({
      schema: asn1.result.recipientEncryptedKeys
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [this.originator.toSchema()]
    }));
    if (this.ukm) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [this.ukm]
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.recipientEncryptedKeys.toSchema());
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      originator: this.originator.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON()
    };
    if (this.ukm) {
      res.ukm = this.ukm.toJSON();
    }
    return res;
  }
}
KeyAgreeRecipientInfo.CLASS_NAME = "KeyAgreeRecipientInfo";
const KEY_IDENTIFIER = "keyIdentifier";
const DATE = "date";
const OTHER = "other";
const CLEAR_PROPS$r = [KEY_IDENTIFIER, DATE, OTHER];
class KEKIdentifier extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));
    if (DATE in parameters) {
      this.date = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));
    }
    if (OTHER in parameters) {
      this.other = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_IDENTIFIER:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case DATE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime();
      case OTHER:
        return new OtherKeyAttribute();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_IDENTIFIER:
        return memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER));
      case DATE:
        return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;
      case OTHER:
        return memberValue.compareWithDefault("keyAttrId", memberValue.keyAttrId) && "keyAttr" in memberValue === false;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.keyIdentifier || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        optional: true,
        name: names.date || EMPTY_STRING
      }), OtherKeyAttribute.schema(names.other || {})]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$r);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, KEKIdentifier.schema({
      names: {
        keyIdentifier: KEY_IDENTIFIER,
        date: DATE,
        other: {
          names: {
            blockName: OTHER
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyIdentifier = asn1.result.keyIdentifier;
    if (DATE in asn1.result) this.date = asn1.result.date;
    if (OTHER in asn1.result) this.other = new OtherKeyAttribute({
      schema: asn1.result.other
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.keyIdentifier);
    if (this.date) {
      outputArray.push(this.date);
    }
    if (this.other) {
      outputArray.push(this.other.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyIdentifier: this.keyIdentifier.toJSON()
    };
    if (this.date) {
      res.date = this.date;
    }
    if (this.other) {
      res.other = this.other.toJSON();
    }
    return res;
  }
}
KEKIdentifier.CLASS_NAME = "KEKIdentifier";
const VERSION$a = "version";
const KEK_ID = "kekid";
const KEY_ENCRYPTION_ALGORITHM$1 = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY$1 = "encryptedKey";
const PER_DEFINED_KEK = "preDefinedKEK";
const CLEAR_PROPS$q = [VERSION$a, KEK_ID, KEY_ENCRYPTION_ALGORITHM$1, ENCRYPTED_KEY$1];
class KEKRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));
    this.kekid = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));
    this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));
    this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
    this.preDefinedKEK = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$a:
        return 0;
      case KEK_ID:
        return new KEKIdentifier();
      case KEY_ENCRYPTION_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case PER_DEFINED_KEK:
        return EMPTY_BUFFER;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case "KEKRecipientInfo":
        return memberValue === KEKRecipientInfo.defaultValues(VERSION$a);
      case KEK_ID:
        return memberValue.compareWithDefault("keyIdentifier", memberValue.keyIdentifier) && "date" in memberValue === false && "other" in memberValue === false;
      case KEY_ENCRYPTION_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case ENCRYPTED_KEY$1:
        return memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));
      case PER_DEFINED_KEK:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), KEKIdentifier.schema(names.kekid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.encryptedKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$q);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, KEKRecipientInfo.schema({
      names: {
        version: VERSION$a,
        kekid: {
          names: {
            blockName: KEK_ID
          }
        },
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM$1
          }
        },
        encryptedKey: ENCRYPTED_KEY$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.kekid = new KEKIdentifier({
      schema: asn1.result.kekid
    });
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.version
      }), this.kekid.toSchema(), this.keyEncryptionAlgorithm.toSchema(), this.encryptedKey]
    });
  }
  toJSON() {
    return {
      version: this.version,
      kekid: this.kekid.toJSON(),
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
  }
}
KEKRecipientInfo.CLASS_NAME = "KEKRecipientInfo";
const VERSION$9 = "version";
const KEY_DERIVATION_ALGORITHM = "keyDerivationAlgorithm";
const KEY_ENCRYPTION_ALGORITHM = "keyEncryptionAlgorithm";
const ENCRYPTED_KEY = "encryptedKey";
const PASSWORD = "password";
const CLEAR_PROPS$p = [VERSION$9, KEY_DERIVATION_ALGORITHM, KEY_ENCRYPTION_ALGORITHM, ENCRYPTED_KEY];
class PasswordRecipientinfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));
    if (KEY_DERIVATION_ALGORITHM in parameters) {
      this.keyDerivationAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));
    }
    this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));
    this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
    this.password = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$9:
        return -1;
      case KEY_DERIVATION_ALGORITHM:
        return new AlgorithmIdentifier();
      case KEY_ENCRYPTION_ALGORITHM:
        return new AlgorithmIdentifier();
      case ENCRYPTED_KEY:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case PASSWORD:
        return EMPTY_BUFFER;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$9:
        return memberValue === -1;
      case KEY_DERIVATION_ALGORITHM:
      case KEY_ENCRYPTION_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case ENCRYPTED_KEY:
        return memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));
      case PASSWORD:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.keyDerivationAlgorithm || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: AlgorithmIdentifier.schema().valueBlock.value
      }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.encryptedKey || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$p);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PasswordRecipientinfo.schema({
      names: {
        version: VERSION$9,
        keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,
        keyEncryptionAlgorithm: {
          names: {
            blockName: KEY_ENCRYPTION_ALGORITHM
          }
        },
        encryptedKey: ENCRYPTED_KEY
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (KEY_DERIVATION_ALGORITHM in asn1.result) {
      this.keyDerivationAlgorithm = new AlgorithmIdentifier({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.keyDerivationAlgorithm.valueBlock.value
        })
      });
    }
    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.keyEncryptionAlgorithm
    });
    this.encryptedKey = asn1.result.encryptedKey;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    if (this.keyDerivationAlgorithm) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.keyDerivationAlgorithm.toSchema().valueBlock.value
      }));
    }
    outputArray.push(this.keyEncryptionAlgorithm.toSchema());
    outputArray.push(this.encryptedKey);
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),
      encryptedKey: this.encryptedKey.toJSON()
    };
    if (this.keyDerivationAlgorithm) {
      res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();
    }
    return res;
  }
}
PasswordRecipientinfo.CLASS_NAME = "PasswordRecipientInfo";
const ORI_TYPE = "oriType";
const ORI_VALUE = "oriValue";
const CLEAR_PROPS$o = [ORI_TYPE, ORI_VALUE];
class OtherRecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.oriType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));
    this.oriValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case ORI_TYPE:
        return EMPTY_STRING;
      case ORI_VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case ORI_TYPE:
        return memberValue === EMPTY_STRING;
      case ORI_VALUE:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.oriType || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
        name: names.oriValue || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$o);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OtherRecipientInfo.schema({
      names: {
        oriType: ORI_TYPE,
        oriValue: ORI_VALUE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.oriType = asn1.result.oriType.valueBlock.toString();
    this.oriValue = asn1.result.oriValue;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.oriType
      }), this.oriValue]
    });
  }
  toJSON() {
    const res = {
      oriType: this.oriType
    };
    if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {
      res.oriValue = this.oriValue.toJSON();
    }
    return res;
  }
}
OtherRecipientInfo.CLASS_NAME = "OtherRecipientInfo";
const VARIANT = "variant";
const VALUE = "value";
const CLEAR_PROPS$n = ["blockName"];
class RecipientInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.variant = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));
    if (VALUE in parameters) {
      this.value = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VARIANT:
        return -1;
      case VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VARIANT:
        return memberValue === RecipientInfo.defaultValues(memberName);
      case VALUE:
        return Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
      value: [KeyTransRecipientInfo.schema({
        names: {
          blockName: names.blockName || EMPTY_STRING
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: KeyAgreeRecipientInfo.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: KEKRecipientInfo.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 3
        },
        value: PasswordRecipientinfo.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.blockName || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 4
        },
        value: OtherRecipientInfo.schema().valueBlock.value
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$n);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RecipientInfo.schema({
      names: {
        blockName: "blockName"
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (asn1.result.blockName.idBlock.tagClass === 1) {
      this.variant = 1;
      this.value = new KeyTransRecipientInfo({
        schema: asn1.result.blockName
      });
    } else {
      const blockSequence = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: asn1.result.blockName.valueBlock.value
      });
      switch (asn1.result.blockName.idBlock.tagNumber) {
        case 1:
          this.variant = 2;
          this.value = new KeyAgreeRecipientInfo({
            schema: blockSequence
          });
          break;
        case 2:
          this.variant = 3;
          this.value = new KEKRecipientInfo({
            schema: blockSequence
          });
          break;
        case 3:
          this.variant = 4;
          this.value = new PasswordRecipientinfo({
            schema: blockSequence
          });
          break;
        case 4:
          this.variant = 5;
          this.value = new OtherRecipientInfo({
            schema: blockSequence
          });
          break;
        default:
          throw new Error("Incorrect structure of RecipientInfo block");
      }
    }
  }
  toSchema() {
    ParameterError.assertEmpty(this.value, "value", "RecipientInfo");
    const _schema = this.value.toSchema();
    switch (this.variant) {
      case 1:
        return _schema;
      case 2:
      case 3:
      case 4:
        _schema.idBlock.tagClass = 3;
        _schema.idBlock.tagNumber = this.variant - 1;
        return _schema;
      default:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
    }
  }
  toJSON() {
    const res = {
      variant: this.variant
    };
    if (this.value && this.variant >= 1 && this.variant <= 4) {
      res.value = this.value.toJSON();
    }
    return res;
  }
}
RecipientInfo.CLASS_NAME = "RecipientInfo";
const HASH_ALGORITHM$2 = "hashAlgorithm";
const MASK_GEN_ALGORITHM = "maskGenAlgorithm";
const P_SOURCE_ALGORITHM = "pSourceAlgorithm";
const CLEAR_PROPS$m = [HASH_ALGORITHM$2, MASK_GEN_ALGORITHM, P_SOURCE_ALGORITHM];
class RSAESOAEPParams extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));
    this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));
    this.pSourceAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$2:
        return new AlgorithmIdentifier({
          algorithmId: "1.3.14.3.2.26",
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        });
      case MASK_GEN_ALGORITHM:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.8",
          algorithmParams: new AlgorithmIdentifier({
            algorithmId: "1.3.14.3.2.26",
            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
          }).toSchema()
        });
      case P_SOURCE_ALGORITHM:
        return new AlgorithmIdentifier({
          algorithmId: "1.2.840.113549.1.1.9",
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09]).buffer
          })
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        optional: true,
        value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        optional: true,
        value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        optional: true,
        value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$m);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, RSAESOAEPParams.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM$2
          }
        },
        maskGenAlgorithm: {
          names: {
            blockName: MASK_GEN_ALGORITHM
          }
        },
        pSourceAlgorithm: {
          names: {
            blockName: P_SOURCE_ALGORITHM
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    if (HASH_ALGORITHM$2 in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    if (MASK_GEN_ALGORITHM in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.maskGenAlgorithm
    });
    if (P_SOURCE_ALGORITHM in asn1.result) this.pSourceAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.pSourceAlgorithm
    });
  }
  toSchema() {
    const outputArray = [];
    if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.hashAlgorithm.toSchema()]
      }));
    }
    if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [this.maskGenAlgorithm.toSchema()]
      }));
    }
    if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [this.pSourceAlgorithm.toSchema()]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {};
    if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {
      res.hashAlgorithm = this.hashAlgorithm.toJSON();
    }
    if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {
      res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();
    }
    if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {
      res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();
    }
    return res;
  }
}
RSAESOAEPParams.CLASS_NAME = "RSAESOAEPParams";
const KEY_INFO = "keyInfo";
const ENTITY_U_INFO = "entityUInfo";
const SUPP_PUB_INFO = "suppPubInfo";
const CLEAR_PROPS$l = [KEY_INFO, ENTITY_U_INFO, SUPP_PUB_INFO];
class ECCCMSSharedInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.keyInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));
    if (ENTITY_U_INFO in parameters) {
      this.entityUInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));
    }
    this.suppPubInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case KEY_INFO:
        return new AlgorithmIdentifier();
      case ENTITY_U_INFO:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case SUPP_PUB_INFO:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case KEY_INFO:
      case ENTITY_U_INFO:
      case SUPP_PUB_INFO:
        return memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.keyInfo || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.entityUInfo || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString()]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.suppPubInfo || EMPTY_STRING,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString()]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$l);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ECCCMSSharedInfo.schema({
      names: {
        keyInfo: {
          names: {
            blockName: KEY_INFO
          }
        },
        entityUInfo: ENTITY_U_INFO,
        suppPubInfo: SUPP_PUB_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.keyInfo = new AlgorithmIdentifier({
      schema: asn1.result.keyInfo
    });
    if (ENTITY_U_INFO in asn1.result) this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];
    this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.keyInfo.toSchema());
    if (this.entityUInfo) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.entityUInfo]
      }));
    }
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      idBlock: {
        tagClass: 3,
        tagNumber: 2
      },
      value: [this.suppPubInfo]
    }));
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      keyInfo: this.keyInfo.toJSON(),
      suppPubInfo: this.suppPubInfo.toJSON()
    };
    if (this.entityUInfo) {
      res.entityUInfo = this.entityUInfo.toJSON();
    }
    return res;
  }
}
ECCCMSSharedInfo.CLASS_NAME = "ECCCMSSharedInfo";
const VERSION$8 = "version";
const ORIGINATOR_INFO = "originatorInfo";
const RECIPIENT_INFOS = "recipientInfos";
const ENCRYPTED_CONTENT_INFO = "encryptedContentInfo";
const UNPROTECTED_ATTRS = "unprotectedAttrs";
const CLEAR_PROPS$k = [VERSION$8, ORIGINATOR_INFO, RECIPIENT_INFOS, ENCRYPTED_CONTENT_INFO, UNPROTECTED_ATTRS];
const defaultEncryptionParams = {
  kdfAlgorithm: "SHA-512",
  kekEncryptionLength: 256
};
const curveLengthByName = {
  "P-256": 256,
  "P-384": 384,
  "P-521": 528
};
class EnvelopedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));
    if (ORIGINATOR_INFO in parameters) {
      this.originatorInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));
    }
    this.recipientInfos = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));
    this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));
    if (UNPROTECTED_ATTRS in parameters) {
      this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));
    }
    this.policy = {
      disableSplit: !!parameters.disableSplit
    };
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$8:
        return 0;
      case ORIGINATOR_INFO:
        return new OriginatorInfo();
      case RECIPIENT_INFOS:
        return [];
      case ENCRYPTED_CONTENT_INFO:
        return new EncryptedContentInfo();
      case UNPROTECTED_ATTRS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$8:
        return memberValue === EnvelopedData.defaultValues(memberName);
      case ORIGINATOR_INFO:
        return memberValue.certs.certificates.length === 0 && memberValue.crls.crls.length === 0;
      case RECIPIENT_INFOS:
      case UNPROTECTED_ATTRS:
        return memberValue.length === 0;
      case ENCRYPTED_CONTENT_INFO:
        return EncryptedContentInfo.compareWithDefault("contentType", memberValue.contentType) && EncryptedContentInfo.compareWithDefault("contentEncryptionAlgorithm", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault("encryptedContent", memberValue.encryptedContent);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.originatorInfo || EMPTY_STRING,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: OriginatorInfo.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.recipientInfos || EMPTY_STRING,
          value: RecipientInfo.schema()
        })]
      }), EncryptedContentInfo.schema(names.encryptedContentInfo || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.unprotectedAttrs || EMPTY_STRING,
          value: Attribute.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$k);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, EnvelopedData.schema({
      names: {
        version: VERSION$8,
        originatorInfo: ORIGINATOR_INFO,
        recipientInfos: RECIPIENT_INFOS,
        encryptedContentInfo: {
          names: {
            blockName: ENCRYPTED_CONTENT_INFO
          }
        },
        unprotectedAttrs: UNPROTECTED_ATTRS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    if (ORIGINATOR_INFO in asn1.result) {
      this.originatorInfo = new OriginatorInfo({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: asn1.result.originatorInfo.valueBlock.value
        })
      });
    }
    this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({
      schema: o
    }));
    this.encryptedContentInfo = new EncryptedContentInfo({
      schema: asn1.result.encryptedContentInfo
    });
    if (UNPROTECTED_ATTRS in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({
      schema: o
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    if (this.originatorInfo) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: this.originatorInfo.toSchema().valueBlock.value
      }));
    }
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      value: Array.from(this.recipientInfos, o => o.toSchema())
    }));
    outputArray.push(this.encryptedContentInfo.toSchema());
    if (this.unprotectedAttrs) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.unprotectedAttrs, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),
      encryptedContentInfo: this.encryptedContentInfo.toJSON()
    };
    if (this.originatorInfo) res.originatorInfo = this.originatorInfo.toJSON();
    if (this.unprotectedAttrs) res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());
    return res;
  }
  addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {
    const encryptionParameters = Object.assign({
      useOAEP: true,
      oaepHashAlgorithm: "SHA-512"
    }, defaultEncryptionParams, parameters || {});
    if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.113549") !== -1) variant = 1;else {
      if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf("1.2.840.10045") !== -1) variant = 2;else throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);
    }
    switch (variant) {
      case 1:
        {
          let algorithmId;
          let algorithmParams;
          if (encryptionParameters.useOAEP === true) {
            algorithmId = crypto.getOIDByAlgorithm({
              name: "RSA-OAEP"
            }, true, "keyEncryptionAlgorithm");
            const hashOID = crypto.getOIDByAlgorithm({
              name: encryptionParameters.oaepHashAlgorithm
            }, true, "RSAES-OAEP-params");
            const hashAlgorithm = new AlgorithmIdentifier({
              algorithmId: hashOID,
              algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
            });
            const rsaOAEPParams = new RSAESOAEPParams({
              hashAlgorithm,
              maskGenAlgorithm: new AlgorithmIdentifier({
                algorithmId: "1.2.840.113549.1.1.8",
                algorithmParams: hashAlgorithm.toSchema()
              })
            });
            algorithmParams = rsaOAEPParams.toSchema();
          } else {
            algorithmId = crypto.getOIDByAlgorithm({
              name: "RSAES-PKCS1-v1_5"
            });
            if (algorithmId === EMPTY_STRING) throw new Error("Can not find OID for RSAES-PKCS1-v1_5");
            algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null();
          }
          const keyInfo = new KeyTransRecipientInfo({
            version: 0,
            rid: new IssuerAndSerialNumber({
              issuer: certificate.issuer,
              serialNumber: certificate.serialNumber
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId,
              algorithmParams
            }),
            recipientCertificate: certificate
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 1,
            value: keyInfo
          }));
        }
        break;
      case 2:
        {
          const recipientIdentifier = new KeyAgreeRecipientIdentifier({
            variant: 1,
            value: new IssuerAndSerialNumber({
              issuer: certificate.issuer,
              serialNumber: certificate.serialNumber
            })
          });
          this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
            recipientCertificate: certificate
          }, crypto);
        }
        break;
      default:
        throw new Error(`Unknown "variant" value: ${variant}`);
    }
    return true;
  }
  addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {
    ArgumentError.assert(preDefinedData, "preDefinedData", "ArrayBuffer");
    if (!preDefinedData.byteLength) {
      throw new Error("Pre-defined data could have zero length");
    }
    if (!parameters.keyIdentifier) {
      const keyIdentifierBuffer = new ArrayBuffer(16);
      const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);
      crypto.getRandomValues(keyIdentifierView);
      parameters.keyIdentifier = keyIdentifierBuffer;
    }
    if (!parameters.hmacHashAlgorithm) parameters.hmacHashAlgorithm = "SHA-512";
    if (parameters.iterationCount === undefined) {
      parameters.iterationCount = 2048;
    }
    if (!parameters.keyEncryptionAlgorithm) {
      parameters.keyEncryptionAlgorithm = {
        name: "AES-KW",
        length: 256
      };
    }
    if (!parameters.keyEncryptionAlgorithmParams) parameters.keyEncryptionAlgorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null();
    switch (variant) {
      case 1:
        {
          const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
          const keyInfo = new KEKRecipientInfo({
            version: 4,
            kekid: new KEKIdentifier({
              keyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                valueHex: parameters.keyIdentifier
              })
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId: kekOID,
              algorithmParams: parameters.keyEncryptionAlgorithmParams
            }),
            preDefinedKEK: preDefinedData
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 3,
            value: keyInfo
          }));
        }
        break;
      case 2:
        {
          const pbkdf2OID = crypto.getOIDByAlgorithm({
            name: "PBKDF2"
          }, true, "keyDerivationAlgorithm");
          const saltBuffer = new ArrayBuffer(64);
          const saltView = new Uint8Array(saltBuffer);
          crypto.getRandomValues(saltView);
          const hmacOID = crypto.getOIDByAlgorithm({
            name: "HMAC",
            hash: {
              name: parameters.hmacHashAlgorithm
            }
          }, true, "hmacHashAlgorithm");
          const pbkdf2Params = new PBKDF2Params({
            salt: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
              valueHex: saltBuffer
            }),
            iterationCount: parameters.iterationCount,
            prf: new AlgorithmIdentifier({
              algorithmId: hmacOID,
              algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
            })
          });
          const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, "keyEncryptionAlgorithm");
          const keyInfo = new PasswordRecipientinfo({
            version: 0,
            keyDerivationAlgorithm: new AlgorithmIdentifier({
              algorithmId: pbkdf2OID,
              algorithmParams: pbkdf2Params.toSchema()
            }),
            keyEncryptionAlgorithm: new AlgorithmIdentifier({
              algorithmId: kekOID,
              algorithmParams: parameters.keyEncryptionAlgorithmParams
            }),
            password: preDefinedData
          });
          this.recipientInfos.push(new RecipientInfo({
            variant: 4,
            value: keyInfo
          }));
        }
        break;
      default:
        throw new Error(`Unknown value for "variant": ${variant}`);
    }
  }
  addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {
    const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});
    const recipientIdentifier = new KeyAgreeRecipientIdentifier({
      variant: 2,
      value: new RecipientKeyIdentifier({
        subjectKeyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: keyId
        })
      })
    });
    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, {
      recipientPublicKey: key
    }, crypto);
  }
  _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {
    const encryptedKey = new RecipientEncryptedKey({
      rid: recipientIdentifier
    });
    const aesKWoid = crypto.getOIDByAlgorithm({
      name: "AES-KW",
      length: encryptionParameters.kekEncryptionLength
    }, true, "keyEncryptionAlgorithm");
    const aesKW = new AlgorithmIdentifier({
      algorithmId: aesKWoid
    });
    const ecdhOID = crypto.getOIDByAlgorithm({
      name: "ECDH",
      kdf: encryptionParameters.kdfAlgorithm
    }, true, "KeyAgreeRecipientInfo");
    const ukmBuffer = new ArrayBuffer(64);
    const ukmView = new Uint8Array(ukmBuffer);
    crypto.getRandomValues(ukmView);
    const recipientInfoParams = {
      version: 3,
      ukm: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: ukmBuffer
      }),
      keyEncryptionAlgorithm: new AlgorithmIdentifier({
        algorithmId: ecdhOID,
        algorithmParams: aesKW.toSchema()
      }),
      recipientEncryptedKeys: new RecipientEncryptedKeys({
        encryptedKeys: [encryptedKey]
      })
    };
    const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));
    this.recipientInfos.push(new RecipientInfo({
      variant: 2,
      value: keyInfo
    }));
  }
  encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {
    var _this33 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const ivBuffer = new ArrayBuffer(16);
      const ivView = new Uint8Array(ivBuffer);
      crypto.getRandomValues(ivView);
      const contentView = new Uint8Array(contentToEncrypt);
      const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, "contentEncryptionAlgorithm");
      const sessionKey = yield crypto.generateKey(contentEncryptionAlgorithm, true, ["encrypt"]);
      const encryptedContent = yield crypto.encrypt({
        name: contentEncryptionAlgorithm.name,
        iv: ivView
      }, sessionKey, contentView);
      const exportedSessionKey = yield crypto.exportKey("raw", sessionKey);
      _this33.version = 2;
      _this33.encryptedContentInfo = new EncryptedContentInfo({
        disableSplit: _this33.policy.disableSplit,
        contentType: "1.2.840.113549.1.7.1",
        contentEncryptionAlgorithm: new AlgorithmIdentifier({
          algorithmId: contentEncryptionOID,
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: ivBuffer
          })
        }),
        encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: encryptedContent
        })
      });
      const SubKeyAgreeRecipientInfo = /*#__PURE__*/function () {
        var _ref = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this33.recipientInfos[index].value;
          let recipientCurve;
          let recipientPublicKey;
          if (recipientInfo.recipientPublicKey) {
            recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;
            recipientPublicKey = recipientInfo.recipientPublicKey;
          } else if (recipientInfo.recipientCertificate) {
            const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
            if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier.blockName()) throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
            const curveOID = curveObject.valueBlock.toString();
            switch (curveOID) {
              case "1.2.840.10045.3.1.7":
                recipientCurve = "P-256";
                break;
              case "1.3.132.0.34":
                recipientCurve = "P-384";
                break;
              case "1.3.132.0.35":
                recipientCurve = "P-521";
                break;
              default:
                throw new Error(`Incorrect curve OID for index ${index}`);
            }
            recipientPublicKey = yield recipientInfo.recipientCertificate.getPublicKey({
              algorithm: {
                algorithm: {
                  name: "ECDH",
                  namedCurve: recipientCurve
                },
                usages: []
              }
            }, crypto);
          } else {
            throw new Error("Unsupported RecipientInfo");
          }
          const recipientCurveLength = curveLengthByName[recipientCurve];
          const ecdhKeys = yield crypto.generateKey({
            name: "ECDH",
            namedCurve: recipientCurve
          }, true, ["deriveBits"]);
          const exportedECDHPublicKey = yield crypto.exportKey("spki", ecdhKeys.publicKey);
          const derivedBits = yield crypto.deriveBits({
            name: "ECDH",
            public: recipientPublicKey
          }, ecdhKeys.privateKey, recipientCurveLength);
          const aesKWAlgorithm = new AlgorithmIdentifier({
            schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
          });
          const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "aesKWAlgorithm");
          let kwLength = kwAlgorithm.length;
          const kwLengthBuffer = new ArrayBuffer(4);
          const kwLengthView = new Uint8Array(kwLengthBuffer);
          for (let j = 3; j >= 0; j--) {
            kwLengthView[j] = kwLength;
            kwLength >>= 8;
          }
          const eccInfo = new ECCCMSSharedInfo({
            keyInfo: new AlgorithmIdentifier({
              algorithmId: aesKWAlgorithm.algorithmId
            }),
            entityUInfo: recipientInfo.ukm,
            suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
              valueHex: kwLengthBuffer
            })
          });
          const encodedInfo = eccInfo.toSchema().toBER(false);
          const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
          const derivedKeyRaw = yield kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);
          const awsKW = yield crypto.importKey("raw", derivedKeyRaw, {
            name: "AES-KW"
          }, true, ["wrapKey"]);
          const wrappedKey = yield crypto.wrapKey("raw", sessionKey, awsKW, {
            name: "AES-KW"
          });
          const originator = new OriginatorIdentifierOrKey();
          originator.variant = 3;
          originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);
          recipientInfo.originator = originator;
          recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: wrappedKey
          });
          return {
            ecdhPrivateKey: ecdhKeys.privateKey
          };
        });
        return function SubKeyAgreeRecipientInfo(_x18) {
          return _ref.apply(this, arguments);
        };
      }();
      const SubKeyTransRecipientInfo = /*#__PURE__*/function () {
        var _ref2 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this33.recipientInfos[index].value;
          const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
          if (algorithmParameters.name === "RSA-OAEP") {
            const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
            const rsaOAEPParams = new RSAESOAEPParams({
              schema
            });
            algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
            if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
          }
          try {
            const publicKey = yield recipientInfo.recipientCertificate.getPublicKey({
              algorithm: {
                algorithm: algorithmParameters,
                usages: ["encrypt", "wrapKey"]
              }
            }, crypto);
            const encryptedKey = yield crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);
            recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
              valueHex: encryptedKey
            });
          } catch {}
        });
        return function SubKeyTransRecipientInfo(_x19) {
          return _ref2.apply(this, arguments);
        };
      }();
      const SubKEKRecipientInfo = /*#__PURE__*/function () {
        var _ref3 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this33.recipientInfos[index].value;
          const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
          const kekKey = yield crypto.importKey("raw", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, ["wrapKey"]);
          const wrappedKey = yield crypto.wrapKey("raw", sessionKey, kekKey, kekAlgorithm);
          recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: wrappedKey
          });
        });
        return function SubKEKRecipientInfo(_x20) {
          return _ref3.apply(this, arguments);
        };
      }();
      const SubPasswordRecipientinfo = /*#__PURE__*/function () {
        var _ref4 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this33.recipientInfos[index].value;
          let pbkdf2Params;
          if (!recipientInfo.keyDerivationAlgorithm) throw new Error("Please append encoded \"keyDerivationAlgorithm\"");
          if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
          try {
            pbkdf2Params = new PBKDF2Params({
              schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
            });
          } catch (ex) {
            throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
          }
          const passwordView = new Uint8Array(recipientInfo.password);
          const derivationKey = yield crypto.importKey("raw", passwordView, "PBKDF2", false, ["deriveKey"]);
          const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
          let hmacHashAlgorithm = "SHA-1";
          if (pbkdf2Params.prf) {
            const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm");
            hmacHashAlgorithm = prfAlgorithm.hash.name;
          }
          const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
          const iterations = pbkdf2Params.iterationCount;
          const derivedKey = yield crypto.deriveKey({
            name: "PBKDF2",
            hash: {
              name: hmacHashAlgorithm
            },
            salt: saltView,
            iterations
          }, derivationKey, kekAlgorithm, true, ["wrapKey"]);
          const wrappedKey = yield crypto.wrapKey("raw", sessionKey, derivedKey, kekAlgorithm);
          recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            valueHex: wrappedKey
          });
        });
        return function SubPasswordRecipientinfo(_x21) {
          return _ref4.apply(this, arguments);
        };
      }();
      const res = [];
      for (let i = 0; i < _this33.recipientInfos.length; i++) {
        switch (_this33.recipientInfos[i].variant) {
          case 1:
            res.push(yield SubKeyTransRecipientInfo(i));
            break;
          case 2:
            res.push(yield SubKeyAgreeRecipientInfo(i));
            break;
          case 3:
            res.push(yield SubKEKRecipientInfo(i));
            break;
          case 4:
            res.push(yield SubPasswordRecipientinfo(i));
            break;
          default:
            throw new Error(`Unknown recipient type in array with index ${i}`);
        }
      }
      return res;
    })();
  }
  decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {
    var _this34 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const decryptionParameters = parameters || {};
      if (recipientIndex + 1 > _this34.recipientInfos.length) {
        throw new Error(`Maximum value for "index" is: ${_this34.recipientInfos.length - 1}`);
      }
      const SubKeyAgreeRecipientInfo = /*#__PURE__*/function () {
        var _ref5 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this34.recipientInfos[index].value;
          let curveOID;
          let recipientCurve;
          let recipientCurveLength;
          const originator = recipientInfo.originator;
          if (decryptionParameters.recipientCertificate) {
            const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;
            if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier.blockName()) {
              throw new Error(`Incorrect "recipientCertificate" for index ${index}`);
            }
            curveOID = curveObject.valueBlock.toString();
          } else if (originator.value.algorithm.algorithmParams) {
            const curveObject = originator.value.algorithm.algorithmParams;
            if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier.blockName()) {
              throw new Error(`Incorrect originator for index ${index}`);
            }
            curveOID = curveObject.valueBlock.toString();
          } else {
            throw new Error("Parameter \"recipientCertificate\" is mandatory for \"KeyAgreeRecipientInfo\" if algorithm params are missing from originator");
          }
          if (!decryptionParameters.recipientPrivateKey) throw new Error("Parameter \"recipientPrivateKey\" is mandatory for \"KeyAgreeRecipientInfo\"");
          switch (curveOID) {
            case "1.2.840.10045.3.1.7":
              recipientCurve = "P-256";
              recipientCurveLength = 256;
              break;
            case "1.3.132.0.34":
              recipientCurve = "P-384";
              recipientCurveLength = 384;
              break;
            case "1.3.132.0.35":
              recipientCurve = "P-521";
              recipientCurveLength = 528;
              break;
            default:
              throw new Error(`Incorrect curve OID for index ${index}`);
          }
          let ecdhPrivateKey;
          let keyCrypto = crypto;
          if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {
            ecdhPrivateKey = yield crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, {
              name: "ECDH",
              namedCurve: recipientCurve
            }, true, ["deriveBits"]);
          } else {
            ecdhPrivateKey = decryptionParameters.recipientPrivateKey;
            if ("crypto" in decryptionParameters && decryptionParameters.crypto) {
              keyCrypto = decryptionParameters.crypto.subtle;
            }
          }
          if ("algorithmParams" in originator.value.algorithm === false) originator.value.algorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
            value: curveOID
          });
          const buffer = originator.value.toSchema().toBER(false);
          const ecdhPublicKey = yield crypto.importKey("spki", buffer, {
            name: "ECDH",
            namedCurve: recipientCurve
          }, true, []);
          const sharedSecret = yield keyCrypto.deriveBits({
            name: "ECDH",
            public: ecdhPublicKey
          }, ecdhPrivateKey, recipientCurveLength);
          function applyKDF(_x23) {
            return _applyKDF.apply(this, arguments);
          }
          function _applyKDF() {
            _applyKDF = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (includeAlgorithmParams) {
              includeAlgorithmParams = includeAlgorithmParams || false;
              const aesKWAlgorithm = new AlgorithmIdentifier({
                schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams
              });
              const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, "kwAlgorithm");
              let kwLength = kwAlgorithm.length;
              const kwLengthBuffer = new ArrayBuffer(4);
              const kwLengthView = new Uint8Array(kwLengthBuffer);
              for (let j = 3; j >= 0; j--) {
                kwLengthView[j] = kwLength;
                kwLength >>= 8;
              }
              const keyInfoAlgorithm = {
                algorithmId: aesKWAlgorithm.algorithmId
              };
              if (includeAlgorithmParams) {
                keyInfoAlgorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null();
              }
              const eccInfo = new ECCCMSSharedInfo({
                keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),
                entityUInfo: recipientInfo.ukm,
                suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                  valueHex: kwLengthBuffer
                })
              });
              const encodedInfo = eccInfo.toSchema().toBER(false);
              const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "ecdhAlgorithm");
              if (!ecdhAlgorithm.name) {
                throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);
              }
              return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);
            });
            return _applyKDF.apply(this, arguments);
          }
          const kdfResult = yield applyKDF();
          const importAesKwKey = /*#__PURE__*/function () {
            var _ref6 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (kdfResult) {
              return crypto.importKey("raw", kdfResult, {
                name: "AES-KW"
              }, true, ["unwrapKey"]);
            });
            return function importAesKwKey(_x24) {
              return _ref6.apply(this, arguments);
            };
          }();
          const aesKwKey = yield importAesKwKey(kdfResult);
          const unwrapSessionKey = /*#__PURE__*/function () {
            var _ref7 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (aesKwKey) {
              const algorithmId = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
              const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
              return crypto.unwrapKey("raw", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, {
                name: "AES-KW"
              }, contentEncryptionAlgorithm, true, ["decrypt"]);
            });
            return function unwrapSessionKey(_x25) {
              return _ref7.apply(this, arguments);
            };
          }();
          try {
            return yield unwrapSessionKey(aesKwKey);
          } catch {
            const kdfResult = yield applyKDF(true);
            const aesKwKey = yield importAesKwKey(kdfResult);
            return unwrapSessionKey(aesKwKey);
          }
        });
        return function SubKeyAgreeRecipientInfo(_x22) {
          return _ref5.apply(this, arguments);
        };
      }();
      const SubKeyTransRecipientInfo = /*#__PURE__*/function () {
        var _ref8 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this34.recipientInfos[index].value;
          if (!decryptionParameters.recipientPrivateKey) {
            throw new Error("Parameter \"recipientPrivateKey\" is mandatory for \"KeyTransRecipientInfo\"");
          }
          const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
          if (algorithmParameters.name === "RSA-OAEP") {
            const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;
            const rsaOAEPParams = new RSAESOAEPParams({
              schema
            });
            algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);
            if ("name" in algorithmParameters.hash === false) throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);
          }
          let privateKey;
          let keyCrypto = crypto;
          if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {
            privateKey = yield crypto.importKey("pkcs8", decryptionParameters.recipientPrivateKey, algorithmParameters, true, ["decrypt"]);
          } else {
            privateKey = decryptionParameters.recipientPrivateKey;
            if ("crypto" in decryptionParameters && decryptionParameters.crypto) {
              keyCrypto = decryptionParameters.crypto.subtle;
            }
          }
          const sessionKey = yield keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);
          const algorithmId = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
          const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
          if ("name" in contentEncryptionAlgorithm === false) throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId}`);
          return crypto.importKey("raw", sessionKey, contentEncryptionAlgorithm, true, ["decrypt"]);
        });
        return function SubKeyTransRecipientInfo(_x26) {
          return _ref8.apply(this, arguments);
        };
      }();
      const SubKEKRecipientInfo = /*#__PURE__*/function () {
        var _ref9 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this34.recipientInfos[index].value;
          if (!decryptionParameters.preDefinedData) throw new Error("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
          const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "kekAlgorithm");
          const importedKey = yield crypto.importKey("raw", decryptionParameters.preDefinedData, kekAlgorithm, true, ["unwrapKey"]);
          const algorithmId = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
          const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
          if (!contentEncryptionAlgorithm.name) {
            throw new Error(`Incorrect "contentEncryptionAlgorithm": ${algorithmId}`);
          }
          return crypto.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, ["decrypt"]);
        });
        return function SubKEKRecipientInfo(_x27) {
          return _ref9.apply(this, arguments);
        };
      }();
      const SubPasswordRecipientinfo = /*#__PURE__*/function () {
        var _ref10 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (index) {
          const recipientInfo = _this34.recipientInfos[index].value;
          let pbkdf2Params;
          if (!decryptionParameters.preDefinedData) {
            throw new Error("Parameter \"preDefinedData\" is mandatory for \"KEKRecipientInfo\"");
          }
          if (!recipientInfo.keyDerivationAlgorithm) {
            throw new Error("Please append encoded \"keyDerivationAlgorithm\"");
          }
          if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {
            throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
          }
          try {
            pbkdf2Params = new PBKDF2Params({
              schema: recipientInfo.keyDerivationAlgorithm.algorithmParams
            });
          } catch (ex) {
            throw new Error("Incorrectly encoded \"keyDerivationAlgorithm\"");
          }
          const pbkdf2Key = yield crypto.importKey("raw", decryptionParameters.preDefinedData, "PBKDF2", false, ["deriveKey"]);
          const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, "keyEncryptionAlgorithm");
          const hmacHashAlgorithm = pbkdf2Params.prf ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, "prfAlgorithm").hash.name : "SHA-1";
          const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);
          const iterations = pbkdf2Params.iterationCount;
          const kekKey = yield crypto.deriveKey({
            name: "PBKDF2",
            hash: {
              name: hmacHashAlgorithm
            },
            salt: saltView,
            iterations
          }, pbkdf2Key, kekAlgorithm, true, ["unwrapKey"]);
          const algorithmId = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
          const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
          return crypto.unwrapKey("raw", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, ["decrypt"]);
        });
        return function SubPasswordRecipientinfo(_x28) {
          return _ref10.apply(this, arguments);
        };
      }();
      let unwrappedKey;
      switch (_this34.recipientInfos[recipientIndex].variant) {
        case 1:
          unwrappedKey = yield SubKeyTransRecipientInfo(recipientIndex);
          break;
        case 2:
          unwrappedKey = yield SubKeyAgreeRecipientInfo(recipientIndex);
          break;
        case 3:
          unwrappedKey = yield SubKEKRecipientInfo(recipientIndex);
          break;
        case 4:
          unwrappedKey = yield SubPasswordRecipientinfo(recipientIndex);
          break;
        default:
          throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);
      }
      const algorithmId = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;
      const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, "contentEncryptionAlgorithm");
      const ivBuffer = _this34.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;
      const ivView = new Uint8Array(ivBuffer);
      if (!_this34.encryptedContentInfo.encryptedContent) {
        throw new Error("Required property `encryptedContent` is empty");
      }
      const dataBuffer = _this34.encryptedContentInfo.getEncryptedContent();
      return crypto.decrypt({
        name: contentEncryptionAlgorithm.name,
        iv: ivView
      }, unwrappedKey, dataBuffer);
    })();
  }
}
EnvelopedData.CLASS_NAME = "EnvelopedData";
const SAFE_CONTENTS = "safeContents";
const PARSED_VALUE$1 = "parsedValue";
const CONTENT_INFOS = "contentInfos";
class AuthenticatedSafe extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.safeContents = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));
    if (PARSED_VALUE$1 in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SAFE_CONTENTS:
        return [];
      case PARSED_VALUE$1:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SAFE_CONTENTS:
        return memberValue.length === 0;
      case PARSED_VALUE$1:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.contentInfos || EMPTY_STRING,
        value: ContentInfo.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [CONTENT_INFOS]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, AuthenticatedSafe.schema({
      names: {
        contentInfos: CONTENT_INFOS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({
      schema: element
    }));
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: Array.from(this.safeContents, o => o.toSchema())
    });
  }
  toJSON() {
    return {
      safeContents: Array.from(this.safeContents, o => o.toJSON())
    };
  }
  parseInternalValues(parameters, crypto = getCrypto(true)) {
    var _this35 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assert(parameters, SAFE_CONTENTS);
      ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, "Array");
      if (parameters.safeContents.length !== _this35.safeContents.length) {
        throw new ArgumentError("Length of \"parameters.safeContents\" must be equal to \"this.safeContents.length\"");
      }
      _this35.parsedValue = {
        safeContents: []
      };
      for (const [index, content] of _this35.safeContents.entries()) {
        const safeContent = parameters.safeContents[index];
        const errorTarget = `parameters.safeContents[${index}]`;
        switch (content.contentType) {
          case id_ContentType_Data:
            {
              ArgumentError.assert(content.content, "this.safeContents[j].content", asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString);
              const authSafeContent = content.content.getValue();
              _this35.parsedValue.safeContents.push({
                privacyMode: 0,
                value: SafeContents.fromBER(authSafeContent)
              });
            }
            break;
          case id_ContentType_EnvelopedData:
            {
              const cmsEnveloped = new EnvelopedData({
                schema: content.content
              });
              ParameterError.assert(errorTarget, safeContent, "recipientCertificate", "recipientKey");
              const envelopedData = safeContent;
              const recipientCertificate = envelopedData.recipientCertificate;
              const recipientKey = envelopedData.recipientKey;
              const decrypted = yield cmsEnveloped.decrypt(0, {
                recipientCertificate,
                recipientPrivateKey: recipientKey
              }, crypto);
              _this35.parsedValue.safeContents.push({
                privacyMode: 2,
                value: SafeContents.fromBER(decrypted)
              });
            }
            break;
          case id_ContentType_EncryptedData:
            {
              const cmsEncrypted = new EncryptedData({
                schema: content.content
              });
              ParameterError.assert(errorTarget, safeContent, "password");
              const password = safeContent.password;
              const decrypted = yield cmsEncrypted.decrypt({
                password
              }, crypto);
              _this35.parsedValue.safeContents.push({
                privacyMode: 1,
                value: SafeContents.fromBER(decrypted)
              });
            }
            break;
          default:
            throw new Error(`Unknown "contentType" for AuthenticatedSafe: " ${content.contentType}`);
        }
      }
    })();
  }
  makeInternalValues(parameters, crypto = getCrypto(true)) {
    var _this36 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this36.parsedValue) {
        throw new Error("Please run \"parseValues\" first or add \"parsedValue\" manually");
      }
      ArgumentError.assert(_this36.parsedValue, "this.parsedValue", "object");
      ArgumentError.assert(_this36.parsedValue.safeContents, "this.parsedValue.safeContents", "Array");
      ArgumentError.assert(parameters, "parameters", "object");
      ParameterError.assert(parameters, "safeContents");
      ArgumentError.assert(parameters.safeContents, "parameters.safeContents", "Array");
      if (parameters.safeContents.length !== _this36.parsedValue.safeContents.length) {
        throw new ArgumentError("Length of \"parameters.safeContents\" must be equal to \"this.parsedValue.safeContents\"");
      }
      _this36.safeContents = [];
      for (const [index, content] of _this36.parsedValue.safeContents.entries()) {
        ParameterError.assert("content", content, "privacyMode", "value");
        ArgumentError.assert(content.value, "content.value", SafeContents);
        switch (content.privacyMode) {
          case 0:
            {
              const contentBuffer = content.value.toSchema().toBER(false);
              _this36.safeContents.push(new ContentInfo({
                contentType: "1.2.840.113549.1.7.1",
                content: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                  valueHex: contentBuffer
                })
              }));
            }
            break;
          case 1:
            {
              const cmsEncrypted = new EncryptedData();
              const currentParameters = parameters.safeContents[index];
              currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);
              yield cmsEncrypted.encrypt(currentParameters, crypto);
              _this36.safeContents.push(new ContentInfo({
                contentType: "1.2.840.113549.1.7.6",
                content: cmsEncrypted.toSchema()
              }));
            }
            break;
          case 2:
            {
              const cmsEnveloped = new EnvelopedData();
              const contentToEncrypt = content.value.toSchema().toBER(false);
              const safeContent = parameters.safeContents[index];
              ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, "encryptingCertificate", "encryptionAlgorithm");
              switch (true) {
                case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-cbc":
                case safeContent.encryptionAlgorithm.name.toLowerCase() === "aes-gcm":
                  break;
                default:
                  throw new Error(`Incorrect parameter "encryptionAlgorithm" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm}`);
              }
              switch (true) {
                case safeContent.encryptionAlgorithm.length === 128:
                case safeContent.encryptionAlgorithm.length === 192:
                case safeContent.encryptionAlgorithm.length === 256:
                  break;
                default:
                  throw new Error(`Incorrect parameter "encryptionAlgorithm.length" in "parameters.safeContents[i]": ${safeContent.encryptionAlgorithm.length}`);
              }
              const encryptionAlgorithm = safeContent.encryptionAlgorithm;
              cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);
              yield cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);
              _this36.safeContents.push(new ContentInfo({
                contentType: "1.2.840.113549.1.7.3",
                content: cmsEnveloped.toSchema()
              }));
            }
            break;
          default:
            throw new Error(`Incorrect value for "content.privacyMode": ${content.privacyMode}`);
        }
      }
      return _this36;
    })();
  }
}
AuthenticatedSafe.CLASS_NAME = "AuthenticatedSafe";
const HASH_ALGORITHM$1 = "hashAlgorithm";
const ISSUER_NAME_HASH = "issuerNameHash";
const ISSUER_KEY_HASH = "issuerKeyHash";
const SERIAL_NUMBER$1 = "serialNumber";
const CLEAR_PROPS$j = [HASH_ALGORITHM$1, ISSUER_NAME_HASH, ISSUER_KEY_HASH, SERIAL_NUMBER$1];
class CertID extends PkiObject {
  static create(certificate, parameters, crypto = getCrypto(true)) {
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const certID = new CertID();
      yield certID.createForCertificate(certificate, parameters, crypto);
      return certID;
    })();
  }
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));
    this.issuerNameHash = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));
    this.issuerKeyHash = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case ISSUER_NAME_HASH:
      case ISSUER_KEY_HASH:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case SERIAL_NUMBER$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case HASH_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case ISSUER_NAME_HASH:
      case ISSUER_KEY_HASH:
      case SERIAL_NUMBER$1:
        return memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.hashAlgorithmObject || {
        names: {
          blockName: names.hashAlgorithm || EMPTY_STRING
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.issuerNameHash || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.issuerKeyHash || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$j);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertID.schema({
      names: {
        hashAlgorithm: HASH_ALGORITHM$1,
        issuerNameHash: ISSUER_NAME_HASH,
        issuerKeyHash: ISSUER_KEY_HASH,
        serialNumber: SERIAL_NUMBER$1
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    this.issuerNameHash = asn1.result.issuerNameHash;
    this.issuerKeyHash = asn1.result.issuerKeyHash;
    this.serialNumber = asn1.result.serialNumber;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.hashAlgorithm.toSchema(), this.issuerNameHash, this.issuerKeyHash, this.serialNumber]
    });
  }
  toJSON() {
    return {
      hashAlgorithm: this.hashAlgorithm.toJSON(),
      issuerNameHash: this.issuerNameHash.toJSON(),
      issuerKeyHash: this.issuerKeyHash.toJSON(),
      serialNumber: this.serialNumber.toJSON()
    };
  }
  isEqual(certificateID) {
    if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {
      return false;
    }
    if (!pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {
      return false;
    }
    if (!pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {
      return false;
    }
    if (!this.serialNumber.isEqual(certificateID.serialNumber)) {
      return false;
    }
    return true;
  }
  createForCertificate(certificate, parameters, crypto = getCrypto(true)) {
    var _this37 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assert(parameters, HASH_ALGORITHM$1, "issuerCertificate");
      const hashOID = crypto.getOIDByAlgorithm({
        name: parameters.hashAlgorithm
      }, true, "hashAlgorithm");
      _this37.hashAlgorithm = new AlgorithmIdentifier({
        algorithmId: hashOID,
        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
      });
      const issuerCertificate = parameters.issuerCertificate;
      _this37.serialNumber = certificate.serialNumber;
      const hashIssuerName = yield crypto.digest({
        name: parameters.hashAlgorithm
      }, issuerCertificate.subject.toSchema().toBER(false));
      _this37.issuerNameHash = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: hashIssuerName
      });
      const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;
      const hashIssuerKey = yield crypto.digest({
        name: parameters.hashAlgorithm
      }, issuerKeyBuffer);
      _this37.issuerKeyHash = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: hashIssuerKey
      });
    })();
  }
}
CertID.CLASS_NAME = "CertID";
const CERT_ID = "certID";
const CERT_STATUS = "certStatus";
const THIS_UPDATE = "thisUpdate";
const NEXT_UPDATE = "nextUpdate";
const SINGLE_EXTENSIONS = "singleExtensions";
const CLEAR_PROPS$i = [CERT_ID, CERT_STATUS, THIS_UPDATE, NEXT_UPDATE, SINGLE_EXTENSIONS];
class SingleResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.certID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));
    this.certStatus = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));
    this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));
    if (NEXT_UPDATE in parameters) {
      this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));
    }
    if (SINGLE_EXTENSIONS in parameters) {
      this.singleExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case CERT_ID:
        return new CertID();
      case CERT_STATUS:
        return {};
      case THIS_UPDATE:
      case NEXT_UPDATE:
        return new Date(0, 0, 0);
      case SINGLE_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case CERT_ID:
        return CertID.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && CertID.compareWithDefault("issuerNameHash", memberValue.issuerNameHash) && CertID.compareWithDefault("issuerKeyHash", memberValue.issuerKeyHash) && CertID.compareWithDefault("serialNumber", memberValue.serialNumber);
      case CERT_STATUS:
        return Object.keys(memberValue).length === 0;
      case THIS_UPDATE:
      case NEXT_UPDATE:
        return memberValue === SingleResponse.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [CertID.schema(names.certID || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
          name: names.certStatus || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          }
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.certStatus || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            optional: true,
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Enumerated()]
          })]
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
          name: names.certStatus || EMPTY_STRING,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          lenBlock: {
            length: 1
          }
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.thisUpdate || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
          name: names.nextUpdate || EMPTY_STRING
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [Extensions.schema(names.singleExtensions || {})]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$i);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SingleResponse.schema({
      names: {
        certID: {
          names: {
            blockName: CERT_ID
          }
        },
        certStatus: CERT_STATUS,
        thisUpdate: THIS_UPDATE,
        nextUpdate: NEXT_UPDATE,
        singleExtensions: {
          names: {
            blockName: SINGLE_EXTENSIONS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.certID = new CertID({
      schema: asn1.result.certID
    });
    this.certStatus = asn1.result.certStatus;
    this.thisUpdate = asn1.result.thisUpdate.toDate();
    if (NEXT_UPDATE in asn1.result) this.nextUpdate = asn1.result.nextUpdate.toDate();
    if (SINGLE_EXTENSIONS in asn1.result) this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.certID.toSchema());
    outputArray.push(this.certStatus);
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
      valueDate: this.thisUpdate
    }));
    if (this.nextUpdate) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
          valueDate: this.nextUpdate
        })]
      }));
    }
    if (this.singleExtensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.singleExtensions, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      certID: this.certID.toJSON(),
      certStatus: this.certStatus.toJSON(),
      thisUpdate: this.thisUpdate
    };
    if (this.nextUpdate) {
      res.nextUpdate = this.nextUpdate;
    }
    if (this.singleExtensions) {
      res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());
    }
    return res;
  }
}
SingleResponse.CLASS_NAME = "SingleResponse";
const TBS$2 = "tbs";
const VERSION$7 = "version";
const RESPONDER_ID = "responderID";
const PRODUCED_AT = "producedAt";
const RESPONSES = "responses";
const RESPONSE_EXTENSIONS = "responseExtensions";
const RESPONSE_DATA = "ResponseData";
const RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;
const RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;
const RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;
const RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;
const RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;
const CLEAR_PROPS$h = [RESPONSE_DATA, RESPONSE_DATA_VERSION, RESPONSE_DATA_RESPONDER_ID, RESPONSE_DATA_PRODUCED_AT, RESPONSE_DATA_RESPONSES, RESPONSE_DATA_RESPONSE_EXTENSIONS];
class ResponseData extends PkiObject {
  get tbs() {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));
    if (VERSION$7 in parameters) {
      this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));
    }
    this.responderID = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));
    this.producedAt = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));
    this.responses = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));
    if (RESPONSE_EXTENSIONS in parameters) {
      this.responseExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$7:
        return 0;
      case TBS$2:
        return EMPTY_BUFFER;
      case RESPONDER_ID:
        return {};
      case PRODUCED_AT:
        return new Date(0, 0, 0);
      case RESPONSES:
      case RESPONSE_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS$2:
        return memberValue.byteLength === 0;
      case RESPONDER_ID:
        return Object.keys(memberValue).length === 0;
      case PRODUCED_AT:
        return memberValue === ResponseData.defaultValues(memberName);
      case RESPONSES:
      case RESPONSE_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || RESPONSE_DATA,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.version || RESPONSE_DATA_VERSION
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {
            names: {
              blockName: "ResponseData.byName"
            }
          })]
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          name: names.responderID || RESPONSE_DATA_RESPONDER_ID,
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            name: names.ResponseDataByKey || "ResponseData.byKey"
          })]
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.producedAt || RESPONSE_DATA_PRODUCED_AT
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: RESPONSE_DATA_RESPONSES,
          value: SingleResponse.schema(names.response || {})
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [Extensions.schema(names.extensions || {
          names: {
            blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$h);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ResponseData.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;
    if (RESPONSE_DATA_VERSION in asn1.result) this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;
    if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1) this.responderID = new RelativeDistinguishedNames({
      schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0]
    });else this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];
    this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();
    this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({
      schema: element
    }));
    if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result) this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({
      schema: element
    }));
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (!this.tbsView.byteLength) {
        return ResponseData.schema();
      }
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Response Data");
      tbsSchema = asn1.result;
    } else {
      const outputArray = [];
      if (VERSION$7 in this) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
            value: this.version
          })]
        }));
      }
      if (this.responderID instanceof RelativeDistinguishedNames) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [this.responderID.toSchema()]
        }));
      } else {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [this.responderID]
        }));
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        valueDate: this.producedAt
      }));
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.responses, o => o.toSchema())
      }));
      if (this.responseExtensions) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
            value: Array.from(this.responseExtensions, o => o.toSchema())
          })]
        }));
      }
      tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: outputArray
      });
    }
    return tbsSchema;
  }
  toJSON() {
    const res = {};
    if (VERSION$7 in this) {
      res.version = this.version;
    }
    if (this.responderID) {
      res.responderID = this.responderID;
    }
    if (this.producedAt) {
      res.producedAt = this.producedAt;
    }
    if (this.responses) {
      res.responses = Array.from(this.responses, o => o.toJSON());
    }
    if (this.responseExtensions) {
      res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());
    }
    return res;
  }
}
ResponseData.CLASS_NAME = "ResponseData";
const TRUSTED_CERTS = "trustedCerts";
const CERTS$2 = "certs";
const CRLS$1 = "crls";
const OCSPS$1 = "ocsps";
const CHECK_DATE = "checkDate";
const FIND_ORIGIN = "findOrigin";
const FIND_ISSUER = "findIssuer";
var ChainValidationCode;
(function (ChainValidationCode) {
  ChainValidationCode[ChainValidationCode["unknown"] = -1] = "unknown";
  ChainValidationCode[ChainValidationCode["success"] = 0] = "success";
  ChainValidationCode[ChainValidationCode["noRevocation"] = 11] = "noRevocation";
  ChainValidationCode[ChainValidationCode["noPath"] = 60] = "noPath";
  ChainValidationCode[ChainValidationCode["noValidPath"] = 97] = "noValidPath";
})(ChainValidationCode || (ChainValidationCode = {}));
class ChainValidationError extends Error {
  constructor(code, message) {
    super(message);
    this.name = ChainValidationError.NAME;
    this.code = code;
    this.message = message;
  }
}
ChainValidationError.NAME = "ChainValidationError";
function isTrusted(cert, trustedList) {
  for (let i = 0; i < trustedList.length; i++) {
    if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {
      return true;
    }
  }
  return false;
}
class CertificateChainValidationEngine {
  constructor(parameters = {}) {
    this.trustedCerts = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));
    this.certs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));
    this.crls = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));
    this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));
    this.checkDate = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));
    this.findOrigin = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));
    this.findIssuer = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));
  }
  static defaultFindOrigin(certificate, validationEngine) {
    if (certificate.tbsView.byteLength === 0) {
      certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());
    }
    for (const localCert of validationEngine.certs) {
      if (localCert.tbsView.byteLength === 0) {
        localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());
      }
      if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView)) return "Intermediate Certificates";
    }
    for (const trustedCert of validationEngine.trustedCerts) {
      if (trustedCert.tbsView.byteLength === 0) trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());
      if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView)) return "Trusted Certificates";
    }
    return "Unknown";
  }
  defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const result = [];
      let keyIdentifier = null;
      let authorityCertIssuer = null;
      let authorityCertSerialNumber = null;
      if (certificate.subject.isEqual(certificate.issuer)) {
        try {
          const verificationResult = yield certificate.verify(undefined, crypto);
          if (verificationResult) {
            return [certificate];
          }
        } catch (ex) {}
      }
      if (certificate.extensions) {
        for (const extension of certificate.extensions) {
          if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {
            if (extension.parsedValue.keyIdentifier) {
              keyIdentifier = extension.parsedValue.keyIdentifier;
            } else {
              if (extension.parsedValue.authorityCertIssuer) {
                authorityCertIssuer = extension.parsedValue.authorityCertIssuer;
              }
              if (extension.parsedValue.authorityCertSerialNumber) {
                authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;
              }
            }
            break;
          }
        }
      }
      function checkCertificate(possibleIssuer) {
        if (keyIdentifier !== null) {
          if (possibleIssuer.extensions) {
            let extensionFound = false;
            for (const extension of possibleIssuer.extensions) {
              if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {
                extensionFound = true;
                if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {
                  result.push(possibleIssuer);
                }
                break;
              }
            }
            if (extensionFound) {
              return;
            }
          }
        }
        let authorityCertSerialNumberEqual = false;
        if (authorityCertSerialNumber !== null) authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);
        if (authorityCertIssuer !== null) {
          if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {
            if (authorityCertSerialNumberEqual) result.push(possibleIssuer);
          }
        } else {
          if (certificate.issuer.isEqual(possibleIssuer.subject)) result.push(possibleIssuer);
        }
      }
      for (const trustedCert of validationEngine.trustedCerts) {
        checkCertificate(trustedCert);
      }
      for (const intermediateCert of validationEngine.certs) {
        checkCertificate(intermediateCert);
      }
      for (let i = result.length - 1; i >= 0; i--) {
        try {
          const verificationResult = yield certificate.verify(result[i], crypto);
          if (verificationResult === false) result.splice(i, 1);
        } catch (ex) {
          result.splice(i, 1);
        }
      }
      return result;
    })();
  }
  defaultValues(memberName) {
    switch (memberName) {
      case TRUSTED_CERTS:
        return [];
      case CERTS$2:
        return [];
      case CRLS$1:
        return [];
      case OCSPS$1:
        return [];
      case CHECK_DATE:
        return new Date();
      case FIND_ORIGIN:
        return CertificateChainValidationEngine.defaultFindOrigin;
      case FIND_ISSUER:
        return this.defaultFindIssuer;
      default:
        throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);
    }
  }
  sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {
    var _this38 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const localCerts = [];
      const _buildPath = /*#__PURE__*/function () {
        var _ref11 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificate, crypto) {
          const result = [];
          function checkUnique(array) {
            let unique = true;
            for (let i = 0; i < array.length; i++) {
              for (let j = 0; j < array.length; j++) {
                if (j === i) continue;
                if (array[i] === array[j]) {
                  unique = false;
                  break;
                }
              }
              if (!unique) break;
            }
            return unique;
          }
          if (isTrusted(certificate, _this38.trustedCerts)) {
            return [[certificate]];
          }
          const findIssuerResult = yield _this38.findIssuer(certificate, _this38, crypto);
          if (findIssuerResult.length === 0) {
            throw new Error("No valid certificate paths found");
          }
          for (let i = 0; i < findIssuerResult.length; i++) {
            if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {
              result.push([findIssuerResult[i]]);
              continue;
            }
            const buildPathResult = yield _buildPath(findIssuerResult[i], crypto);
            for (let j = 0; j < buildPathResult.length; j++) {
              const copy = buildPathResult[j].slice();
              copy.splice(0, 0, findIssuerResult[i]);
              if (checkUnique(copy)) result.push(copy);else result.push(buildPathResult[j]);
            }
          }
          return result;
        });
        return function buildPath(_x29, _x30) {
          return _ref11.apply(this, arguments);
        };
      }();
      const findCRL = /*#__PURE__*/function () {
        var _ref12 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificate) {
          const issuerCertificates = [];
          const crls = [];
          const crlsAndCertificates = [];
          issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));
          if (issuerCertificates.length === 0) {
            return {
              status: 1,
              statusMessage: "No certificate's issuers"
            };
          }
          crls.push(..._this38.crls.filter(o => o.issuer.isEqual(certificate.issuer)));
          if (crls.length === 0) {
            return {
              status: 2,
              statusMessage: "No CRLs for specific certificate issuer"
            };
          }
          for (let i = 0; i < crls.length; i++) {
            const crl = crls[i];
            if (crl.nextUpdate && crl.nextUpdate.value < _this38.checkDate) {
              continue;
            }
            for (let j = 0; j < issuerCertificates.length; j++) {
              try {
                const result = yield crls[i].verify({
                  issuerCertificate: issuerCertificates[j]
                }, crypto);
                if (result) {
                  crlsAndCertificates.push({
                    crl: crls[i],
                    certificate: issuerCertificates[j]
                  });
                  break;
                }
              } catch (ex) {}
            }
          }
          if (crlsAndCertificates.length) {
            return {
              status: 0,
              statusMessage: EMPTY_STRING,
              result: crlsAndCertificates
            };
          }
          return {
            status: 3,
            statusMessage: "No valid CRLs found"
          };
        });
        return function findCRL(_x31) {
          return _ref12.apply(this, arguments);
        };
      }();
      const findOCSP = /*#__PURE__*/function () {
        var _ref13 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificate, issuerCertificate) {
          const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);
          if (!hashAlgorithm.name) {
            return 1;
          }
          if (!hashAlgorithm.hash) {
            return 1;
          }
          for (let i = 0; i < _this38.ocsps.length; i++) {
            const ocsp = _this38.ocsps[i];
            const result = yield ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);
            if (result.isForCertificate) {
              if (result.status === 0) return 0;
              return 1;
            }
          }
          return 2;
        });
        return function findOCSP(_x32, _x33) {
          return _ref13.apply(this, arguments);
        };
      }();
      function checkForCA(_x34) {
        return _checkForCA.apply(this, arguments);
      }
      function _checkForCA() {
        _checkForCA = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (certificate, needToCheckCRL = false) {
          let isCA = false;
          let mustBeCA = false;
          let keyUsagePresent = false;
          let cRLSign = false;
          if (certificate.extensions) {
            for (let j = 0; j < certificate.extensions.length; j++) {
              const extension = certificate.extensions[j];
              if (extension.critical && !extension.parsedValue) {
                return {
                  result: false,
                  resultCode: 6,
                  resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`
                };
              }
              if (extension.extnID === id_KeyUsage) {
                keyUsagePresent = true;
                const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);
                if ((view[0] & 0x04) === 0x04) mustBeCA = true;
                if ((view[0] & 0x02) === 0x02) cRLSign = true;
              }
              if (extension.extnID === id_BasicConstraints) {
                if ("cA" in extension.parsedValue) {
                  if (extension.parsedValue.cA === true) isCA = true;
                }
              }
            }
            if (mustBeCA === true && isCA === false) {
              return {
                result: false,
                resultCode: 3,
                resultMessage: "Unable to build certificate chain - using \"keyCertSign\" flag set without BasicConstraints"
              };
            }
            if (keyUsagePresent === true && isCA === true && mustBeCA === false) {
              return {
                result: false,
                resultCode: 4,
                resultMessage: "Unable to build certificate chain - \"keyCertSign\" flag was not set"
              };
            }
            if (isCA === true && keyUsagePresent === true && needToCheckCRL && cRLSign === false) {
              return {
                result: false,
                resultCode: 5,
                resultMessage: "Unable to build certificate chain - intermediate certificate must have \"cRLSign\" key usage flag"
              };
            }
          }
          if (isCA === false) {
            return {
              result: false,
              resultCode: 7,
              resultMessage: "Unable to build certificate chain - more than one possible end-user certificate"
            };
          }
          return {
            result: true,
            resultCode: 0,
            resultMessage: EMPTY_STRING
          };
        });
        return _checkForCA.apply(this, arguments);
      }
      const basicCheck = /*#__PURE__*/function () {
        var _ref14 = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (path, checkDate) {
          for (let i = 0; i < path.length; i++) {
            if (path[i].notBefore.value > checkDate || path[i].notAfter.value < checkDate) {
              return {
                result: false,
                resultCode: 8,
                resultMessage: "The certificate is either not yet valid or expired"
              };
            }
          }
          if (path.length < 2) {
            return {
              result: false,
              resultCode: 9,
              resultMessage: "Too short certificate path"
            };
          }
          for (let i = path.length - 2; i >= 0; i--) {
            if (path[i].issuer.isEqual(path[i].subject) === false) {
              if (path[i].issuer.isEqual(path[i + 1].subject) === false) {
                return {
                  result: false,
                  resultCode: 10,
                  resultMessage: "Incorrect name chaining"
                };
              }
            }
          }
          if (_this38.crls.length !== 0 || _this38.ocsps.length !== 0) {
            for (let i = 0; i < path.length - 1; i++) {
              let ocspResult = 2;
              let crlResult = {
                status: 0,
                statusMessage: EMPTY_STRING
              };
              if (_this38.ocsps.length !== 0) {
                ocspResult = yield findOCSP(path[i], path[i + 1]);
                switch (ocspResult) {
                  case 0:
                    continue;
                  case 1:
                    return {
                      result: false,
                      resultCode: 12,
                      resultMessage: "One of certificates was revoked via OCSP response"
                    };
                }
              }
              if (_this38.crls.length !== 0) {
                crlResult = yield findCRL(path[i]);
                if (crlResult.status === 0 && crlResult.result) {
                  for (let j = 0; j < crlResult.result.length; j++) {
                    const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);
                    if (isCertificateRevoked) {
                      return {
                        result: false,
                        resultCode: 12,
                        resultMessage: "One of certificates had been revoked"
                      };
                    }
                    const isCertificateCA = yield checkForCA(crlResult.result[j].certificate, true);
                    if (isCertificateCA.result === false) {
                      return {
                        result: false,
                        resultCode: 13,
                        resultMessage: "CRL issuer certificate is not a CA certificate or does not have crlSign flag"
                      };
                    }
                  }
                } else {
                  if (passedWhenNotRevValues === false) {
                    throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);
                  }
                }
              } else {
                if (ocspResult === 2) {
                  return {
                    result: false,
                    resultCode: 11,
                    resultMessage: "No revocation values found for one of certificates"
                  };
                }
              }
              if (ocspResult === 2 && crlResult.status === 2 && passedWhenNotRevValues) {
                const issuerCertificate = path[i + 1];
                let extensionFound = false;
                if (issuerCertificate.extensions) {
                  for (const extension of issuerCertificate.extensions) {
                    switch (extension.extnID) {
                      case id_CRLDistributionPoints:
                      case id_FreshestCRL:
                      case id_AuthorityInfoAccess:
                        extensionFound = true;
                        break;
                    }
                  }
                }
                if (extensionFound) {
                  throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);
                }
              }
            }
          }
          for (const [i, cert] of path.entries()) {
            if (!i) {
              continue;
            }
            const result = yield checkForCA(cert);
            if (!result.result) {
              return {
                result: false,
                resultCode: 14,
                resultMessage: "One of intermediate certificates is not a CA certificate"
              };
            }
          }
          return {
            result: true
          };
        });
        return function basicCheck(_x35, _x36) {
          return _ref14.apply(this, arguments);
        };
      }();
      localCerts.push(..._this38.trustedCerts);
      localCerts.push(..._this38.certs);
      for (let i = 0; i < localCerts.length; i++) {
        for (let j = 0; j < localCerts.length; j++) {
          if (i === j) continue;
          if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {
            localCerts.splice(j, 1);
            i = 0;
            break;
          }
        }
      }
      const leafCert = localCerts[localCerts.length - 1];
      let result;
      const certificatePath = [leafCert];
      result = yield _buildPath(leafCert, crypto);
      if (result.length === 0) {
        throw new ChainValidationError(ChainValidationCode.noPath, "Unable to find certificate path");
      }
      for (let i = result.length - 1; i >= 0; i--) {
        let found = false;
        for (let j = 0; j < result[i].length; j++) {
          const certificate = result[i][j];
          for (let k = 0; k < _this38.trustedCerts.length; k++) {
            if (pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(certificate.tbsView, _this38.trustedCerts[k].tbsView)) {
              found = true;
              break;
            }
          }
          if (found) break;
        }
        if (!found) {
          result.splice(i, 1);
        }
      }
      if (result.length === 0) {
        throw new ChainValidationError(ChainValidationCode.noValidPath, "No valid certificate paths found");
      }
      let shortestLength = result[0].length;
      let shortestIndex = 0;
      for (let i = 0; i < result.length; i++) {
        if (result[i].length < shortestLength) {
          shortestLength = result[i].length;
          shortestIndex = i;
        }
      }
      for (let i = 0; i < result[shortestIndex].length; i++) certificatePath.push(result[shortestIndex][i]);
      result = yield basicCheck(certificatePath, _this38.checkDate);
      if (result.result === false) throw result;
      return certificatePath;
    })();
  }
  verify(parameters = {}, crypto = getCrypto(true)) {
    var _this39 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      function compareDNSName(name, constraint) {
        const namePrepared = stringPrep(name);
        const constraintPrepared = stringPrep(constraint);
        const nameSplitted = namePrepared.split(".");
        const constraintSplitted = constraintPrepared.split(".");
        const nameLen = nameSplitted.length;
        const constrLen = constraintSplitted.length;
        if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) {
          return false;
        }
        for (let i = 0; i < nameLen; i++) {
          if (nameSplitted[i].length === 0) {
            return false;
          }
        }
        for (let i = 0; i < constrLen; i++) {
          if (constraintSplitted[i].length === 0) {
            if (i === 0) {
              if (constrLen === 1) {
                return false;
              }
              continue;
            }
            return false;
          }
        }
        for (let i = 0; i < constrLen; i++) {
          if (constraintSplitted[constrLen - 1 - i].length === 0) {
            continue;
          }
          if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {
            return false;
          }
        }
        return true;
      }
      function compareRFC822Name(name, constraint) {
        const namePrepared = stringPrep(name);
        const constraintPrepared = stringPrep(constraint);
        const nameSplitted = namePrepared.split("@");
        const constraintSplitted = constraintPrepared.split("@");
        if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false;
        if (constraintSplitted.length === 1) {
          const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);
          if (result) {
            const ns = nameSplitted[1].split(".");
            const cs = constraintSplitted[0].split(".");
            if (cs[0].length === 0) return true;
            return ns.length === cs.length;
          }
          return false;
        }
        return namePrepared.localeCompare(constraintPrepared) === 0;
      }
      function compareUniformResourceIdentifier(name, constraint) {
        let namePrepared = stringPrep(name);
        const constraintPrepared = stringPrep(constraint);
        const ns = namePrepared.split("/");
        const cs = constraintPrepared.split("/");
        if (cs.length > 1) return false;
        if (ns.length > 1) {
          for (let i = 0; i < ns.length; i++) {
            if (ns[i].length > 0 && ns[i].charAt(ns[i].length - 1) !== ":") {
              const nsPort = ns[i].split(":");
              namePrepared = nsPort[0];
              break;
            }
          }
        }
        const result = compareDNSName(namePrepared, constraintPrepared);
        if (result) {
          const nameSplitted = namePrepared.split(".");
          const constraintSplitted = constraintPrepared.split(".");
          if (constraintSplitted[0].length === 0) return true;
          return nameSplitted.length === constraintSplitted.length;
        }
        return false;
      }
      function compareIPAddress(name, constraint) {
        const nameView = name.valueBlock.valueHexView;
        const constraintView = constraint.valueBlock.valueHexView;
        if (nameView.length === 4 && constraintView.length === 8) {
          for (let i = 0; i < 4; i++) {
            if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4]) return false;
          }
          return true;
        }
        if (nameView.length === 16 && constraintView.length === 32) {
          for (let i = 0; i < 16; i++) {
            if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16]) return false;
          }
          return true;
        }
        return false;
      }
      function compareDirectoryName(name, constraint) {
        if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;
        if (name.typesAndValues.length < constraint.typesAndValues.length) return false;
        let result = true;
        let nameStart = 0;
        for (let i = 0; i < constraint.typesAndValues.length; i++) {
          let localResult = false;
          for (let j = nameStart; j < name.typesAndValues.length; j++) {
            localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);
            if (name.typesAndValues[j].type === constraint.typesAndValues[i].type) result = result && localResult;
            if (localResult === true) {
              if (nameStart === 0 || nameStart === j) {
                nameStart = j + 1;
                break;
              } else return false;
            }
          }
          if (localResult === false) return false;
        }
        return nameStart === 0 ? false : result;
      }
      try {
        if (_this39.certs.length === 0) throw new Error("Empty certificate array");
        const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;
        const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];
        const initialExplicitPolicy = parameters.initialExplicitPolicy || false;
        const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;
        const initialInhibitPolicy = parameters.initialInhibitPolicy || false;
        const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];
        const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];
        const initialRequiredNameForms = parameters.initialRequiredNameForms || [];
        let explicitPolicyIndicator = initialExplicitPolicy;
        let policyMappingInhibitIndicator = initialPolicyMappingInhibit;
        let inhibitAnyPolicyIndicator = initialInhibitPolicy;
        const pendingConstraints = [false, false, false];
        let explicitPolicyPending = 0;
        let policyMappingInhibitPending = 0;
        let inhibitAnyPolicyPending = 0;
        let permittedSubtrees = initialPermittedSubtreesSet;
        let excludedSubtrees = initialExcludedSubtreesSet;
        const requiredNameForms = initialRequiredNameForms;
        let pathDepth = 1;
        _this39.certs = yield _this39.sort(passedWhenNotRevValues, crypto);
        const allPolicies = [];
        allPolicies.push(id_AnyPolicy);
        const policiesAndCerts = [];
        const anyPolicyArray = new Array(_this39.certs.length - 1);
        for (let ii = 0; ii < _this39.certs.length - 1; ii++) anyPolicyArray[ii] = true;
        policiesAndCerts.push(anyPolicyArray);
        const policyMappings = new Array(_this39.certs.length - 1);
        const certPolicies = new Array(_this39.certs.length - 1);
        let explicitPolicyStart = explicitPolicyIndicator ? _this39.certs.length - 1 : -1;
        for (let i = _this39.certs.length - 2; i >= 0; i--, pathDepth++) {
          const cert = _this39.certs[i];
          if (cert.extensions) {
            for (let j = 0; j < cert.extensions.length; j++) {
              const extension = cert.extensions[j];
              if (extension.extnID === id_CertificatePolicies) {
                certPolicies[i] = extension.parsedValue;
                for (let s = 0; s < allPolicies.length; s++) {
                  if (allPolicies[s] === id_AnyPolicy) {
                    delete policiesAndCerts[s][i];
                    break;
                  }
                }
                for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {
                  let policyIndex = -1;
                  const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;
                  for (let s = 0; s < allPolicies.length; s++) {
                    if (policyId === allPolicies[s]) {
                      policyIndex = s;
                      break;
                    }
                  }
                  if (policyIndex === -1) {
                    allPolicies.push(policyId);
                    const certArray = new Array(_this39.certs.length - 1);
                    certArray[i] = true;
                    policiesAndCerts.push(certArray);
                  } else policiesAndCerts[policyIndex][i] = true;
                }
              }
              if (extension.extnID === id_PolicyMappings) {
                if (policyMappingInhibitIndicator) {
                  return {
                    result: false,
                    resultCode: 98,
                    resultMessage: "Policy mapping prohibited"
                  };
                }
                policyMappings[i] = extension.parsedValue;
              }
              if (extension.extnID === id_PolicyConstraints) {
                if (explicitPolicyIndicator === false) {
                  if (extension.parsedValue.requireExplicitPolicy === 0) {
                    explicitPolicyIndicator = true;
                    explicitPolicyStart = i;
                  } else {
                    if (pendingConstraints[0] === false) {
                      pendingConstraints[0] = true;
                      explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;
                    } else explicitPolicyPending = explicitPolicyPending > extension.parsedValue.requireExplicitPolicy ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;
                  }
                  if (extension.parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;else {
                    if (pendingConstraints[1] === false) {
                      pendingConstraints[1] = true;
                      policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;
                    } else policyMappingInhibitPending = policyMappingInhibitPending > extension.parsedValue.inhibitPolicyMapping + 1 ? extension.parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;
                  }
                }
              }
              if (extension.extnID === id_InhibitAnyPolicy) {
                if (inhibitAnyPolicyIndicator === false) {
                  if (extension.parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;else {
                    if (pendingConstraints[2] === false) {
                      pendingConstraints[2] = true;
                      inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;
                    } else inhibitAnyPolicyPending = inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;
                  }
                }
              }
            }
            if (inhibitAnyPolicyIndicator === true) {
              let policyIndex = -1;
              for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {
                if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {
                  policyIndex = searchAnyPolicy;
                  break;
                }
              }
              if (policyIndex !== -1) delete policiesAndCerts[0][i];
            }
            if (explicitPolicyIndicator === false) {
              if (pendingConstraints[0] === true) {
                explicitPolicyPending--;
                if (explicitPolicyPending === 0) {
                  explicitPolicyIndicator = true;
                  explicitPolicyStart = i;
                  pendingConstraints[0] = false;
                }
              }
            }
            if (policyMappingInhibitIndicator === false) {
              if (pendingConstraints[1] === true) {
                policyMappingInhibitPending--;
                if (policyMappingInhibitPending === 0) {
                  policyMappingInhibitIndicator = true;
                  pendingConstraints[1] = false;
                }
              }
            }
            if (inhibitAnyPolicyIndicator === false) {
              if (pendingConstraints[2] === true) {
                inhibitAnyPolicyPending--;
                if (inhibitAnyPolicyPending === 0) {
                  inhibitAnyPolicyIndicator = true;
                  pendingConstraints[2] = false;
                }
              }
            }
          }
        }
        for (let i = 0; i < _this39.certs.length - 1; i++) {
          if (i < _this39.certs.length - 2 && typeof policyMappings[i + 1] !== "undefined") {
            for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {
              if (policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy || policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy) {
                return {
                  result: false,
                  resultCode: 99,
                  resultMessage: "The \"anyPolicy\" should not be a part of policy mapping scheme"
                };
              }
              let issuerDomainPolicyIndex = -1;
              let subjectDomainPolicyIndex = -1;
              for (let n = 0; n < allPolicies.length; n++) {
                if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy) issuerDomainPolicyIndex = n;
                if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy) subjectDomainPolicyIndex = n;
              }
              if (typeof policiesAndCerts[issuerDomainPolicyIndex][i] !== "undefined") delete policiesAndCerts[issuerDomainPolicyIndex][i];
              for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {
                if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {
                  if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {
                    for (let m = 0; m <= i; m++) {
                      if (typeof policiesAndCerts[subjectDomainPolicyIndex][m] !== "undefined") {
                        policiesAndCerts[issuerDomainPolicyIndex][m] = true;
                        delete policiesAndCerts[subjectDomainPolicyIndex][m];
                      }
                    }
                  }
                }
              }
            }
          }
        }
        for (let i = 0; i < allPolicies.length; i++) {
          if (allPolicies[i] === id_AnyPolicy) {
            for (let j = 0; j < explicitPolicyStart; j++) delete policiesAndCerts[i][j];
          }
        }
        const authConstrPolicies = [];
        for (let i = 0; i < policiesAndCerts.length; i++) {
          let found = true;
          for (let j = 0; j < _this39.certs.length - 1; j++) {
            let anyPolicyFound = false;
            if (j < explicitPolicyStart && allPolicies[i] === id_AnyPolicy && allPolicies.length > 1) {
              found = false;
              break;
            }
            if (typeof policiesAndCerts[i][j] === "undefined") {
              if (j >= explicitPolicyStart) {
                for (let k = 0; k < allPolicies.length; k++) {
                  if (allPolicies[k] === id_AnyPolicy) {
                    if (policiesAndCerts[k][j] === true) anyPolicyFound = true;
                    break;
                  }
                }
              }
              if (!anyPolicyFound) {
                found = false;
                break;
              }
            }
          }
          if (found === true) authConstrPolicies.push(allPolicies[i]);
        }
        let userConstrPolicies = [];
        if (initialPolicySet.length === 1 && initialPolicySet[0] === id_AnyPolicy && explicitPolicyIndicator === false) userConstrPolicies = initialPolicySet;else {
          if (authConstrPolicies.length === 1 && authConstrPolicies[0] === id_AnyPolicy) userConstrPolicies = initialPolicySet;else {
            for (let i = 0; i < authConstrPolicies.length; i++) {
              for (let j = 0; j < initialPolicySet.length; j++) {
                if (initialPolicySet[j] === authConstrPolicies[i] || initialPolicySet[j] === id_AnyPolicy) {
                  userConstrPolicies.push(authConstrPolicies[i]);
                  break;
                }
              }
            }
          }
        }
        const policyResult = {
          result: userConstrPolicies.length > 0,
          resultCode: 0,
          resultMessage: userConstrPolicies.length > 0 ? EMPTY_STRING : "Zero \"userConstrPolicies\" array, no intersections with \"authConstrPolicies\"",
          authConstrPolicies,
          userConstrPolicies,
          explicitPolicyIndicator,
          policyMappings,
          certificatePath: _this39.certs
        };
        if (userConstrPolicies.length === 0) return policyResult;
        if (policyResult.result === false) return policyResult;
        pathDepth = 1;
        for (let i = _this39.certs.length - 2; i >= 0; i--, pathDepth++) {
          const cert = _this39.certs[i];
          let subjectAltNames = [];
          let certPermittedSubtrees = [];
          let certExcludedSubtrees = [];
          if (cert.extensions) {
            for (let j = 0; j < cert.extensions.length; j++) {
              const extension = cert.extensions[j];
              if (extension.extnID === id_NameConstraints) {
                if ("permittedSubtrees" in extension.parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);
                if ("excludedSubtrees" in extension.parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);
              }
              if (extension.extnID === id_SubjectAltName) subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);
            }
          }
          let formFound = requiredNameForms.length <= 0;
          for (let j = 0; j < requiredNameForms.length; j++) {
            switch (requiredNameForms[j].base.type) {
              case 4:
                {
                  if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length) continue;
                  formFound = true;
                  for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {
                      formFound = false;
                      break;
                    }
                  }
                  if (formFound === true) break;
                }
                break;
              default:
            }
          }
          if (formFound === false) {
            policyResult.result = false;
            policyResult.resultCode = 21;
            policyResult.resultMessage = "No necessary name form found";
            throw policyResult;
          }
          const constrGroups = [[], [], [], [], []];
          for (let j = 0; j < permittedSubtrees.length; j++) {
            switch (permittedSubtrees[j].base.type) {
              case 1:
                constrGroups[0].push(permittedSubtrees[j]);
                break;
              case 2:
                constrGroups[1].push(permittedSubtrees[j]);
                break;
              case 4:
                constrGroups[2].push(permittedSubtrees[j]);
                break;
              case 6:
                constrGroups[3].push(permittedSubtrees[j]);
                break;
              case 7:
                constrGroups[4].push(permittedSubtrees[j]);
                break;
              default:
            }
          }
          for (let p = 0; p < 5; p++) {
            let groupPermitted = false;
            let valueExists = false;
            const group = constrGroups[p];
            for (let j = 0; j < group.length; j++) {
              switch (p) {
                case 0:
                  if (subjectAltNames.length > 0) {
                    for (let k = 0; k < subjectAltNames.length; k++) {
                      if (subjectAltNames[k].type === 1) {
                        valueExists = true;
                        groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);
                      }
                    }
                  } else {
                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                      if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") {
                        valueExists = true;
                        groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);
                      }
                    }
                  }
                  break;
                case 1:
                  if (subjectAltNames.length > 0) {
                    for (let k = 0; k < subjectAltNames.length; k++) {
                      if (subjectAltNames[k].type === 2) {
                        valueExists = true;
                        groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);
                      }
                    }
                  }
                  break;
                case 2:
                  valueExists = true;
                  groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);
                  break;
                case 3:
                  if (subjectAltNames.length > 0) {
                    for (let k = 0; k < subjectAltNames.length; k++) {
                      if (subjectAltNames[k].type === 6) {
                        valueExists = true;
                        groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);
                      }
                    }
                  }
                  break;
                case 4:
                  if (subjectAltNames.length > 0) {
                    for (let k = 0; k < subjectAltNames.length; k++) {
                      if (subjectAltNames[k].type === 7) {
                        valueExists = true;
                        groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);
                      }
                    }
                  }
                  break;
                default:
              }
              if (groupPermitted) break;
            }
            if (groupPermitted === false && group.length > 0 && valueExists) {
              policyResult.result = false;
              policyResult.resultCode = 41;
              policyResult.resultMessage = "Failed to meet \"permitted sub-trees\" name constraint";
              throw policyResult;
            }
          }
          let excluded = false;
          for (let j = 0; j < excludedSubtrees.length; j++) {
            switch (excludedSubtrees[j].base.type) {
              case 1:
                if (subjectAltNames.length >= 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 1) excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                  }
                } else {
                  for (let k = 0; k < cert.subject.typesAndValues.length; k++) {
                    if (cert.subject.typesAndValues[k].type === "1.2.840.113549.1.9.1" || cert.subject.typesAndValues[k].type === "0.9.2342.19200300.100.1.3") excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);
                  }
                }
                break;
              case 2:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 2) excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                  }
                }
                break;
              case 4:
                excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);
                break;
              case 6:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 6) excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                  }
                }
                break;
              case 7:
                if (subjectAltNames.length > 0) {
                  for (let k = 0; k < subjectAltNames.length; k++) {
                    if (subjectAltNames[k].type === 7) excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);
                  }
                }
                break;
              default:
            }
            if (excluded) break;
          }
          if (excluded === true) {
            policyResult.result = false;
            policyResult.resultCode = 42;
            policyResult.resultMessage = "Failed to meet \"excluded sub-trees\" name constraint";
            throw policyResult;
          }
          permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);
          excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);
        }
        return policyResult;
      } catch (error) {
        if (error instanceof Error) {
          if (error instanceof ChainValidationError) {
            return {
              result: false,
              resultCode: error.code,
              resultMessage: error.message,
              error: error
            };
          }
          return {
            result: false,
            resultCode: ChainValidationCode.unknown,
            resultMessage: error.message,
            error: error
          };
        }
        if (error && typeof error === "object" && "resultMessage" in error) {
          return error;
        }
        return {
          result: false,
          resultCode: -1,
          resultMessage: `${error}`
        };
      }
    })();
  }
}
const TBS_RESPONSE_DATA = "tbsResponseData";
const SIGNATURE_ALGORITHM$3 = "signatureAlgorithm";
const SIGNATURE$2 = "signature";
const CERTS$1 = "certs";
const BASIC_OCSP_RESPONSE = "BasicOCSPResponse";
const BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;
const BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;
const BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;
const BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;
const CLEAR_PROPS$g = [BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA, BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM, BASIC_OCSP_RESPONSE_SIGNATURE, BASIC_OCSP_RESPONSE_CERTS];
class BasicOCSPResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsResponseData = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));
    if (CERTS$1 in parameters) {
      this.certs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS_RESPONSE_DATA:
        return new ResponseData();
      case SIGNATURE_ALGORITHM$3:
        return new AlgorithmIdentifier();
      case SIGNATURE$2:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      case CERTS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case "type":
        {
          let comparisonResult = ResponseData.compareWithDefault("tbs", memberValue.tbs) && ResponseData.compareWithDefault("responderID", memberValue.responderID) && ResponseData.compareWithDefault("producedAt", memberValue.producedAt) && ResponseData.compareWithDefault("responses", memberValue.responses);
          if ("responseExtensions" in memberValue) comparisonResult = comparisonResult && ResponseData.compareWithDefault("responseExtensions", memberValue.responseExtensions);
          return comparisonResult;
        }
      case SIGNATURE_ALGORITHM$3:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case SIGNATURE$2:
        return memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName));
      case CERTS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || BASIC_OCSP_RESPONSE,
      value: [ResponseData.schema(names.tbsResponseData || {
        names: {
          blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA
        }
      }), AlgorithmIdentifier.schema(names.signatureAlgorithm || {
        names: {
          blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signature || BASIC_OCSP_RESPONSE_SIGNATURE
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
            name: BASIC_OCSP_RESPONSE_CERTS,
            value: Certificate.schema(names.certs || {})
          })]
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$g);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, BasicOCSPResponse.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsResponseData = new ResponseData({
      schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA]
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM]
    });
    this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];
    if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {
      this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.tbsResponseData.toSchema());
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.certs) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: Array.from(this.certs, o => o.toSchema())
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      tbsResponseData: this.tbsResponseData.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (this.certs) {
      res.certs = Array.from(this.certs, o => o.toJSON());
    }
    return res;
  }
  getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {
    var _this40 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const result = {
        isForCertificate: false,
        status: 2
      };
      const hashesObject = {};
      const certIDs = [];
      for (const response of _this40.tbsResponseData.responses) {
        const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, "CertID.hashAlgorithm");
        if (!hashesObject[hashAlgorithm.name]) {
          hashesObject[hashAlgorithm.name] = 1;
          const certID = new CertID();
          certIDs.push(certID);
          yield certID.createForCertificate(certificate, {
            hashAlgorithm: hashAlgorithm.name,
            issuerCertificate
          }, crypto);
        }
      }
      for (const response of _this40.tbsResponseData.responses) {
        for (const id of certIDs) {
          if (response.certID.isEqual(id)) {
            result.isForCertificate = true;
            try {
              switch (response.certStatus.idBlock.isConstructed) {
                case true:
                  if (response.certStatus.idBlock.tagNumber === 1) result.status = 1;
                  break;
                case false:
                  switch (response.certStatus.idBlock.tagNumber) {
                    case 0:
                      result.status = 0;
                      break;
                    case 2:
                      result.status = 2;
                      break;
                    default:
                  }
                  break;
                default:
              }
            } catch (ex) {}
            return result;
          }
        }
      }
      return result;
    })();
  }
  sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this41 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!privateKey) {
        throw new Error("Need to provide a private key for signing");
      }
      const signatureParams = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const algorithm = signatureParams.parameters.algorithm;
      if (!("name" in algorithm)) {
        throw new Error("Empty algorithm");
      }
      _this41.signatureAlgorithm = signatureParams.signatureAlgorithm;
      _this41.tbsResponseData.tbsView = new Uint8Array(_this41.tbsResponseData.toSchema(true).toBER());
      const signature = yield crypto.signWithPrivateKey(_this41.tbsResponseData.tbsView, privateKey, {
        algorithm
      });
      _this41.signature = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: signature
      });
    })();
  }
  verify(params = {}, crypto = getCrypto(true)) {
    var _this42 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let signerCert = null;
      let certIndex = -1;
      const trustedCerts = params.trustedCerts || [];
      if (!_this42.certs) {
        throw new Error("No certificates attached to the BasicOCSPResponse");
      }
      switch (true) {
        case _this42.tbsResponseData.responderID instanceof RelativeDistinguishedNames:
          for (const [index, certificate] of _this42.certs.entries()) {
            if (certificate.subject.isEqual(_this42.tbsResponseData.responderID)) {
              certIndex = index;
              break;
            }
          }
          break;
        case _this42.tbsResponseData.responderID instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString:
          for (const [index, cert] of _this42.certs.entries()) {
            const hash = yield crypto.digest({
              name: "sha-1"
            }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
            if (pvutils__WEBPACK_IMPORTED_MODULE_3__.isEqualBuffer(hash, _this42.tbsResponseData.responderID.valueBlock.valueHex)) {
              certIndex = index;
              break;
            }
          }
          break;
        default:
          throw new Error("Wrong value for responderID");
      }
      if (certIndex === -1) throw new Error("Correct certificate was not found in OCSP response");
      signerCert = _this42.certs[certIndex];
      const additionalCerts = [signerCert];
      for (const cert of _this42.certs) {
        const caCert = yield checkCA(cert, signerCert);
        if (caCert) {
          additionalCerts.push(caCert);
        }
      }
      const certChain = new CertificateChainValidationEngine({
        certs: additionalCerts,
        trustedCerts
      });
      const verificationResult = yield certChain.verify({}, crypto);
      if (!verificationResult.result) {
        throw new Error("Validation of signer's certificate failed");
      }
      return crypto.verifyWithPublicKey(_this42.tbsResponseData.tbsView, _this42.signature, _this42.certs[certIndex].subjectPublicKeyInfo, _this42.signatureAlgorithm);
    })();
  }
}
BasicOCSPResponse.CLASS_NAME = "BasicOCSPResponse";
const TBS$1 = "tbs";
const VERSION$6 = "version";
const SUBJECT = "subject";
const SPKI = "subjectPublicKeyInfo";
const ATTRIBUTES$1 = "attributes";
const SIGNATURE_ALGORITHM$2 = "signatureAlgorithm";
const SIGNATURE_VALUE = "signatureValue";
const CSR_INFO = "CertificationRequestInfo";
const CSR_INFO_VERSION = `${CSR_INFO}.version`;
const CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;
const CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;
const CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;
const CLEAR_PROPS$f = [CSR_INFO, CSR_INFO_VERSION, CSR_INFO_SUBJECT, CSR_INFO_SPKI, CSR_INFO_ATTRS, SIGNATURE_ALGORITHM$2, SIGNATURE_VALUE];
function CertificationRequestInfo(parameters = {}) {
  const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
  return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
    name: names.CertificationRequestInfo || CSR_INFO,
    value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      name: names.CertificationRequestInfoVersion || CSR_INFO_VERSION
    }), RelativeDistinguishedNames.schema(names.subject || {
      names: {
        blockName: CSR_INFO_SUBJECT
      }
    }), PublicKeyInfo.schema({
      names: {
        blockName: CSR_INFO_SPKI
      }
    }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        optional: true,
        name: names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS,
        value: Attribute.schema(names.attributes || {})
      })]
    })]
  });
}
class CertificationRequest extends PkiObject {
  get tbs() {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));
    this.subject = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));
    this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));
    if (ATTRIBUTES$1 in parameters) {
      this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));
    }
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));
    this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS$1:
        return EMPTY_BUFFER;
      case VERSION$6:
        return 0;
      case SUBJECT:
        return new RelativeDistinguishedNames();
      case SPKI:
        return new PublicKeyInfo();
      case ATTRIBUTES$1:
        return [];
      case SIGNATURE_ALGORITHM$2:
        return new AlgorithmIdentifier();
      case SIGNATURE_VALUE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [CertificationRequestInfo(names.certificationRequestInfo || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        name: names.signatureAlgorithm || SIGNATURE_ALGORITHM$2,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier(), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          optional: true
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signatureValue || SIGNATURE_VALUE
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$f);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, CertificationRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;
    this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;
    this.subject = new RelativeDistinguishedNames({
      schema: asn1.result[CSR_INFO_SUBJECT]
    });
    this.subjectPublicKeyInfo = new PublicKeyInfo({
      schema: asn1.result[CSR_INFO_SPKI]
    });
    if (CSR_INFO_ATTRS in asn1.result) {
      this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({
        schema: element
      }));
    }
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signatureValue = asn1.result.signatureValue;
  }
  encodeTBS() {
    const outputArray = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }), this.subject.toSchema(), this.subjectPublicKeyInfo.toSchema()];
    if (ATTRIBUTES$1 in this) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.attributes || [], o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (this.tbsView.byteLength === 0) {
        return CertificationRequest.schema();
      }
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.tbsView);
      AsnError.assert(asn1, "PKCS#10 Certificate Request");
      tbsSchema = asn1.result;
    } else {
      tbsSchema = this.encodeTBS();
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]
    });
  }
  toJSON() {
    const object = {
      tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.Convert.ToHex(this.tbsView),
      version: this.version,
      subject: this.subject.toJSON(),
      subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signatureValue: this.signatureValue.toJSON()
    };
    if (ATTRIBUTES$1 in this) {
      object.attributes = Array.from(this.attributes || [], o => o.toJSON());
    }
    return object;
  }
  sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this43 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!privateKey) {
        throw new Error("Need to provide a private key for signing");
      }
      const signatureParams = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const parameters = signatureParams.parameters;
      _this43.signatureAlgorithm = signatureParams.signatureAlgorithm;
      _this43.tbsView = new Uint8Array(_this43.encodeTBS().toBER());
      const signature = yield crypto.signWithPrivateKey(_this43.tbsView, privateKey, parameters);
      _this43.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: signature
      });
    })();
  }
  verify(crypto = getCrypto(true)) {
    var _this44 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return crypto.verifyWithPublicKey(_this44.tbsView, _this44.signatureValue, _this44.subjectPublicKeyInfo, _this44.signatureAlgorithm);
    })();
  }
  getPublicKey(parameters, crypto = getCrypto(true)) {
    var _this45 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return crypto.getPublicKey(_this45.subjectPublicKeyInfo, _this45.signatureAlgorithm, parameters);
    })();
  }
}
CertificationRequest.CLASS_NAME = "CertificationRequest";
const DIGEST_ALGORITHM$1 = "digestAlgorithm";
const DIGEST = "digest";
const CLEAR_PROPS$e = [DIGEST_ALGORITHM$1, DIGEST];
class DigestInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));
    this.digest = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case DIGEST_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case DIGEST:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case DIGEST_ALGORITHM$1:
        return AlgorithmIdentifier.compareWithDefault("algorithmId", memberValue.algorithmId) && "algorithmParams" in memberValue === false;
      case DIGEST:
        return memberValue.isEqual(DigestInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.digestAlgorithm || {
        names: {
          blockName: DIGEST_ALGORITHM$1
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.digest || DIGEST
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$e);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, DigestInfo.schema({
      names: {
        digestAlgorithm: {
          names: {
            blockName: DIGEST_ALGORITHM$1
          }
        },
        digest: DIGEST
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.digestAlgorithm
    });
    this.digest = asn1.result.digest;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.digestAlgorithm.toSchema(), this.digest]
    });
  }
  toJSON() {
    return {
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      digest: this.digest.toJSON()
    };
  }
}
DigestInfo.CLASS_NAME = "DigestInfo";
const E_CONTENT_TYPE = "eContentType";
const E_CONTENT = "eContent";
const CLEAR_PROPS$d = [E_CONTENT_TYPE, E_CONTENT];
class EncapsulatedContentInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.eContentType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));
    if (E_CONTENT in parameters) {
      this.eContent = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));
      if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {
        if (this.eContent.idBlock.isConstructed === false) {
          const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
            idBlock: {
              isConstructed: true
            },
            isConstructed: true
          });
          let offset = 0;
          const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;
          let length = viewHex.byteLength;
          while (length > 0) {
            const pieceView = new Uint8Array(viewHex, offset, offset + 65536 > viewHex.byteLength ? viewHex.byteLength - offset : 65536);
            const _array = new ArrayBuffer(pieceView.length);
            const _view = new Uint8Array(_array);
            for (let i = 0; i < _view.length; i++) {
              _view[i] = pieceView[i];
            }
            constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
              valueHex: _array
            }));
            length -= pieceView.length;
            offset += pieceView.length;
          }
          this.eContent = constrString;
        }
      }
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case E_CONTENT_TYPE:
        return EMPTY_STRING;
      case E_CONTENT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case E_CONTENT_TYPE:
        return memberValue === EMPTY_STRING;
      case E_CONTENT:
        {
          if (memberValue.idBlock.tagClass === 1 && memberValue.idBlock.tagNumber === 4) return memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT));
          return false;
        }
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.eContentType || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any({
          name: names.eContent || EMPTY_STRING
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$d);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, EncapsulatedContentInfo.schema({
      names: {
        eContentType: E_CONTENT_TYPE,
        eContent: E_CONTENT
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.eContentType = asn1.result.eContentType.valueBlock.toString();
    if (E_CONTENT in asn1.result) this.eContent = asn1.result.eContent;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.eContentType
    }));
    if (this.eContent) {
      if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          optional: true,
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [this.eContent]
        }));
      }
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      eContentType: this.eContentType
    };
    if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {
      res.eContent = this.eContent.toJSON();
    }
    return res;
  }
}
EncapsulatedContentInfo.CLASS_NAME = "EncapsulatedContentInfo";
class KeyBag extends PrivateKeyInfo {
  constructor(parameters = {}) {
    super(parameters);
  }
}
const MAC = "mac";
const MAC_SALT = "macSalt";
const ITERATIONS = "iterations";
const CLEAR_PROPS$c = [MAC, MAC_SALT, ITERATIONS];
class MacData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.mac = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));
    this.macSalt = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));
    if (ITERATIONS in parameters) {
      this.iterations = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case MAC:
        return new DigestInfo();
      case MAC_SALT:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case ITERATIONS:
        return 1;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case MAC:
        return DigestInfo.compareWithDefault("digestAlgorithm", memberValue.digestAlgorithm) && DigestInfo.compareWithDefault("digest", memberValue.digest);
      case MAC_SALT:
        return memberValue.isEqual(MacData.defaultValues(memberName));
      case ITERATIONS:
        return memberValue === MacData.defaultValues(memberName);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      optional: names.optional || true,
      value: [DigestInfo.schema(names.mac || {
        names: {
          blockName: MAC
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.macSalt || MAC_SALT
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        optional: true,
        name: names.iterations || ITERATIONS
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$c);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, MacData.schema({
      names: {
        mac: {
          names: {
            blockName: MAC
          }
        },
        macSalt: MAC_SALT,
        iterations: ITERATIONS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.mac = new DigestInfo({
      schema: asn1.result.mac
    });
    this.macSalt = asn1.result.macSalt;
    if (ITERATIONS in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec;
  }
  toSchema() {
    const outputArray = [this.mac.toSchema(), this.macSalt];
    if (this.iterations !== undefined) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        value: this.iterations
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      mac: this.mac.toJSON(),
      macSalt: this.macSalt.toJSON()
    };
    if (this.iterations !== undefined) {
      res.iterations = this.iterations;
    }
    return res;
  }
}
MacData.CLASS_NAME = "MacData";
const HASH_ALGORITHM = "hashAlgorithm";
const HASHED_MESSAGE = "hashedMessage";
const CLEAR_PROPS$b = [HASH_ALGORITHM, HASHED_MESSAGE];
class MessageImprint extends PkiObject {
  static create(hashAlgorithm, message, crypto = getCrypto(true)) {
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const hashAlgorithmOID = crypto.getOIDByAlgorithm({
        name: hashAlgorithm
      }, true, "hashAlgorithm");
      const hashedMessage = yield crypto.digest(hashAlgorithm, message);
      const res = new MessageImprint({
        hashAlgorithm: new AlgorithmIdentifier({
          algorithmId: hashAlgorithmOID,
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        }),
        hashedMessage: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
          valueHex: hashedMessage
        })
      });
      return res;
    })();
  }
  constructor(parameters = {}) {
    super();
    this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));
    this.hashedMessage = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case HASH_ALGORITHM:
        return new AlgorithmIdentifier();
      case HASHED_MESSAGE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case HASH_ALGORITHM:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case HASHED_MESSAGE:
        return memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.hashedMessage || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$b);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, MessageImprint.schema({
      names: {
        hashAlgorithm: {
          names: {
            blockName: HASH_ALGORITHM
          }
        },
        hashedMessage: HASHED_MESSAGE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.hashAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.hashAlgorithm
    });
    this.hashedMessage = asn1.result.hashedMessage;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [this.hashAlgorithm.toSchema(), this.hashedMessage]
    });
  }
  toJSON() {
    return {
      hashAlgorithm: this.hashAlgorithm.toJSON(),
      hashedMessage: this.hashedMessage.toJSON()
    };
  }
}
MessageImprint.CLASS_NAME = "MessageImprint";
const REQ_CERT = "reqCert";
const SINGLE_REQUEST_EXTENSIONS = "singleRequestExtensions";
const CLEAR_PROPS$a = [REQ_CERT, SINGLE_REQUEST_EXTENSIONS];
class Request extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.reqCert = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));
    if (SINGLE_REQUEST_EXTENSIONS in parameters) {
      this.singleRequestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case REQ_CERT:
        return new CertID();
      case SINGLE_REQUEST_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case REQ_CERT:
        return memberValue.isEqual(Request.defaultValues(memberName));
      case SINGLE_REQUEST_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [CertID.schema(names.reqCert || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [Extension.schema(names.extensions || {
          names: {
            blockName: names.singleRequestExtensions || EMPTY_STRING
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$a);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Request.schema({
      names: {
        reqCert: {
          names: {
            blockName: REQ_CERT
          }
        },
        extensions: {
          names: {
            blockName: SINGLE_REQUEST_EXTENSIONS
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.reqCert = new CertID({
      schema: asn1.result.reqCert
    });
    if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {
      this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({
        schema: element
      }));
    }
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.reqCert.toSchema());
    if (this.singleRequestExtensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: Array.from(this.singleRequestExtensions, o => o.toSchema())
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      reqCert: this.reqCert.toJSON()
    };
    if (this.singleRequestExtensions) {
      res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());
    }
    return res;
  }
}
Request.CLASS_NAME = "Request";
const TBS = "tbs";
const VERSION$5 = "version";
const REQUESTOR_NAME = "requestorName";
const REQUEST_LIST = "requestList";
const REQUEST_EXTENSIONS = "requestExtensions";
const TBS_REQUEST$1 = "TBSRequest";
const TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;
const TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;
const TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;
const TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;
const CLEAR_PROPS$9 = [TBS_REQUEST$1, TBS_REQUEST_VERSION, TBS_REQUEST_REQUESTOR_NAME, TBS_REQUEST_REQUESTS, TBS_REQUEST_REQUEST_EXTENSIONS];
class TBSRequest extends PkiObject {
  get tbs() {
    return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(this.tbsView);
  }
  set tbs(value) {
    this.tbsView = new Uint8Array(value);
  }
  constructor(parameters = {}) {
    super();
    this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));
    if (VERSION$5 in parameters) {
      this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));
    }
    if (REQUESTOR_NAME in parameters) {
      this.requestorName = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));
    }
    this.requestList = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));
    if (REQUEST_EXTENSIONS in parameters) {
      this.requestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS:
        return EMPTY_BUFFER;
      case VERSION$5:
        return 0;
      case REQUESTOR_NAME:
        return new GeneralName();
      case REQUEST_LIST:
      case REQUEST_EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS:
        return memberValue.byteLength === 0;
      case VERSION$5:
        return memberValue === TBSRequest.defaultValues(memberName);
      case REQUESTOR_NAME:
        return memberValue.type === GeneralName.defaultValues("type") && Object.keys(memberValue.value).length === 0;
      case REQUEST_LIST:
      case REQUEST_EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || TBS_REQUEST$1,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
          name: names.TBSRequestVersion || TBS_REQUEST_VERSION
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [GeneralName.schema(names.requestorName || {
          names: {
            blockName: TBS_REQUEST_REQUESTOR_NAME
          }
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        name: names.requestList || "TBSRequest.requestList",
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.requests || TBS_REQUEST_REQUESTS,
          value: Request.schema(names.requestNames || {})
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 2
        },
        value: [Extensions.schema(names.extensions || {
          names: {
            blockName: names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$9);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, TBSRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;
    if (TBS_REQUEST_VERSION in asn1.result) this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;
    if (TBS_REQUEST_REQUESTOR_NAME in asn1.result) this.requestorName = new GeneralName({
      schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME]
    });
    this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({
      schema: element
    }));
    if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result) this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({
      schema: element
    }));
  }
  toSchema(encodeFlag = false) {
    let tbsSchema;
    if (encodeFlag === false) {
      if (this.tbsView.byteLength === 0) return TBSRequest.schema();
      const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(this.tbsView);
      AsnError.assert(asn1, "TBS Request");
      if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence)) {
        throw new Error("ASN.1 result should be SEQUENCE");
      }
      tbsSchema = asn1.result;
    } else {
      const outputArray = [];
      if (this.version !== undefined) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 0
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
            value: this.version
          })]
        }));
      }
      if (this.requestorName) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 1
          },
          value: [this.requestorName.toSchema()]
        }));
      }
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: Array.from(this.requestList, o => o.toSchema())
      }));
      if (this.requestExtensions) {
        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
          idBlock: {
            tagClass: 3,
            tagNumber: 2
          },
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
            value: Array.from(this.requestExtensions, o => o.toSchema())
          })]
        }));
      }
      tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        value: outputArray
      });
    }
    return tbsSchema;
  }
  toJSON() {
    const res = {};
    if (this.version != undefined) res.version = this.version;
    if (this.requestorName) {
      res.requestorName = this.requestorName.toJSON();
    }
    res.requestList = Array.from(this.requestList, o => o.toJSON());
    if (this.requestExtensions) {
      res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());
    }
    return res;
  }
}
TBSRequest.CLASS_NAME = "TBSRequest";
const SIGNATURE_ALGORITHM$1 = "signatureAlgorithm";
const SIGNATURE$1 = "signature";
const CERTS = "certs";
class Signature extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));
    if (CERTS in parameters) {
      this.certs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case SIGNATURE_ALGORITHM$1:
        return new AlgorithmIdentifier();
      case SIGNATURE$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      case CERTS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case SIGNATURE_ALGORITHM$1:
        return memberValue.algorithmId === EMPTY_STRING && "algorithmParams" in memberValue === false;
      case SIGNATURE$1:
        return memberValue.isEqual(Signature.defaultValues(memberName));
      case CERTS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.signature || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
            name: names.certs || EMPTY_STRING,
            value: Certificate.schema({})
          })]
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [SIGNATURE_ALGORITHM$1, SIGNATURE$1, CERTS]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, Signature.schema({
      names: {
        signatureAlgorithm: {
          names: {
            blockName: SIGNATURE_ALGORITHM$1
          }
        },
        signature: SIGNATURE$1,
        certs: CERTS
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result.signatureAlgorithm
    });
    this.signature = asn1.result.signature;
    if (CERTS in asn1.result) this.certs = Array.from(asn1.result.certs, element => new Certificate({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.certs) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
          value: Array.from(this.certs, o => o.toSchema())
        })]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (this.certs) {
      res.certs = Array.from(this.certs, o => o.toJSON());
    }
    return res;
  }
}
Signature.CLASS_NAME = "Signature";
const TBS_REQUEST = "tbsRequest";
const OPTIONAL_SIGNATURE = "optionalSignature";
const CLEAR_PROPS$8 = [TBS_REQUEST, OPTIONAL_SIGNATURE];
class OCSPRequest extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.tbsRequest = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));
    if (OPTIONAL_SIGNATURE in parameters) {
      this.optionalSignature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TBS_REQUEST:
        return new TBSRequest();
      case OPTIONAL_SIGNATURE:
        return new Signature();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TBS_REQUEST:
        return TBSRequest.compareWithDefault("tbs", memberValue.tbs) && TBSRequest.compareWithDefault("version", memberValue.version) && TBSRequest.compareWithDefault("requestorName", memberValue.requestorName) && TBSRequest.compareWithDefault("requestList", memberValue.requestList) && TBSRequest.compareWithDefault("requestExtensions", memberValue.requestExtensions);
      case OPTIONAL_SIGNATURE:
        return Signature.compareWithDefault("signatureAlgorithm", memberValue.signatureAlgorithm) && Signature.compareWithDefault("signature", memberValue.signature) && Signature.compareWithDefault("certs", memberValue.certs);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || "OCSPRequest",
      value: [TBSRequest.schema(names.tbsRequest || {
        names: {
          blockName: TBS_REQUEST
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [Signature.schema(names.optionalSignature || {
          names: {
            blockName: OPTIONAL_SIGNATURE
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$8);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OCSPRequest.schema());
    AsnError.assertSchema(asn1, this.className);
    this.tbsRequest = new TBSRequest({
      schema: asn1.result.tbsRequest
    });
    if (OPTIONAL_SIGNATURE in asn1.result) this.optionalSignature = new Signature({
      schema: asn1.result.optionalSignature
    });
  }
  toSchema(encodeFlag = false) {
    const outputArray = [];
    outputArray.push(this.tbsRequest.toSchema(encodeFlag));
    if (this.optionalSignature) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: 0
      },
      value: [this.optionalSignature.toSchema()]
    }));
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      tbsRequest: this.tbsRequest.toJSON()
    };
    if (this.optionalSignature) {
      res.optionalSignature = this.optionalSignature.toJSON();
    }
    return res;
  }
  createForCertificate(certificate, parameters, crypto = getCrypto(true)) {
    var _this46 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const certID = new CertID();
      yield certID.createForCertificate(certificate, parameters, crypto);
      _this46.tbsRequest.requestList.push(new Request({
        reqCert: certID
      }));
    })();
  }
  sign(privateKey, hashAlgorithm = "SHA-1", crypto = getCrypto(true)) {
    var _this47 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ParameterError.assertEmpty(privateKey, "privateKey", "OCSPRequest.sign method");
      if (!_this47.optionalSignature) {
        throw new Error("Need to create \"optionalSignature\" field before signing");
      }
      const signatureParams = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const parameters = signatureParams.parameters;
      _this47.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;
      const tbs = _this47.tbsRequest.toSchema(true).toBER(false);
      const signature = yield crypto.signWithPrivateKey(tbs, privateKey, parameters);
      _this47.optionalSignature.signature = new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        valueHex: signature
      });
    })();
  }
  verify() {}
}
OCSPRequest.CLASS_NAME = "OCSPRequest";
const RESPONSE_TYPE = "responseType";
const RESPONSE = "response";
const CLEAR_PROPS$7 = [RESPONSE_TYPE, RESPONSE];
class ResponseBytes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.responseType = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));
    this.response = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RESPONSE_TYPE:
        return EMPTY_STRING;
      case RESPONSE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RESPONSE_TYPE:
        return memberValue === EMPTY_STRING;
      case RESPONSE:
        return memberValue.isEqual(ResponseBytes.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.responseType || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.response || EMPTY_STRING
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$7);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, ResponseBytes.schema({
      names: {
        responseType: RESPONSE_TYPE,
        response: RESPONSE
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.responseType = asn1.result.responseType.valueBlock.toString();
    this.response = asn1.result.response;
  }
  toSchema() {
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        value: this.responseType
      }), this.response]
    });
  }
  toJSON() {
    return {
      responseType: this.responseType,
      response: this.response.toJSON()
    };
  }
}
ResponseBytes.CLASS_NAME = "ResponseBytes";
const RESPONSE_STATUS = "responseStatus";
const RESPONSE_BYTES = "responseBytes";
class OCSPResponse extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.responseStatus = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));
    if (RESPONSE_BYTES in parameters) {
      this.responseBytes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case RESPONSE_STATUS:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Enumerated();
      case RESPONSE_BYTES:
        return new ResponseBytes();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case RESPONSE_STATUS:
        return memberValue.isEqual(OCSPResponse.defaultValues(memberName));
      case RESPONSE_BYTES:
        return ResponseBytes.compareWithDefault("responseType", memberValue.responseType) && ResponseBytes.compareWithDefault("response", memberValue.response);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || "OCSPResponse",
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Enumerated({
        name: names.responseStatus || RESPONSE_STATUS
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [ResponseBytes.schema(names.responseBytes || {
          names: {
            blockName: RESPONSE_BYTES
          }
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, [RESPONSE_STATUS, RESPONSE_BYTES]);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, OCSPResponse.schema());
    AsnError.assertSchema(asn1, this.className);
    this.responseStatus = asn1.result.responseStatus;
    if (RESPONSE_BYTES in asn1.result) this.responseBytes = new ResponseBytes({
      schema: asn1.result.responseBytes
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.responseStatus);
    if (this.responseBytes) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.responseBytes.toSchema()]
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      responseStatus: this.responseStatus.toJSON()
    };
    if (this.responseBytes) {
      res.responseBytes = this.responseBytes.toJSON();
    }
    return res;
  }
  getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {
    var _this48 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let basicResponse;
      const result = {
        isForCertificate: false,
        status: 2
      };
      if (!_this48.responseBytes) return result;
      if (_this48.responseBytes.responseType !== id_PKIX_OCSP_Basic) return result;
      try {
        const asn1Basic = asn1js__WEBPACK_IMPORTED_MODULE_1__.fromBER(_this48.responseBytes.response.valueBlock.valueHexView);
        AsnError.assert(asn1Basic, "Basic OCSP response");
        basicResponse = new BasicOCSPResponse({
          schema: asn1Basic.result
        });
      } catch (ex) {
        return result;
      }
      return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);
    })();
  }
  sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {
    var _this49 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;
      if (_this49.responseBytes && _this49.responseBytes.responseType === id_PKIX_OCSP_Basic) {
        const basicResponse = BasicOCSPResponse.fromBER(_this49.responseBytes.response.valueBlock.valueHexView);
        return basicResponse.sign(privateKey, hashAlgorithm, crypto);
      }
      throw new Error(`Unknown ResponseBytes type: ${((_a = _this49.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || "Unknown"}`);
    })();
  }
  verify(issuerCertificate = null, crypto = getCrypto(true)) {
    var _this50 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;
      if (RESPONSE_BYTES in _this50 === false) throw new Error("Empty ResponseBytes field");
      if (_this50.responseBytes && _this50.responseBytes.responseType === id_PKIX_OCSP_Basic) {
        const basicResponse = BasicOCSPResponse.fromBER(_this50.responseBytes.response.valueBlock.valueHexView);
        if (issuerCertificate !== null) {
          if (!basicResponse.certs) {
            basicResponse.certs = [];
          }
          basicResponse.certs.push(issuerCertificate);
        }
        return basicResponse.verify({}, crypto);
      }
      throw new Error(`Unknown ResponseBytes type: ${((_a = _this50.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || "Unknown"}`);
    })();
  }
}
OCSPResponse.CLASS_NAME = "OCSPResponse";
const TYPE = "type";
const ATTRIBUTES = "attributes";
const ENCODED_VALUE = "encodedValue";
const CLEAR_PROPS$6 = [ATTRIBUTES];
class SignedAndUnsignedAttributes extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.type = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));
    this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));
    this.encodedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case TYPE:
        return -1;
      case ATTRIBUTES:
        return [];
      case ENCODED_VALUE:
        return EMPTY_BUFFER;
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case TYPE:
        return memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE);
      case ATTRIBUTES:
        return memberValue.length === 0;
      case ENCODED_VALUE:
        return memberValue.byteLength === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      name: names.blockName || EMPTY_STRING,
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: names.tagNumber || 0
      },
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
        name: names.attributes || EMPTY_STRING,
        value: Attribute.schema()
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$6);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({
      names: {
        tagNumber: this.type,
        attributes: ATTRIBUTES
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.type = asn1.result.idBlock.tagNumber;
    this.encodedValue = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);
    const encodedView = new Uint8Array(this.encodedValue);
    encodedView[0] = 0x31;
    if (ATTRIBUTES in asn1.result === false) {
      if (this.type === 0) throw new Error("Wrong structure of SignedUnsignedAttributes");else return;
    }
    this.attributes = Array.from(asn1.result.attributes, element => new Attribute({
      schema: element
    }));
  }
  toSchema() {
    if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
      optional: true,
      idBlock: {
        tagClass: 3,
        tagNumber: this.type
      },
      value: Array.from(this.attributes, o => o.toSchema())
    });
  }
  toJSON() {
    if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes)) throw new Error("Incorrectly initialized \"SignedAndUnsignedAttributes\" class");
    return {
      type: this.type,
      attributes: Array.from(this.attributes, o => o.toJSON())
    };
  }
}
SignedAndUnsignedAttributes.CLASS_NAME = "SignedAndUnsignedAttributes";
const VERSION$4 = "version";
const SID = "sid";
const DIGEST_ALGORITHM = "digestAlgorithm";
const SIGNED_ATTRS = "signedAttrs";
const SIGNATURE_ALGORITHM = "signatureAlgorithm";
const SIGNATURE = "signature";
const UNSIGNED_ATTRS = "unsignedAttrs";
const SIGNER_INFO = "SignerInfo";
const SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;
const SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;
const SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;
const SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;
const SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;
const SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;
const SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;
const CLEAR_PROPS$5 = [SIGNER_INFO_VERSION, SIGNER_INFO_SID, SIGNER_INFO_DIGEST_ALGORITHM, SIGNER_INFO_SIGNED_ATTRS, SIGNER_INFO_SIGNATURE_ALGORITHM, SIGNER_INFO_SIGNATURE, SIGNER_INFO_UNSIGNED_ATTRS];
class SignerInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));
    this.sid = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));
    this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));
    if (SIGNED_ATTRS in parameters) {
      this.signedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));
    }
    this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
    this.signature = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));
    if (UNSIGNED_ATTRS in parameters) {
      this.unsignedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$4:
        return 0;
      case SID:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Any();
      case DIGEST_ALGORITHM:
        return new AlgorithmIdentifier();
      case SIGNED_ATTRS:
        return new SignedAndUnsignedAttributes({
          type: 0
        });
      case SIGNATURE_ALGORITHM:
        return new AlgorithmIdentifier();
      case SIGNATURE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString();
      case UNSIGNED_ATTRS:
        return new SignedAndUnsignedAttributes({
          type: 1
        });
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$4:
        return SignerInfo.defaultValues(VERSION$4) === memberValue;
      case SID:
        return memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      case DIGEST_ALGORITHM:
        if (memberValue instanceof AlgorithmIdentifier === false) return false;
        return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));
      case SIGNED_ATTRS:
        return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
      case SIGNATURE_ALGORITHM:
        if (memberValue instanceof AlgorithmIdentifier === false) return false;
        return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));
      case SIGNATURE:
      case UNSIGNED_ATTRS:
        return SignedAndUnsignedAttributes.compareWithDefault("type", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault("attributes", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault("encodedValue", memberValue.encodedValue);
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: SIGNER_INFO,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || SIGNER_INFO_VERSION
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
        value: [IssuerAndSerialNumber.schema(names.sidSchema || {
          names: {
            blockName: SIGNER_INFO_SID
          }
        }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Choice({
          value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
            optional: true,
            name: names.sid || SIGNER_INFO_SID,
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            },
            value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString()]
          }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Primitive({
            optional: true,
            name: names.sid || SIGNER_INFO_SID,
            idBlock: {
              tagClass: 3,
              tagNumber: 0
            }
          })]
        })]
      }), AlgorithmIdentifier.schema(names.digestAlgorithm || {
        names: {
          blockName: SIGNER_INFO_DIGEST_ALGORITHM
        }
      }), SignedAndUnsignedAttributes.schema(names.signedAttrs || {
        names: {
          blockName: SIGNER_INFO_SIGNED_ATTRS,
          tagNumber: 0
        }
      }), AlgorithmIdentifier.schema(names.signatureAlgorithm || {
        names: {
          blockName: SIGNER_INFO_SIGNATURE_ALGORITHM
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        name: names.signature || SIGNER_INFO_SIGNATURE
      }), SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {
        names: {
          blockName: SIGNER_INFO_UNSIGNED_ATTRS,
          tagNumber: 1
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$5);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SignerInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;
    const currentSid = asn1.result[SIGNER_INFO_SID];
    if (currentSid.idBlock.tagClass === 1) this.sid = new IssuerAndSerialNumber({
      schema: currentSid
    });else this.sid = currentSid;
    this.digestAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM]
    });
    if (SIGNER_INFO_SIGNED_ATTRS in asn1.result) this.signedAttrs = new SignedAndUnsignedAttributes({
      type: 0,
      schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS]
    });
    this.signatureAlgorithm = new AlgorithmIdentifier({
      schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM]
    });
    this.signature = asn1.result[SIGNER_INFO_SIGNATURE];
    if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result) this.unsignedAttrs = new SignedAndUnsignedAttributes({
      type: 1,
      schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS]
    });
  }
  toSchema() {
    if (SignerInfo.compareWithDefault(SID, this.sid)) throw new Error("Incorrectly initialized \"SignerInfo\" class");
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    if (this.sid instanceof IssuerAndSerialNumber) outputArray.push(this.sid.toSchema());else outputArray.push(this.sid);
    outputArray.push(this.digestAlgorithm.toSchema());
    if (this.signedAttrs) {
      if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());
    }
    outputArray.push(this.signatureAlgorithm.toSchema());
    outputArray.push(this.signature);
    if (this.unsignedAttrs) {
      if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    if (SignerInfo.compareWithDefault(SID, this.sid)) {
      throw new Error("Incorrectly initialized \"SignerInfo\" class");
    }
    const res = {
      version: this.version,
      digestAlgorithm: this.digestAlgorithm.toJSON(),
      signatureAlgorithm: this.signatureAlgorithm.toJSON(),
      signature: this.signature.toJSON()
    };
    if (!(this.sid instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any)) res.sid = this.sid.toJSON();
    if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {
      res.signedAttrs = this.signedAttrs.toJSON();
    }
    if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {
      res.unsignedAttrs = this.unsignedAttrs.toJSON();
    }
    return res;
  }
}
SignerInfo.CLASS_NAME = "SignerInfo";
const VERSION$3 = "version";
const POLICY = "policy";
const MESSAGE_IMPRINT$1 = "messageImprint";
const SERIAL_NUMBER = "serialNumber";
const GEN_TIME = "genTime";
const ORDERING = "ordering";
const NONCE$1 = "nonce";
const ACCURACY = "accuracy";
const TSA = "tsa";
const EXTENSIONS$1 = "extensions";
const TST_INFO = "TSTInfo";
const TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;
const TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;
const TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;
const TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;
const TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;
const TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;
const TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;
const TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;
const TST_INFO_TSA = `${TST_INFO}.${TSA}`;
const TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;
const CLEAR_PROPS$4 = [TST_INFO_VERSION, TST_INFO_POLICY, TST_INFO_MESSAGE_IMPRINT, TST_INFO_SERIAL_NUMBER, TST_INFO_GEN_TIME, TST_INFO_ACCURACY, TST_INFO_ORDERING, TST_INFO_NONCE, TST_INFO_TSA, TST_INFO_EXTENSIONS];
class TSTInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));
    this.policy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));
    this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));
    this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));
    this.genTime = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));
    if (ACCURACY in parameters) {
      this.accuracy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));
    }
    if (ORDERING in parameters) {
      this.ordering = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));
    }
    if (NONCE$1 in parameters) {
      this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));
    }
    if (TSA in parameters) {
      this.tsa = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));
    }
    if (EXTENSIONS$1 in parameters) {
      this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$3:
        return 0;
      case POLICY:
        return EMPTY_STRING;
      case MESSAGE_IMPRINT$1:
        return new MessageImprint();
      case SERIAL_NUMBER:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case GEN_TIME:
        return new Date(0, 0, 0);
      case ACCURACY:
        return new Accuracy();
      case ORDERING:
        return false;
      case NONCE$1:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case TSA:
        return new GeneralName();
      case EXTENSIONS$1:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$3:
      case POLICY:
      case GEN_TIME:
      case ORDERING:
        return memberValue === TSTInfo.defaultValues(ORDERING);
      case MESSAGE_IMPRINT$1:
        return MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage);
      case SERIAL_NUMBER:
      case NONCE$1:
        return memberValue.isEqual(TSTInfo.defaultValues(NONCE$1));
      case ACCURACY:
        return Accuracy.compareWithDefault(SECONDS, memberValue.seconds) && Accuracy.compareWithDefault(MILLIS, memberValue.millis) && Accuracy.compareWithDefault(MICROS, memberValue.micros);
      case TSA:
        return GeneralName.compareWithDefault(TYPE$4, memberValue.type) && GeneralName.compareWithDefault(VALUE$5, memberValue.value);
      case EXTENSIONS$1:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || TST_INFO,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || TST_INFO_VERSION
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.policy || TST_INFO_POLICY
      }), MessageImprint.schema(names.messageImprint || {
        names: {
          blockName: TST_INFO_MESSAGE_IMPRINT
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.serialNumber || TST_INFO_SERIAL_NUMBER
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
        name: names.genTime || TST_INFO_GEN_TIME
      }), Accuracy.schema(names.accuracy || {
        names: {
          blockName: TST_INFO_ACCURACY
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
        name: names.ordering || TST_INFO_ORDERING,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.nonce || TST_INFO_NONCE,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [GeneralName.schema(names.tsa || {
          names: {
            blockName: TST_INFO_TSA
          }
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.extensions || TST_INFO_EXTENSIONS,
          value: Extension.schema(names.extension || {})
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$4);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, TSTInfo.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;
    this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();
    this.messageImprint = new MessageImprint({
      schema: asn1.result[TST_INFO_MESSAGE_IMPRINT]
    });
    this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];
    this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();
    if (TST_INFO_ACCURACY in asn1.result) this.accuracy = new Accuracy({
      schema: asn1.result[TST_INFO_ACCURACY]
    });
    if (TST_INFO_ORDERING in asn1.result) this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;
    if (TST_INFO_NONCE in asn1.result) this.nonce = asn1.result[TST_INFO_NONCE];
    if (TST_INFO_TSA in asn1.result) this.tsa = new GeneralName({
      schema: asn1.result[TST_INFO_TSA]
    });
    if (TST_INFO_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.policy
    }));
    outputArray.push(this.messageImprint.toSchema());
    outputArray.push(this.serialNumber);
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.GeneralizedTime({
      valueDate: this.genTime
    }));
    if (this.accuracy) outputArray.push(this.accuracy.toSchema());
    if (this.ordering !== undefined) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
      value: this.ordering
    }));
    if (this.nonce) outputArray.push(this.nonce);
    if (this.tsa) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [this.tsa.toSchema()]
      }));
    }
    if (this.extensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.extensions, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      policy: this.policy,
      messageImprint: this.messageImprint.toJSON(),
      serialNumber: this.serialNumber.toJSON(),
      genTime: this.genTime
    };
    if (this.accuracy) res.accuracy = this.accuracy.toJSON();
    if (this.ordering !== undefined) res.ordering = this.ordering;
    if (this.nonce) res.nonce = this.nonce.toJSON();
    if (this.tsa) res.tsa = this.tsa.toJSON();
    if (this.extensions) res.extensions = Array.from(this.extensions, o => o.toJSON());
    return res;
  }
  verify(params, crypto = getCrypto(true)) {
    var _this51 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!params.data) {
        throw new Error("\"data\" is a mandatory attribute for TST_INFO verification");
      }
      const data = params.data;
      if (params.notBefore) {
        if (_this51.genTime < params.notBefore) throw new Error("Generation time for TSTInfo object is less than notBefore value");
      }
      if (params.notAfter) {
        if (_this51.genTime > params.notAfter) throw new Error("Generation time for TSTInfo object is more than notAfter value");
      }
      const shaAlgorithm = crypto.getAlgorithmByOID(_this51.messageImprint.hashAlgorithm.algorithmId, true, "MessageImprint.hashAlgorithm");
      const hash = yield crypto.digest(shaAlgorithm.name, new Uint8Array(data));
      return pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.isEqual(hash, _this51.messageImprint.hashedMessage.valueBlock.valueHexView);
    })();
  }
}
TSTInfo.CLASS_NAME = "TSTInfo";
const VERSION$2 = "version";
const DIGEST_ALGORITHMS = "digestAlgorithms";
const ENCAP_CONTENT_INFO = "encapContentInfo";
const CERTIFICATES = "certificates";
const CRLS = "crls";
const SIGNER_INFOS = "signerInfos";
const OCSPS = "ocsps";
const SIGNED_DATA = "SignedData";
const SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;
const SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;
const SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;
const SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;
const SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;
const SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;
const CLEAR_PROPS$3 = [SIGNED_DATA_VERSION, SIGNED_DATA_DIGEST_ALGORITHMS, SIGNED_DATA_ENCAP_CONTENT_INFO, SIGNED_DATA_CERTIFICATES, SIGNED_DATA_CRLS, SIGNED_DATA_SIGNER_INFOS];
class SignedDataVerifyError extends Error {
  constructor({
    message,
    code = 0,
    date = new Date(),
    signatureVerified = null,
    signerCertificate = null,
    signerCertificateVerified = null,
    timestampSerial = null,
    certificatePath = []
  }) {
    super(message);
    this.name = "SignedDataVerifyError";
    this.date = date;
    this.code = code;
    this.timestampSerial = timestampSerial;
    this.signatureVerified = signatureVerified;
    this.signerCertificate = signerCertificate;
    this.signerCertificateVerified = signerCertificateVerified;
    this.certificatePath = certificatePath;
  }
}
class SignedData extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));
    this.digestAlgorithms = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));
    this.encapContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));
    if (CERTIFICATES in parameters) {
      this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));
    }
    if (CRLS in parameters) {
      this.crls = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));
    }
    if (OCSPS in parameters) {
      this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));
    }
    this.signerInfos = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$2:
        return 0;
      case DIGEST_ALGORITHMS:
        return [];
      case ENCAP_CONTENT_INFO:
        return new EncapsulatedContentInfo();
      case CERTIFICATES:
        return [];
      case CRLS:
        return [];
      case OCSPS:
        return [];
      case SIGNER_INFOS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$2:
        return memberValue === SignedData.defaultValues(VERSION$2);
      case ENCAP_CONTENT_INFO:
        return EncapsulatedContentInfo.compareWithDefault("eContentType", memberValue.eContentType) && EncapsulatedContentInfo.compareWithDefault("eContent", memberValue.eContent);
      case DIGEST_ALGORITHMS:
      case CERTIFICATES:
      case CRLS:
      case OCSPS:
      case SIGNER_INFOS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    if (names.optional === undefined) {
      names.optional = false;
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || SIGNED_DATA,
      optional: names.optional,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || SIGNED_DATA_VERSION
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS,
          value: AlgorithmIdentifier.schema()
        })]
      }), EncapsulatedContentInfo.schema(names.encapContentInfo || {
        names: {
          blockName: SIGNED_DATA_ENCAP_CONTENT_INFO
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        name: names.certificates || SIGNED_DATA_CERTIFICATES,
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: CertificateSet.schema().valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: RevocationInfoChoices.schema(names.crls || {
          names: {
            crls: SIGNED_DATA_CRLS
          }
        }).valueBlock.value
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.signerInfos || SIGNED_DATA_SIGNER_INFOS,
          value: SignerInfo.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$3);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, SignedData.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;
    if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result) this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({
      schema: algorithm
    }));
    this.encapContentInfo = new EncapsulatedContentInfo({
      schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO]
    });
    if (SIGNED_DATA_CERTIFICATES in asn1.result) {
      const certificateSet = new CertificateSet({
        schema: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
          value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value
        })
      });
      this.certificates = certificateSet.certificates.slice(0);
    }
    if (SIGNED_DATA_CRLS in asn1.result) {
      this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], crl => {
        if (crl.idBlock.tagClass === 1) return new CertificateRevocationList({
          schema: crl
        });
        crl.idBlock.tagClass = 1;
        crl.idBlock.tagNumber = 16;
        return new OtherRevocationInfoFormat({
          schema: crl
        });
      });
    }
    if (SIGNED_DATA_SIGNER_INFOS in asn1.result) this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({
      schema: signerInfoSchema
    }));
  }
  toSchema(encodeFlag = false) {
    const outputArray = [];
    if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat) || this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat)) {
      this.version = 5;
    } else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {
      this.version = 4;
    } else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1) || this.signerInfos.some(o => o.version === 3) || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {
      this.version = 3;
    } else {
      this.version = 1;
    }
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())
    }));
    outputArray.push(this.encapContentInfo.toSchema());
    if (this.certificates) {
      const certificateSet = new CertificateSet({
        certificates: this.certificates
      });
      const certificateSetSchema = certificateSet.toSchema();
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: certificateSetSchema.valueBlock.value
      }));
    }
    if (this.crls) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 1
        },
        value: Array.from(this.crls, crl => {
          if (crl instanceof OtherRevocationInfoFormat) {
            const crlSchema = crl.toSchema();
            crlSchema.idBlock.tagClass = 3;
            crlSchema.idBlock.tagNumber = 1;
            return crlSchema;
          }
          return crl.toSchema(encodeFlag);
        })
      }));
    }
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Set({
      value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())
    }));
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),
      encapContentInfo: this.encapContentInfo.toJSON(),
      signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON())
    };
    if (this.certificates) {
      res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());
    }
    if (this.crls) {
      res.crls = Array.from(this.crls, crl => crl.toJSON());
    }
    return res;
  }
  verify({
    signer = -1,
    data = EMPTY_BUFFER,
    trustedCerts = [],
    checkDate = new Date(),
    checkChain = false,
    passedWhenNotRevValues = false,
    extendedMode = false,
    findOrigin = null,
    findIssuer = null
  } = {}, crypto = getCrypto(true)) {
    var _this52 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let signerCert = null;
      let timestampSerial = null;
      try {
        let messageDigestValue = EMPTY_BUFFER;
        let shaAlgorithm = EMPTY_STRING;
        let certificatePath = [];
        const signerInfo = _this52.signerInfos[signer];
        if (!signerInfo) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 1,
            message: "Unable to get signer by supplied index"
          });
        }
        if (!_this52.certificates) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 2,
            message: "No certificates attached to this signed data"
          });
        }
        if (signerInfo.sid instanceof IssuerAndSerialNumber) {
          for (const certificate of _this52.certificates) {
            if (!(certificate instanceof Certificate)) continue;
            if (certificate.issuer.isEqual(signerInfo.sid.issuer) && certificate.serialNumber.isEqual(signerInfo.sid.serialNumber)) {
              signerCert = certificate;
              break;
            }
          }
        } else {
          const sid = signerInfo.sid;
          const keyId = sid.idBlock.isConstructed ? sid.valueBlock.value[0].valueBlock.valueHex : sid.valueBlock.valueHex;
          for (const certificate of _this52.certificates) {
            if (!(certificate instanceof Certificate)) {
              continue;
            }
            const digest = yield crypto.digest({
              name: "sha-1"
            }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);
            if (pvutils__WEBPACK_IMPORTED_MODULE_3__.isEqualBuffer(digest, keyId)) {
              signerCert = certificate;
              break;
            }
          }
        }
        if (!signerCert) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 3,
            message: "Unable to find signer certificate"
          });
        }
        if (_this52.encapContentInfo.eContentType === id_eContentType_TSTInfo) {
          if (!_this52.encapContentInfo.eContent) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 15,
              message: "Error during verification: TSTInfo eContent is empty",
              signatureVerified: null,
              signerCertificate: signerCert,
              timestampSerial,
              signerCertificateVerified: true
            });
          }
          let tstInfo;
          try {
            tstInfo = TSTInfo.fromBER(_this52.encapContentInfo.eContent.valueBlock.valueHexView);
          } catch (ex) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 15,
              message: "Error during verification: TSTInfo wrong ASN.1 schema ",
              signatureVerified: null,
              signerCertificate: signerCert,
              timestampSerial,
              signerCertificateVerified: true
            });
          }
          checkDate = tstInfo.genTime;
          timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();
          if (data.byteLength === 0) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 4,
              message: "Missed detached data input array"
            });
          }
          if (!(yield tstInfo.verify({
            data
          }, crypto))) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 15,
              message: "Error during verification: TSTInfo verification is failed",
              signatureVerified: false,
              signerCertificate: signerCert,
              timestampSerial,
              signerCertificateVerified: true
            });
          }
        }
        if (checkChain) {
          const certs = _this52.certificates.filter(certificate => certificate instanceof Certificate && !!checkCA(certificate, signerCert));
          const chainParams = {
            checkDate,
            certs,
            trustedCerts
          };
          if (findIssuer) {
            chainParams.findIssuer = findIssuer;
          }
          if (findOrigin) {
            chainParams.findOrigin = findOrigin;
          }
          const chainEngine = new CertificateChainValidationEngine(chainParams);
          chainEngine.certs.push(signerCert);
          if (_this52.crls) {
            for (const crl of _this52.crls) {
              if ("thisUpdate" in crl) chainEngine.crls.push(crl);else {
                if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic) chainEngine.ocsps.push(new BasicOCSPResponse({
                  schema: crl.otherRevInfo
                }));
              }
            }
          }
          if (_this52.ocsps) {
            chainEngine.ocsps.push(..._this52.ocsps);
          }
          const verificationResult = yield chainEngine.verify({
            passedWhenNotRevValues
          }, crypto).catch(e => {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 5,
              message: `Validation of signer's certificate failed with error: ${e instanceof Object ? e.resultMessage : e}`,
              signerCertificate: signerCert,
              signerCertificateVerified: false
            });
          });
          if (verificationResult.certificatePath) {
            certificatePath = verificationResult.certificatePath;
          }
          if (!verificationResult.result) throw new SignedDataVerifyError({
            date: checkDate,
            code: 5,
            message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,
            signerCertificate: signerCert,
            signerCertificateVerified: false
          });
        }
        const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);
        if (!("name" in signerInfoHashAlgorithm)) {
          throw new SignedDataVerifyError({
            date: checkDate,
            code: 7,
            message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,
            signerCertificate: signerCert,
            signerCertificateVerified: true
          });
        }
        shaAlgorithm = signerInfoHashAlgorithm.name;
        const eContent = _this52.encapContentInfo.eContent;
        if (eContent) {
          if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
            data = eContent.getValue();
          } else data = eContent.valueBlock.valueBeforeDecodeView;
        } else {
          if (data.byteLength === 0) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 8,
              message: "Missed detached data input array",
              signerCertificate: signerCert,
              signerCertificateVerified: true
            });
          }
        }
        if (signerInfo.signedAttrs) {
          let foundContentType = false;
          let foundMessageDigest = false;
          for (const attribute of signerInfo.signedAttrs.attributes) {
            if (attribute.type === "1.2.840.113549.1.9.3") foundContentType = true;
            if (attribute.type === "1.2.840.113549.1.9.4") {
              foundMessageDigest = true;
              messageDigestValue = attribute.values[0].valueBlock.valueHex;
            }
            if (foundContentType && foundMessageDigest) break;
          }
          if (foundContentType === false) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 9,
              message: "Attribute \"content-type\" is a mandatory attribute for \"signed attributes\"",
              signerCertificate: signerCert,
              signerCertificateVerified: true
            });
          }
          if (foundMessageDigest === false) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 10,
              message: "Attribute \"message-digest\" is a mandatory attribute for \"signed attributes\"",
              signatureVerified: null,
              signerCertificate: signerCert,
              signerCertificateVerified: true
            });
          }
        }
        if (signerInfo.signedAttrs) {
          const messageDigest = yield crypto.digest(shaAlgorithm, new Uint8Array(data));
          if (!pvutils__WEBPACK_IMPORTED_MODULE_3__.isEqualBuffer(messageDigest, messageDigestValue)) {
            throw new SignedDataVerifyError({
              date: checkDate,
              code: 15,
              message: "Error during verification: Message digest doesn't match",
              signatureVerified: null,
              signerCertificate: signerCert,
              timestampSerial,
              signerCertificateVerified: true
            });
          }
          data = signerInfo.signedAttrs.encodedValue;
        }
        const verifyResult = signerInfo.signatureAlgorithm.algorithmId === "1.2.840.113549.1.1.1" ? yield crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm, shaAlgorithm) : yield crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm);
        if (extendedMode) {
          return {
            date: checkDate,
            code: 14,
            message: EMPTY_STRING,
            signatureVerified: verifyResult,
            signerCertificate: signerCert,
            timestampSerial,
            signerCertificateVerified: true,
            certificatePath
          };
        } else {
          return verifyResult;
        }
      } catch (e) {
        if (e instanceof SignedDataVerifyError) {
          throw e;
        }
        throw new SignedDataVerifyError({
          date: checkDate,
          code: 15,
          message: `Error during verification: ${e instanceof Error ? e.message : e}`,
          signatureVerified: null,
          signerCertificate: signerCert,
          timestampSerial,
          signerCertificateVerified: true
        });
      }
    })();
  }
  sign(privateKey, signerIndex, hashAlgorithm = "SHA-1", data = EMPTY_BUFFER, crypto = getCrypto(true)) {
    var _this53 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;
      if (!privateKey) throw new Error("Need to provide a private key for signing");
      const signerInfo = _this53.signerInfos[signerIndex];
      if (!signerInfo) {
        throw new RangeError("SignerInfo index is out of range");
      }
      if (!((_a = signerInfo.signedAttrs) === null || _a === void 0 ? void 0 : _a.attributes.length) && "hash" in privateKey.algorithm && "hash" in privateKey.algorithm && privateKey.algorithm.hash) {
        hashAlgorithm = privateKey.algorithm.hash.name;
      }
      const hashAlgorithmOID = crypto.getOIDByAlgorithm({
        name: hashAlgorithm
      }, true, "hashAlgorithm");
      if (_this53.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID).length === 0) {
        _this53.digestAlgorithms.push(new AlgorithmIdentifier({
          algorithmId: hashAlgorithmOID,
          algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
        }));
      }
      signerInfo.digestAlgorithm = new AlgorithmIdentifier({
        algorithmId: hashAlgorithmOID,
        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Null()
      });
      const signatureParams = yield crypto.getSignatureParameters(privateKey, hashAlgorithm);
      const parameters = signatureParams.parameters;
      signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;
      if (signerInfo.signedAttrs) {
        if (signerInfo.signedAttrs.encodedValue.byteLength !== 0) data = signerInfo.signedAttrs.encodedValue;else {
          data = signerInfo.signedAttrs.toSchema().toBER();
          const view = pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toUint8Array(data);
          view[0] = 0x31;
        }
      } else {
        const eContent = _this53.encapContentInfo.eContent;
        if (eContent) {
          if (eContent.idBlock.tagClass === 1 && eContent.idBlock.tagNumber === 4) {
            data = eContent.getValue();
          } else data = eContent.valueBlock.valueBeforeDecodeView;
        } else {
          if (data.byteLength === 0) throw new Error("Missed detached data input array");
        }
      }
      const signature = yield crypto.signWithPrivateKey(data, privateKey, parameters);
      signerInfo.signature = new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
        valueHex: signature
      });
    })();
  }
}
SignedData.CLASS_NAME = "SignedData";
SignedData.ID_DATA = id_ContentType_Data;
const VERSION$1 = "version";
const AUTH_SAFE = "authSafe";
const MAC_DATA = "macData";
const PARSED_VALUE = "parsedValue";
const CLERA_PROPS = [VERSION$1, AUTH_SAFE, MAC_DATA];
class PFX extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));
    this.authSafe = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));
    if (MAC_DATA in parameters) {
      this.macData = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));
    }
    if (PARSED_VALUE in parameters) {
      this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION$1:
        return 3;
      case AUTH_SAFE:
        return new ContentInfo();
      case MAC_DATA:
        return new MacData();
      case PARSED_VALUE:
        return {};
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION$1:
        return memberValue === PFX.defaultValues(memberName);
      case AUTH_SAFE:
        return ContentInfo.compareWithDefault("contentType", memberValue.contentType) && ContentInfo.compareWithDefault("content", memberValue.content);
      case MAC_DATA:
        return MacData.compareWithDefault("mac", memberValue.mac) && MacData.compareWithDefault("macSalt", memberValue.macSalt) && MacData.compareWithDefault("iterations", memberValue.iterations);
      case PARSED_VALUE:
        return memberValue instanceof Object && Object.keys(memberValue).length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || VERSION$1
      }), ContentInfo.schema(names.authSafe || {
        names: {
          blockName: AUTH_SAFE
        }
      }), MacData.schema(names.macData || {
        names: {
          blockName: MAC_DATA,
          optional: true
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLERA_PROPS);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PFX.schema({
      names: {
        version: VERSION$1,
        authSafe: {
          names: {
            blockName: AUTH_SAFE
          }
        },
        macData: {
          names: {
            blockName: MAC_DATA
          }
        }
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result.version.valueBlock.valueDec;
    this.authSafe = new ContentInfo({
      schema: asn1.result.authSafe
    });
    if (MAC_DATA in asn1.result) this.macData = new MacData({
      schema: asn1.result.macData
    });
  }
  toSchema() {
    const outputArray = [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }), this.authSafe.toSchema()];
    if (this.macData) {
      outputArray.push(this.macData.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const output = {
      version: this.version,
      authSafe: this.authSafe.toJSON()
    };
    if (this.macData) {
      output.macData = this.macData.toJSON();
    }
    return output;
  }
  makeInternalValues(parameters = {}, crypto = getCrypto(true)) {
    var _this54 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ArgumentError.assert(parameters, "parameters", "object");
      if (!_this54.parsedValue) {
        throw new Error("Please call \"parseValues\" function first in order to make \"parsedValue\" data");
      }
      ParameterError.assertEmpty(_this54.parsedValue.integrityMode, "integrityMode", "parsedValue");
      ParameterError.assertEmpty(_this54.parsedValue.authenticatedSafe, "authenticatedSafe", "parsedValue");
      switch (_this54.parsedValue.integrityMode) {
        case 0:
          {
            if (!("iterations" in parameters)) throw new ParameterError("iterations");
            ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, "pbkdf2HashAlgorithm");
            ParameterError.assertEmpty(parameters.hmacHashAlgorithm, "hmacHashAlgorithm");
            ParameterError.assertEmpty(parameters.password, "password");
            const saltBuffer = new ArrayBuffer(64);
            const saltView = new Uint8Array(saltBuffer);
            crypto.getRandomValues(saltView);
            const data = _this54.parsedValue.authenticatedSafe.toSchema().toBER(false);
            _this54.authSafe = new ContentInfo({
              contentType: ContentInfo.DATA,
              content: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                valueHex: data
              })
            });
            const result = yield crypto.stampDataWithPassword({
              password: parameters.password,
              hashAlgorithm: parameters.hmacHashAlgorithm,
              salt: saltBuffer,
              iterationCount: parameters.iterations,
              contentToStamp: data
            });
            _this54.macData = new MacData({
              mac: new DigestInfo({
                digestAlgorithm: new AlgorithmIdentifier({
                  algorithmId: crypto.getOIDByAlgorithm({
                    name: parameters.hmacHashAlgorithm
                  }, true, "hmacHashAlgorithm")
                }),
                digest: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                  valueHex: result
                })
              }),
              macSalt: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                valueHex: saltBuffer
              }),
              iterations: parameters.iterations
            });
          }
          break;
        case 1:
          {
            if (!("signingCertificate" in parameters)) {
              throw new ParameterError("signingCertificate");
            }
            ParameterError.assertEmpty(parameters.privateKey, "privateKey");
            ParameterError.assertEmpty(parameters.hashAlgorithm, "hashAlgorithm");
            const toBeSigned = _this54.parsedValue.authenticatedSafe.toSchema().toBER(false);
            const cmsSigned = new SignedData({
              version: 1,
              encapContentInfo: new EncapsulatedContentInfo({
                eContentType: "1.2.840.113549.1.7.1",
                eContent: new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                  valueHex: toBeSigned
                })
              }),
              certificates: [parameters.signingCertificate]
            });
            const result = yield crypto.digest({
              name: parameters.hashAlgorithm
            }, new Uint8Array(toBeSigned));
            const signedAttr = [];
            signedAttr.push(new Attribute({
              type: "1.2.840.113549.1.9.3",
              values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
                value: "1.2.840.113549.1.7.1"
              })]
            }));
            signedAttr.push(new Attribute({
              type: "1.2.840.113549.1.9.5",
              values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.UTCTime({
                valueDate: new Date()
              })]
            }));
            signedAttr.push(new Attribute({
              type: "1.2.840.113549.1.9.4",
              values: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString({
                valueHex: result
              })]
            }));
            cmsSigned.signerInfos.push(new SignerInfo({
              version: 1,
              sid: new IssuerAndSerialNumber({
                issuer: parameters.signingCertificate.issuer,
                serialNumber: parameters.signingCertificate.serialNumber
              }),
              signedAttrs: new SignedAndUnsignedAttributes({
                type: 0,
                attributes: signedAttr
              })
            }));
            yield cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);
            _this54.authSafe = new ContentInfo({
              contentType: "1.2.840.113549.1.7.2",
              content: cmsSigned.toSchema(true)
            });
          }
          break;
        default:
          throw new Error(`Parameter "integrityMode" has unknown value: ${_this54.parsedValue.integrityMode}`);
      }
    })();
  }
  parseInternalValues(parameters, crypto = getCrypto(true)) {
    var _this55 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      ArgumentError.assert(parameters, "parameters", "object");
      if (parameters.checkIntegrity === undefined) {
        parameters.checkIntegrity = true;
      }
      _this55.parsedValue = {};
      switch (_this55.authSafe.contentType) {
        case ContentInfo.DATA:
          {
            ParameterError.assertEmpty(parameters.password, "password");
            _this55.parsedValue.integrityMode = 0;
            ArgumentError.assert(_this55.authSafe.content, "authSafe.content", asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString);
            const authSafeContent = _this55.authSafe.content.getValue();
            _this55.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);
            if (parameters.checkIntegrity) {
              if (!_this55.macData) {
                throw new Error("Absent \"macData\" value, can not check PKCS#12 data integrity");
              }
              const hashAlgorithm = crypto.getAlgorithmByOID(_this55.macData.mac.digestAlgorithm.algorithmId, true, "digestAlgorithm");
              const result = yield crypto.verifyDataStampedWithPassword({
                password: parameters.password,
                hashAlgorithm: hashAlgorithm.name,
                salt: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(_this55.macData.macSalt.valueBlock.valueHexView),
                iterationCount: _this55.macData.iterations || 1,
                contentToVerify: authSafeContent,
                signatureToVerify: pvtsutils__WEBPACK_IMPORTED_MODULE_2__.BufferSourceConverter.toArrayBuffer(_this55.macData.mac.digest.valueBlock.valueHexView)
              });
              if (!result) {
                throw new Error("Integrity for the PKCS#12 data is broken!");
              }
            }
          }
          break;
        case ContentInfo.SIGNED_DATA:
          {
            _this55.parsedValue.integrityMode = 1;
            const cmsSigned = new SignedData({
              schema: _this55.authSafe.content
            });
            const eContent = cmsSigned.encapContentInfo.eContent;
            ParameterError.assert(eContent, "eContent", "cmsSigned.encapContentInfo");
            ArgumentError.assert(eContent, "eContent", asn1js__WEBPACK_IMPORTED_MODULE_1__.OctetString);
            const data = eContent.getValue();
            _this55.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);
            const ok = yield cmsSigned.verify({
              signer: 0,
              checkChain: false
            }, crypto);
            if (!ok) {
              throw new Error("Integrity for the PKCS#12 data is broken!");
            }
          }
          break;
        default:
          throw new Error(`Incorrect value for "this.authSafe.contentType": ${_this55.authSafe.contentType}`);
      }
    })();
  }
}
PFX.CLASS_NAME = "PFX";
const STATUS$1 = "status";
const STATUS_STRINGS = "statusStrings";
const FAIL_INFO = "failInfo";
const CLEAR_PROPS$2 = [STATUS$1, STATUS_STRINGS, FAIL_INFO];
var PKIStatus;
(function (PKIStatus) {
  PKIStatus[PKIStatus["granted"] = 0] = "granted";
  PKIStatus[PKIStatus["grantedWithMods"] = 1] = "grantedWithMods";
  PKIStatus[PKIStatus["rejection"] = 2] = "rejection";
  PKIStatus[PKIStatus["waiting"] = 3] = "waiting";
  PKIStatus[PKIStatus["revocationWarning"] = 4] = "revocationWarning";
  PKIStatus[PKIStatus["revocationNotification"] = 5] = "revocationNotification";
})(PKIStatus || (PKIStatus = {}));
class PKIStatusInfo extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.status = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));
    if (STATUS_STRINGS in parameters) {
      this.statusStrings = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));
    }
    if (FAIL_INFO in parameters) {
      this.failInfo = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case STATUS$1:
        return 2;
      case STATUS_STRINGS:
        return [];
      case FAIL_INFO:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case STATUS$1:
        return memberValue === PKIStatusInfo.defaultValues(memberName);
      case STATUS_STRINGS:
        return memberValue.length === 0;
      case FAIL_INFO:
        return memberValue.isEqual(PKIStatusInfo.defaultValues(memberName));
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || EMPTY_STRING,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.status || EMPTY_STRING
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        optional: true,
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.statusStrings || EMPTY_STRING,
          value: new asn1js__WEBPACK_IMPORTED_MODULE_1__.Utf8String()
        })]
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.BitString({
        name: names.failInfo || EMPTY_STRING,
        optional: true
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$2);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, PKIStatusInfo.schema({
      names: {
        status: STATUS$1,
        statusStrings: STATUS_STRINGS,
        failInfo: FAIL_INFO
      }
    }));
    AsnError.assertSchema(asn1, this.className);
    const _status = asn1.result.status;
    if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error("PKIStatusInfo \"status\" has invalid value");
    this.status = _status.valueBlock.valueDec;
    if (STATUS_STRINGS in asn1.result) this.statusStrings = asn1.result.statusStrings;
    if (FAIL_INFO in asn1.result) this.failInfo = asn1.result.failInfo;
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.status
    }));
    if (this.statusStrings) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
        optional: true,
        value: this.statusStrings
      }));
    }
    if (this.failInfo) {
      outputArray.push(this.failInfo);
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      status: this.status
    };
    if (this.statusStrings) {
      res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());
    }
    if (this.failInfo) {
      res.failInfo = this.failInfo.toJSON();
    }
    return res;
  }
}
PKIStatusInfo.CLASS_NAME = "PKIStatusInfo";
const VERSION = "version";
const MESSAGE_IMPRINT = "messageImprint";
const REQ_POLICY = "reqPolicy";
const NONCE = "nonce";
const CERT_REQ = "certReq";
const EXTENSIONS = "extensions";
const TIME_STAMP_REQ = "TimeStampReq";
const TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;
const TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;
const TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;
const TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;
const TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;
const TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;
const CLEAR_PROPS$1 = [TIME_STAMP_REQ_VERSION, TIME_STAMP_REQ_MESSAGE_IMPRINT, TIME_STAMP_REQ_POLICY, TIME_STAMP_REQ_NONCE, TIME_STAMP_REQ_CERT_REQ, TIME_STAMP_REQ_EXTENSIONS];
class TimeStampReq extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.version = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));
    this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));
    if (REQ_POLICY in parameters) {
      this.reqPolicy = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));
    }
    if (NONCE in parameters) {
      this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));
    }
    if (CERT_REQ in parameters) {
      this.certReq = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));
    }
    if (EXTENSIONS in parameters) {
      this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case VERSION:
        return 0;
      case MESSAGE_IMPRINT:
        return new MessageImprint();
      case REQ_POLICY:
        return EMPTY_STRING;
      case NONCE:
        return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer();
      case CERT_REQ:
        return false;
      case EXTENSIONS:
        return [];
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case VERSION:
      case REQ_POLICY:
      case CERT_REQ:
        return memberValue === TimeStampReq.defaultValues(memberName);
      case MESSAGE_IMPRINT:
        return MessageImprint.compareWithDefault("hashAlgorithm", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault("hashedMessage", memberValue.hashedMessage);
      case NONCE:
        return memberValue.isEqual(TimeStampReq.defaultValues(memberName));
      case EXTENSIONS:
        return memberValue.length === 0;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || TIME_STAMP_REQ,
      value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.version || TIME_STAMP_REQ_VERSION
      }), MessageImprint.schema(names.messageImprint || {
        names: {
          blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT
        }
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
        name: names.reqPolicy || TIME_STAMP_REQ_POLICY,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
        name: names.nonce || TIME_STAMP_REQ_NONCE,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
        name: names.certReq || TIME_STAMP_REQ_CERT_REQ,
        optional: true
      }), new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        optional: true,
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: [new asn1js__WEBPACK_IMPORTED_MODULE_1__.Repeated({
          name: names.extensions || TIME_STAMP_REQ_EXTENSIONS,
          value: Extension.schema()
        })]
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS$1);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, TimeStampReq.schema());
    AsnError.assertSchema(asn1, this.className);
    this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;
    this.messageImprint = new MessageImprint({
      schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT]
    });
    if (TIME_STAMP_REQ_POLICY in asn1.result) this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();
    if (TIME_STAMP_REQ_NONCE in asn1.result) this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];
    if (TIME_STAMP_REQ_CERT_REQ in asn1.result) this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;
    if (TIME_STAMP_REQ_EXTENSIONS in asn1.result) this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({
      schema: element
    }));
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Integer({
      value: this.version
    }));
    outputArray.push(this.messageImprint.toSchema());
    if (this.reqPolicy) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.ObjectIdentifier({
      value: this.reqPolicy
    }));
    if (this.nonce) outputArray.push(this.nonce);
    if (CERT_REQ in this && TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Boolean({
      value: this.certReq
    }));
    if (this.extensions) {
      outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_1__.Constructed({
        idBlock: {
          tagClass: 3,
          tagNumber: 0
        },
        value: Array.from(this.extensions, o => o.toSchema())
      }));
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      version: this.version,
      messageImprint: this.messageImprint.toJSON()
    };
    if (this.reqPolicy !== undefined) res.reqPolicy = this.reqPolicy;
    if (this.nonce !== undefined) res.nonce = this.nonce.toJSON();
    if (this.certReq !== undefined && TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false) res.certReq = this.certReq;
    if (this.extensions) {
      res.extensions = Array.from(this.extensions, o => o.toJSON());
    }
    return res;
  }
}
TimeStampReq.CLASS_NAME = "TimeStampReq";
const STATUS = "status";
const TIME_STAMP_TOKEN = "timeStampToken";
const TIME_STAMP_RESP = "TimeStampResp";
const TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;
const TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;
const CLEAR_PROPS = [TIME_STAMP_RESP_STATUS, TIME_STAMP_RESP_TOKEN];
class TimeStampResp extends PkiObject {
  constructor(parameters = {}) {
    super();
    this.status = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));
    if (TIME_STAMP_TOKEN in parameters) {
      this.timeStampToken = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));
    }
    if (parameters.schema) {
      this.fromSchema(parameters.schema);
    }
  }
  static defaultValues(memberName) {
    switch (memberName) {
      case STATUS:
        return new PKIStatusInfo();
      case TIME_STAMP_TOKEN:
        return new ContentInfo();
      default:
        return super.defaultValues(memberName);
    }
  }
  static compareWithDefault(memberName, memberValue) {
    switch (memberName) {
      case STATUS:
        return PKIStatusInfo.compareWithDefault(STATUS, memberValue.status) && "statusStrings" in memberValue === false && "failInfo" in memberValue === false;
      case TIME_STAMP_TOKEN:
        return memberValue.contentType === EMPTY_STRING && memberValue.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_1__.Any;
      default:
        return super.defaultValues(memberName);
    }
  }
  static schema(parameters = {}) {
    const names = pvutils__WEBPACK_IMPORTED_MODULE_3__.getParametersValue(parameters, "names", {});
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      name: names.blockName || TIME_STAMP_RESP,
      value: [PKIStatusInfo.schema(names.status || {
        names: {
          blockName: TIME_STAMP_RESP_STATUS
        }
      }), ContentInfo.schema(names.timeStampToken || {
        names: {
          blockName: TIME_STAMP_RESP_TOKEN,
          optional: true
        }
      })]
    });
  }
  fromSchema(schema) {
    pvutils__WEBPACK_IMPORTED_MODULE_3__.clearProps(schema, CLEAR_PROPS);
    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_1__.compareSchema(schema, schema, TimeStampResp.schema());
    AsnError.assertSchema(asn1, this.className);
    this.status = new PKIStatusInfo({
      schema: asn1.result[TIME_STAMP_RESP_STATUS]
    });
    if (TIME_STAMP_RESP_TOKEN in asn1.result) this.timeStampToken = new ContentInfo({
      schema: asn1.result[TIME_STAMP_RESP_TOKEN]
    });
  }
  toSchema() {
    const outputArray = [];
    outputArray.push(this.status.toSchema());
    if (this.timeStampToken) {
      outputArray.push(this.timeStampToken.toSchema());
    }
    return new asn1js__WEBPACK_IMPORTED_MODULE_1__.Sequence({
      value: outputArray
    });
  }
  toJSON() {
    const res = {
      status: this.status.toJSON()
    };
    if (this.timeStampToken) {
      res.timeStampToken = this.timeStampToken.toJSON();
    }
    return res;
  }
  sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {
    var _this56 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this56.assertContentType();
      const signed = new SignedData({
        schema: _this56.timeStampToken.content
      });
      return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);
    })();
  }
  verify(verificationParameters = {
    signer: 0,
    trustedCerts: [],
    data: EMPTY_BUFFER
  }, crypto = getCrypto(true)) {
    var _this57 = this;
    return (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this57.assertContentType();
      const signed = new SignedData({
        schema: _this57.timeStampToken.content
      });
      return signed.verify(verificationParameters, crypto);
    })();
  }
  assertContentType() {
    if (!this.timeStampToken) {
      throw new Error("timeStampToken is absent in TSP response");
    }
    if (this.timeStampToken.contentType !== id_ContentType_SignedData) {
      throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);
    }
  }
}
TimeStampResp.CLASS_NAME = "TimeStampResp";
function initCryptoEngine() {
  if (typeof self !== "undefined") {
    if ("crypto" in self) {
      let engineName = "webcrypto";
      if ("webkitSubtle" in self.crypto) {
        engineName = "safari";
      }
      setEngine(engineName, new CryptoEngine({
        name: engineName,
        crypto: crypto
      }));
    }
  } else if (typeof crypto !== "undefined" && "webcrypto" in crypto) {
    const name = "NodeJS ^15";
    const nodeCrypto = crypto.webcrypto;
    setEngine(name, new CryptoEngine({
      name,
      crypto: nodeCrypto
    }));
  }
}
initCryptoEngine();


/***/ }),

/***/ 84727:
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/pvtsutils@1.3.5/node_modules/pvtsutils/build/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*!
 * MIT License
 * 
 * Copyright (c) 2017-2022 Peculiar Ventures, LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */



const ARRAY_BUFFER_NAME = "[object ArrayBuffer]";
class BufferSourceConverter {
  static isArrayBuffer(data) {
    return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;
  }
  static toArrayBuffer(data) {
    if (this.isArrayBuffer(data)) {
      return data;
    }
    if (data.byteLength === data.buffer.byteLength) {
      return data.buffer;
    }
    if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
      return data.buffer;
    }
    return this.toUint8Array(data.buffer).slice(data.byteOffset, data.byteOffset + data.byteLength).buffer;
  }
  static toUint8Array(data) {
    return this.toView(data, Uint8Array);
  }
  static toView(data, type) {
    if (data.constructor === type) {
      return data;
    }
    if (this.isArrayBuffer(data)) {
      return new type(data);
    }
    if (this.isArrayBufferView(data)) {
      return new type(data.buffer, data.byteOffset, data.byteLength);
    }
    throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
  }
  static isBufferSource(data) {
    return this.isArrayBufferView(data) || this.isArrayBuffer(data);
  }
  static isArrayBufferView(data) {
    return ArrayBuffer.isView(data) || data && this.isArrayBuffer(data.buffer);
  }
  static isEqual(a, b) {
    const aView = BufferSourceConverter.toUint8Array(a);
    const bView = BufferSourceConverter.toUint8Array(b);
    if (aView.length !== bView.byteLength) {
      return false;
    }
    for (let i = 0; i < aView.length; i++) {
      if (aView[i] !== bView[i]) {
        return false;
      }
    }
    return true;
  }
  static concat(...args) {
    let buffers;
    if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {
      buffers = args[0];
    } else if (Array.isArray(args[0]) && args[1] instanceof Function) {
      buffers = args[0];
    } else {
      if (args[args.length - 1] instanceof Function) {
        buffers = args.slice(0, args.length - 1);
      } else {
        buffers = args;
      }
    }
    let size = 0;
    for (const buffer of buffers) {
      size += buffer.byteLength;
    }
    const res = new Uint8Array(size);
    let offset = 0;
    for (const buffer of buffers) {
      const view = this.toUint8Array(buffer);
      res.set(view, offset);
      offset += view.length;
    }
    if (args[args.length - 1] instanceof Function) {
      return this.toView(res, args[args.length - 1]);
    }
    return res.buffer;
  }
}
const STRING_TYPE = "string";
const HEX_REGEX = /^[0-9a-f]+$/i;
const BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
const BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;
class Utf8Converter {
  static fromString(text) {
    const s = unescape(encodeURIComponent(text));
    const uintArray = new Uint8Array(s.length);
    for (let i = 0; i < s.length; i++) {
      uintArray[i] = s.charCodeAt(i);
    }
    return uintArray.buffer;
  }
  static toString(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let encodedString = "";
    for (let i = 0; i < buf.length; i++) {
      encodedString += String.fromCharCode(buf[i]);
    }
    const decodedString = decodeURIComponent(escape(encodedString));
    return decodedString;
  }
}
class Utf16Converter {
  static toString(buffer, littleEndian = false) {
    const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);
    const dataView = new DataView(arrayBuffer);
    let res = "";
    for (let i = 0; i < arrayBuffer.byteLength; i += 2) {
      const code = dataView.getUint16(i, littleEndian);
      res += String.fromCharCode(code);
    }
    return res;
  }
  static fromString(text, littleEndian = false) {
    const res = new ArrayBuffer(text.length * 2);
    const dataView = new DataView(res);
    for (let i = 0; i < text.length; i++) {
      dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);
    }
    return res;
  }
}
class Convert {
  static isHex(data) {
    return typeof data === STRING_TYPE && HEX_REGEX.test(data);
  }
  static isBase64(data) {
    return typeof data === STRING_TYPE && BASE64_REGEX.test(data);
  }
  static isBase64Url(data) {
    return typeof data === STRING_TYPE && BASE64URL_REGEX.test(data);
  }
  static ToString(buffer, enc = "utf8") {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    switch (enc.toLowerCase()) {
      case "utf8":
        return this.ToUtf8String(buf);
      case "binary":
        return this.ToBinary(buf);
      case "hex":
        return this.ToHex(buf);
      case "base64":
        return this.ToBase64(buf);
      case "base64url":
        return this.ToBase64Url(buf);
      case "utf16le":
        return Utf16Converter.toString(buf, true);
      case "utf16":
      case "utf16be":
        return Utf16Converter.toString(buf);
      default:
        throw new Error(`Unknown type of encoding '${enc}'`);
    }
  }
  static FromString(str, enc = "utf8") {
    if (!str) {
      return new ArrayBuffer(0);
    }
    switch (enc.toLowerCase()) {
      case "utf8":
        return this.FromUtf8String(str);
      case "binary":
        return this.FromBinary(str);
      case "hex":
        return this.FromHex(str);
      case "base64":
        return this.FromBase64(str);
      case "base64url":
        return this.FromBase64Url(str);
      case "utf16le":
        return Utf16Converter.fromString(str, true);
      case "utf16":
      case "utf16be":
        return Utf16Converter.fromString(str);
      default:
        throw new Error(`Unknown type of encoding '${enc}'`);
    }
  }
  static ToBase64(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    if (typeof btoa !== "undefined") {
      const binary = this.ToString(buf, "binary");
      return btoa(binary);
    } else {
      return Buffer.from(buf).toString("base64");
    }
  }
  static FromBase64(base64) {
    const formatted = this.formatString(base64);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!Convert.isBase64(formatted)) {
      throw new TypeError("Argument 'base64Text' is not Base64 encoded");
    }
    if (typeof atob !== "undefined") {
      return this.FromBinary(atob(formatted));
    } else {
      return new Uint8Array(Buffer.from(formatted, "base64")).buffer;
    }
  }
  static FromBase64Url(base64url) {
    const formatted = this.formatString(base64url);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!Convert.isBase64Url(formatted)) {
      throw new TypeError("Argument 'base64url' is not Base64Url encoded");
    }
    return this.FromBase64(this.Base64Padding(formatted.replace(/\-/g, "+").replace(/\_/g, "/")));
  }
  static ToBase64Url(data) {
    return this.ToBase64(data).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
  }
  static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {
    switch (encoding) {
      case "ascii":
        return this.FromBinary(text);
      case "utf8":
        return Utf8Converter.fromString(text);
      case "utf16":
      case "utf16be":
        return Utf16Converter.fromString(text);
      case "utf16le":
      case "usc2":
        return Utf16Converter.fromString(text, true);
      default:
        throw new Error(`Unknown type of encoding '${encoding}'`);
    }
  }
  static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {
    switch (encoding) {
      case "ascii":
        return this.ToBinary(buffer);
      case "utf8":
        return Utf8Converter.toString(buffer);
      case "utf16":
      case "utf16be":
        return Utf16Converter.toString(buffer);
      case "utf16le":
      case "usc2":
        return Utf16Converter.toString(buffer, true);
      default:
        throw new Error(`Unknown type of encoding '${encoding}'`);
    }
  }
  static FromBinary(text) {
    const stringLength = text.length;
    const resultView = new Uint8Array(stringLength);
    for (let i = 0; i < stringLength; i++) {
      resultView[i] = text.charCodeAt(i);
    }
    return resultView.buffer;
  }
  static ToBinary(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let res = "";
    for (let i = 0; i < buf.length; i++) {
      res += String.fromCharCode(buf[i]);
    }
    return res;
  }
  static ToHex(buffer) {
    const buf = BufferSourceConverter.toUint8Array(buffer);
    let result = "";
    const len = buf.length;
    for (let i = 0; i < len; i++) {
      const byte = buf[i];
      if (byte < 16) {
        result += "0";
      }
      result += byte.toString(16);
    }
    return result;
  }
  static FromHex(hexString) {
    let formatted = this.formatString(hexString);
    if (!formatted) {
      return new ArrayBuffer(0);
    }
    if (!Convert.isHex(formatted)) {
      throw new TypeError("Argument 'hexString' is not HEX encoded");
    }
    if (formatted.length % 2) {
      formatted = `0${formatted}`;
    }
    const res = new Uint8Array(formatted.length / 2);
    for (let i = 0; i < formatted.length; i = i + 2) {
      const c = formatted.slice(i, i + 2);
      res[i / 2] = parseInt(c, 16);
    }
    return res.buffer;
  }
  static ToUtf16String(buffer, littleEndian = false) {
    return Utf16Converter.toString(buffer, littleEndian);
  }
  static FromUtf16String(text, littleEndian = false) {
    return Utf16Converter.fromString(text, littleEndian);
  }
  static Base64Padding(base64) {
    const padCount = 4 - base64.length % 4;
    if (padCount < 4) {
      for (let i = 0; i < padCount; i++) {
        base64 += "=";
      }
    }
    return base64;
  }
  static formatString(data) {
    return (data === null || data === void 0 ? void 0 : data.replace(/[\n\r\t ]/g, "")) || "";
  }
}
Convert.DEFAULT_UTF8_ENCODING = "utf8";
function assign(target, ...sources) {
  const res = arguments[0];
  for (let i = 1; i < arguments.length; i++) {
    const obj = arguments[i];
    for (const prop in obj) {
      res[prop] = obj[prop];
    }
  }
  return res;
}
function combine(...buf) {
  const totalByteLength = buf.map(item => item.byteLength).reduce((prev, cur) => prev + cur);
  const res = new Uint8Array(totalByteLength);
  let currentPos = 0;
  buf.map(item => new Uint8Array(item)).forEach(arr => {
    for (const item2 of arr) {
      res[currentPos++] = item2;
    }
  });
  return res.buffer;
}
function isEqual(bytes1, bytes2) {
  if (!(bytes1 && bytes2)) {
    return false;
  }
  if (bytes1.byteLength !== bytes2.byteLength) {
    return false;
  }
  const b1 = new Uint8Array(bytes1);
  const b2 = new Uint8Array(bytes2);
  for (let i = 0; i < bytes1.byteLength; i++) {
    if (b1[i] !== b2[i]) {
      return false;
    }
  }
  return true;
}
exports.BufferSourceConverter = BufferSourceConverter;
exports.Convert = Convert;
exports.assign = assign;
exports.combine = combine;
exports.isEqual = isEqual;

/***/ }),

/***/ 58172:
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/pvutils@1.1.3/node_modules/pvutils/build/utils.es.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayBufferToString: () => (/* binding */ arrayBufferToString),
/* harmony export */   bufferToHexCodes: () => (/* binding */ bufferToHexCodes),
/* harmony export */   checkBufferParams: () => (/* binding */ checkBufferParams),
/* harmony export */   clearProps: () => (/* binding */ clearProps),
/* harmony export */   fromBase64: () => (/* binding */ fromBase64),
/* harmony export */   getParametersValue: () => (/* binding */ getParametersValue),
/* harmony export */   getUTCDate: () => (/* binding */ getUTCDate),
/* harmony export */   isEqualBuffer: () => (/* binding */ isEqualBuffer),
/* harmony export */   nearestPowerOf2: () => (/* binding */ nearestPowerOf2),
/* harmony export */   padNumber: () => (/* binding */ padNumber),
/* harmony export */   stringToArrayBuffer: () => (/* binding */ stringToArrayBuffer),
/* harmony export */   toBase64: () => (/* binding */ toBase64),
/* harmony export */   utilConcatBuf: () => (/* binding */ utilConcatBuf),
/* harmony export */   utilConcatView: () => (/* binding */ utilConcatView),
/* harmony export */   utilDecodeTC: () => (/* binding */ utilDecodeTC),
/* harmony export */   utilEncodeTC: () => (/* binding */ utilEncodeTC),
/* harmony export */   utilFromBase: () => (/* binding */ utilFromBase),
/* harmony export */   utilToBase: () => (/* binding */ utilToBase)
/* harmony export */ });
/*!
 Copyright (c) Peculiar Ventures, LLC
*/

function getUTCDate(date) {
  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
}
function getParametersValue(parameters, name, defaultValue) {
  var _a;
  if (parameters instanceof Object === false) {
    return defaultValue;
  }
  return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;
}
function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {
  let result = "";
  for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)) {
    const str = item.toString(16).toUpperCase();
    if (str.length === 1) {
      result += "0";
    }
    result += str;
    if (insertSpace) {
      result += " ";
    }
  }
  return result.trim();
}
function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
  if (!(inputBuffer instanceof ArrayBuffer)) {
    baseBlock.error = "Wrong parameter: inputBuffer must be \"ArrayBuffer\"";
    return false;
  }
  if (!inputBuffer.byteLength) {
    baseBlock.error = "Wrong parameter: inputBuffer has zero length";
    return false;
  }
  if (inputOffset < 0) {
    baseBlock.error = "Wrong parameter: inputOffset less than zero";
    return false;
  }
  if (inputLength < 0) {
    baseBlock.error = "Wrong parameter: inputLength less than zero";
    return false;
  }
  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {
    baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
    return false;
  }
  return true;
}
function utilFromBase(inputBuffer, inputBase) {
  let result = 0;
  if (inputBuffer.length === 1) {
    return inputBuffer[0];
  }
  for (let i = inputBuffer.length - 1; i >= 0; i--) {
    result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);
  }
  return result;
}
function utilToBase(value, base, reserved = -1) {
  const internalReserved = reserved;
  let internalValue = value;
  let result = 0;
  let biggest = Math.pow(2, base);
  for (let i = 1; i < 8; i++) {
    if (value < biggest) {
      let retBuf;
      if (internalReserved < 0) {
        retBuf = new ArrayBuffer(i);
        result = i;
      } else {
        if (internalReserved < i) {
          return new ArrayBuffer(0);
        }
        retBuf = new ArrayBuffer(internalReserved);
        result = internalReserved;
      }
      const retView = new Uint8Array(retBuf);
      for (let j = i - 1; j >= 0; j--) {
        const basis = Math.pow(2, j * base);
        retView[result - j - 1] = Math.floor(internalValue / basis);
        internalValue -= retView[result - j - 1] * basis;
      }
      return retBuf;
    }
    biggest *= Math.pow(2, base);
  }
  return new ArrayBuffer(0);
}
function utilConcatBuf(...buffers) {
  let outputLength = 0;
  let prevLength = 0;
  for (const buffer of buffers) {
    outputLength += buffer.byteLength;
  }
  const retBuf = new ArrayBuffer(outputLength);
  const retView = new Uint8Array(retBuf);
  for (const buffer of buffers) {
    retView.set(new Uint8Array(buffer), prevLength);
    prevLength += buffer.byteLength;
  }
  return retBuf;
}
function utilConcatView(...views) {
  let outputLength = 0;
  let prevLength = 0;
  for (const view of views) {
    outputLength += view.length;
  }
  const retBuf = new ArrayBuffer(outputLength);
  const retView = new Uint8Array(retBuf);
  for (const view of views) {
    retView.set(view, prevLength);
    prevLength += view.length;
  }
  return retView;
}
function utilDecodeTC() {
  const buf = new Uint8Array(this.valueHex);
  if (this.valueHex.byteLength >= 2) {
    const condition1 = buf[0] === 0xFF && buf[1] & 0x80;
    const condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;
    if (condition1 || condition2) {
      this.warnings.push("Needlessly long format");
    }
  }
  const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  const bigIntView = new Uint8Array(bigIntBuffer);
  for (let i = 0; i < this.valueHex.byteLength; i++) {
    bigIntView[i] = 0;
  }
  bigIntView[0] = buf[0] & 0x80;
  const bigInt = utilFromBase(bigIntView, 8);
  const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
  const smallIntView = new Uint8Array(smallIntBuffer);
  for (let j = 0; j < this.valueHex.byteLength; j++) {
    smallIntView[j] = buf[j];
  }
  smallIntView[0] &= 0x7F;
  const smallInt = utilFromBase(smallIntView, 8);
  return smallInt - bigInt;
}
function utilEncodeTC(value) {
  const modValue = value < 0 ? value * -1 : value;
  let bigInt = 128;
  for (let i = 1; i < 8; i++) {
    if (modValue <= bigInt) {
      if (value < 0) {
        const smallInt = bigInt - modValue;
        const retBuf = utilToBase(smallInt, 8, i);
        const retView = new Uint8Array(retBuf);
        retView[0] |= 0x80;
        return retBuf;
      }
      let retBuf = utilToBase(modValue, 8, i);
      let retView = new Uint8Array(retBuf);
      if (retView[0] & 0x80) {
        const tempBuf = retBuf.slice(0);
        const tempView = new Uint8Array(tempBuf);
        retBuf = new ArrayBuffer(retBuf.byteLength + 1);
        retView = new Uint8Array(retBuf);
        for (let k = 0; k < tempBuf.byteLength; k++) {
          retView[k + 1] = tempView[k];
        }
        retView[0] = 0x00;
      }
      return retBuf;
    }
    bigInt *= Math.pow(2, 8);
  }
  return new ArrayBuffer(0);
}
function isEqualBuffer(inputBuffer1, inputBuffer2) {
  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {
    return false;
  }
  const view1 = new Uint8Array(inputBuffer1);
  const view2 = new Uint8Array(inputBuffer2);
  for (let i = 0; i < view1.length; i++) {
    if (view1[i] !== view2[i]) {
      return false;
    }
  }
  return true;
}
function padNumber(inputNumber, fullLength) {
  const str = inputNumber.toString(10);
  if (fullLength < str.length) {
    return "";
  }
  const dif = fullLength - str.length;
  const padding = new Array(dif);
  for (let i = 0; i < dif; i++) {
    padding[i] = "0";
  }
  const paddingString = padding.join("");
  return paddingString.concat(str);
}
const base64Template = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
const base64UrlTemplate = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";
function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {
  let i = 0;
  let flag1 = 0;
  let flag2 = 0;
  let output = "";
  const template = useUrlTemplate ? base64UrlTemplate : base64Template;
  if (skipLeadingZeros) {
    let nonZeroPosition = 0;
    for (let i = 0; i < input.length; i++) {
      if (input.charCodeAt(i) !== 0) {
        nonZeroPosition = i;
        break;
      }
    }
    input = input.slice(nonZeroPosition);
  }
  while (i < input.length) {
    const chr1 = input.charCodeAt(i++);
    if (i >= input.length) {
      flag1 = 1;
    }
    const chr2 = input.charCodeAt(i++);
    if (i >= input.length) {
      flag2 = 1;
    }
    const chr3 = input.charCodeAt(i++);
    const enc1 = chr1 >> 2;
    const enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;
    let enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;
    let enc4 = chr3 & 0x3F;
    if (flag1 === 1) {
      enc3 = enc4 = 64;
    } else {
      if (flag2 === 1) {
        enc4 = 64;
      }
    }
    if (skipPadding) {
      if (enc3 === 64) {
        output += `${template.charAt(enc1)}${template.charAt(enc2)}`;
      } else {
        if (enc4 === 64) {
          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;
        } else {
          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
        }
      }
    } else {
      output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;
    }
  }
  return output;
}
function fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {
  const template = useUrlTemplate ? base64UrlTemplate : base64Template;
  function indexOf(toSearch) {
    for (let i = 0; i < 64; i++) {
      if (template.charAt(i) === toSearch) return i;
    }
    return 64;
  }
  function test(incoming) {
    return incoming === 64 ? 0x00 : incoming;
  }
  let i = 0;
  let output = "";
  while (i < input.length) {
    const enc1 = indexOf(input.charAt(i++));
    const enc2 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    const enc3 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    const enc4 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));
    const chr1 = test(enc1) << 2 | test(enc2) >> 4;
    const chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;
    const chr3 = (test(enc3) & 0x03) << 6 | test(enc4);
    output += String.fromCharCode(chr1);
    if (enc3 !== 64) {
      output += String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output += String.fromCharCode(chr3);
    }
  }
  if (cutTailZeros) {
    const outputLength = output.length;
    let nonZeroStart = -1;
    for (let i = outputLength - 1; i >= 0; i--) {
      if (output.charCodeAt(i) !== 0) {
        nonZeroStart = i;
        break;
      }
    }
    if (nonZeroStart !== -1) {
      output = output.slice(0, nonZeroStart + 1);
    } else {
      output = "";
    }
  }
  return output;
}
function arrayBufferToString(buffer) {
  let resultString = "";
  const view = new Uint8Array(buffer);
  for (const element of view) {
    resultString += String.fromCharCode(element);
  }
  return resultString;
}
function stringToArrayBuffer(str) {
  const stringLength = str.length;
  const resultBuffer = new ArrayBuffer(stringLength);
  const resultView = new Uint8Array(resultBuffer);
  for (let i = 0; i < stringLength; i++) {
    resultView[i] = str.charCodeAt(i);
  }
  return resultBuffer;
}
const log2 = Math.log(2);
function nearestPowerOf2(length) {
  const base = Math.log(length) / log2;
  const floor = Math.floor(base);
  const round = Math.round(base);
  return floor === round ? floor : round;
}
function clearProps(object, propsArray) {
  for (const prop of propsArray) {
    delete object[prop];
  }
}


/***/ }),

/***/ 10853:
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cds+core@6.13.0/node_modules/@cds/core/icon/shapes/download.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   downloadIcon: () => (/* binding */ t),
/* harmony export */   downloadIconName: () => (/* binding */ d)
/* harmony export */ });
/* harmony import */ var _icon_renderer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../icon.renderer.js */ 86292);

const d = "download",
  t = ["download", (0,_icon_renderer_js__WEBPACK_IMPORTED_MODULE_0__.renderIcon)({
    outline: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>',
    outlineAlerted: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>',
    outlineBadged: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>'
  })];


/***/ }),

/***/ 47849:
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cds+core@6.13.0/node_modules/@cds/core/icon/shapes/plus.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   plusIcon: () => (/* binding */ a),
/* harmony export */   plusIconName: () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _icon_renderer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../icon.renderer.js */ 86292);

const r = "plus",
  a = ["plus", (0,_icon_renderer_js__WEBPACK_IMPORTED_MODULE_0__.renderIcon)({
    outline: '<path d="M30,17H19V6a1,1,0,1,0-2,0V17H6a1,1,0,0,0-1,1,.91.91,0,0,0,1,.94H17V30a1,1,0,1,0,2,0V19H30a1,1,0,0,0,1-1A1,1,0,0,0,30,17Z"/>'
  })];


/***/ }),

/***/ 82717:
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_assert.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bool: () => (/* binding */ bool),
/* harmony export */   bytes: () => (/* binding */ bytes),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   exists: () => (/* binding */ exists),
/* harmony export */   hash: () => (/* binding */ hash),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   number: () => (/* binding */ number),
/* harmony export */   output: () => (/* binding */ output)
/* harmony export */ });
function number(n) {
  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);
}
function bool(b) {
  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);
}
// copied from utils
function isBytes(a) {
  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
}
function bytes(b, ...lengths) {
  if (!isBytes(b)) throw new Error('Uint8Array expected');
  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
}
function hash(h) {
  if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
  number(h.outputLen);
  number(h.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed) throw new Error('Hash instance has been destroyed');
  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

const assert = {
  number,
  bool,
  bytes,
  hash,
  exists,
  output
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);

/***/ }),

/***/ 10650:
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_md.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chi: () => (/* binding */ Chi),
/* harmony export */   HashMD: () => (/* binding */ HashMD),
/* harmony export */   Maj: () => (/* binding */ Maj)
/* harmony export */ });
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ 82717);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ 45839);


/**
 * Polyfill for Safari 14
 */
function setBigUint64(view, byteOffset, value, isLE) {
  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);
  const _32n = BigInt(32);
  const _u32_max = BigInt(0xffffffff);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE ? 4 : 0;
  const l = isLE ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE);
  view.setUint32(byteOffset + l, wl, isLE);
}
/**
 * Choice: a ? b : c
 */
const Chi = (a, b, c) => a & b ^ ~a & c;
/**
 * Majority function, true if any two inputs is true
 */
const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
/**
 * Merkle-Damgard hash construction base class.
 * Could be used to create MD5, RIPEMD, SHA1, SHA2.
 */
class HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {
  constructor(blockLen, outputLen, padOffset, isLE) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);
  }
  update(data) {
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);
    const {
      view,
      buffer,
      blockLen
    } = this;
    data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);
    const len = data.length;
    for (let pos = 0; pos < len;) {
      const take = Math.min(blockLen - this.pos, len - pos);
      // Fast path: we have at least one block in input, cast it to view and process
      if (take === blockLen) {
        const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);
        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);
    this.finished = true;
    // Padding
    // We can avoid allocation of buffer for padding completely if it
    // was previously not allocated here. But it won't change performance.
    const {
      buffer,
      view,
      blockLen,
      isLE
    } = this;
    let {
      pos
    } = this;
    // append the bit '1' to the message
    buffer[pos++] = 0b10000000;
    this.buffer.subarray(pos).fill(0);
    // we have less than padOffset left in buffer, so we cannot put length in
    // current block, need process it and pad again
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    // Pad until full block byte with zeros
    for (let i = pos; i < blockLen; i++) buffer[i] = 0;
    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
    // So we just write lowest 64 bits of that value.
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
    this.process(view, 0);
    const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);
    const len = this.outputLen;
    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);
  }
  digest() {
    const {
      buffer,
      outputLen
    } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const {
      blockLen,
      buffer,
      length,
      finished,
      destroyed,
      pos
    } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen) to.buffer.set(buffer);
    return to;
  }
}

/***/ }),

/***/ 53270:
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_u64.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   add3H: () => (/* binding */ add3H),
/* harmony export */   add3L: () => (/* binding */ add3L),
/* harmony export */   add4H: () => (/* binding */ add4H),
/* harmony export */   add4L: () => (/* binding */ add4L),
/* harmony export */   add5H: () => (/* binding */ add5H),
/* harmony export */   add5L: () => (/* binding */ add5L),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   fromBig: () => (/* binding */ fromBig),
/* harmony export */   rotlBH: () => (/* binding */ rotlBH),
/* harmony export */   rotlBL: () => (/* binding */ rotlBL),
/* harmony export */   rotlSH: () => (/* binding */ rotlSH),
/* harmony export */   rotlSL: () => (/* binding */ rotlSL),
/* harmony export */   rotr32H: () => (/* binding */ rotr32H),
/* harmony export */   rotr32L: () => (/* binding */ rotr32L),
/* harmony export */   rotrBH: () => (/* binding */ rotrBH),
/* harmony export */   rotrBL: () => (/* binding */ rotrBL),
/* harmony export */   rotrSH: () => (/* binding */ rotrSH),
/* harmony export */   rotrSL: () => (/* binding */ rotrSL),
/* harmony export */   shrSH: () => (/* binding */ shrSH),
/* harmony export */   shrSL: () => (/* binding */ shrSL),
/* harmony export */   split: () => (/* binding */ split),
/* harmony export */   toBig: () => (/* binding */ toBig)
/* harmony export */ });
const U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
  if (le) return {
    h: Number(n & U32_MASK64),
    l: Number(n >> _32n & U32_MASK64)
  };
  return {
    h: Number(n >> _32n & U32_MASK64) | 0,
    l: Number(n & U32_MASK64) | 0
  };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const {
      h,
      l
    } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => h >>> s | l << 32 - s;
const rotrSL = (h, l, s) => h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => h << s | l >>> 32 - s;
const rotlSL = (h, l, s) => l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
  const l = (Al >>> 0) + (Bl >>> 0);
  return {
    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
    l: l | 0
  };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
// prettier-ignore

// prettier-ignore
const u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);

/***/ }),

/***/ 56017:
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/crypto.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   crypto: () => (/* binding */ crypto)
/* harmony export */ });
const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

/***/ }),

/***/ 95045:
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha1.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHA1: () => (/* binding */ SHA1),
/* harmony export */   sha1: () => (/* binding */ sha1)
/* harmony export */ });
/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ 10650);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ 45839);


// SHA1 (RFC 3174). It was cryptographically broken: prefer newer algorithms.
// Initial state
const SHA1_IV = /* @__PURE__ */new Uint32Array([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA1_W = /* @__PURE__ */new Uint32Array(80);
class SHA1 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const {
      A,
      B,
      C,
      D,
      E
    } = this;
    return [A, B, C, D, E];
  }
  set(A, B, C, D, E) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 80; i++) SHA1_W[i] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);
    // Compression function main loop, 80 rounds
    let {
      A,
      B,
      C,
      D,
      E
    } = this;
    for (let i = 0; i < 80; i++) {
      let F, K;
      if (i < 20) {
        F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(B, C, D);
        K = 0x5a827999;
      } else if (i < 40) {
        F = B ^ C ^ D;
        K = 0x6ed9eba1;
      } else if (i < 60) {
        F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(B, C, D);
        K = 0x8f1bbcdc;
      } else {
        F = B ^ C ^ D;
        K = 0xca62c1d6;
      }
      const T = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(A, 5) + F + E + K + SHA1_W[i] | 0;
      E = D;
      D = C;
      C = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(B, 30);
      B = A;
      A = T;
    }
    // Add the compressed chunk to the current hash value
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    this.set(A, B, C, D, E);
  }
  roundClean() {
    SHA1_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
/**
 * SHA1 (RFC 3174) hash function.
 * It was cryptographically broken: prefer newer algorithms.
 * @param message - data that would be hashed
 */
const sha1 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA1());

/***/ }),

/***/ 69863:
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha256.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHA256: () => (/* binding */ SHA256),
/* harmony export */   sha224: () => (/* binding */ sha224),
/* harmony export */   sha256: () => (/* binding */ sha256)
/* harmony export */ });
/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ 10650);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ 45839);


// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
// Initial state:
// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
// prettier-ignore
const SHA256_IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = /* @__PURE__ */new Uint32Array(64);
class SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {
  constructor() {
    super(64, 32, 8, false);
    // We cannot use array here since array allows indexing by variable
    // which means optimizer/compiler cannot use registers.
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const {
      A,
      B,
      C,
      D,
      E,
      F,
      G,
      H
    } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ W15 >>> 3;
      const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    // Compression function main loop, 64 rounds
    let {
      A,
      B,
      C,
      D,
      E,
      F,
      G,
      H
    } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);
      const T1 = H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);
      const T2 = sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    // Add the compressed chunk to the current hash value
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
  constructor() {
    super();
    this.A = 0xc1059ed8 | 0;
    this.B = 0x367cd507 | 0;
    this.C = 0x3070dd17 | 0;
    this.D = 0xf70e5939 | 0;
    this.E = 0xffc00b31 | 0;
    this.F = 0x68581511 | 0;
    this.G = 0x64f98fa7 | 0;
    this.H = 0xbefa4fa4 | 0;
    this.outputLen = 28;
  }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
const sha256 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());
/**
 * SHA2-224 hash function
 */
const sha224 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());

/***/ }),

/***/ 11742:
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha512.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SHA384: () => (/* binding */ SHA384),
/* harmony export */   SHA512: () => (/* binding */ SHA512),
/* harmony export */   SHA512_224: () => (/* binding */ SHA512_224),
/* harmony export */   SHA512_256: () => (/* binding */ SHA512_256),
/* harmony export */   sha384: () => (/* binding */ sha384),
/* harmony export */   sha512: () => (/* binding */ sha512),
/* harmony export */   sha512_224: () => (/* binding */ sha512_224),
/* harmony export */   sha512_256: () => (/* binding */ sha512_256)
/* harmony export */ });
/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_md.js */ 10650);
/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ 53270);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ 45839);



// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */(() => _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))))();
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = /* @__PURE__ */new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */new Uint32Array(80);
class SHA512 extends _md_js__WEBPACK_IMPORTED_MODULE_1__.HashMD {
  constructor() {
    super(128, 64, 16, false);
    // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
    // Also looks cleaner and easier to verify with spec.
    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
    // h -- high 32 bits, l -- low 32 bits
    this.Ah = 0x6a09e667 | 0;
    this.Al = 0xf3bcc908 | 0;
    this.Bh = 0xbb67ae85 | 0;
    this.Bl = 0x84caa73b | 0;
    this.Ch = 0x3c6ef372 | 0;
    this.Cl = 0xfe94f82b | 0;
    this.Dh = 0xa54ff53a | 0;
    this.Dl = 0x5f1d36f1 | 0;
    this.Eh = 0x510e527f | 0;
    this.El = 0xade682d1 | 0;
    this.Fh = 0x9b05688c | 0;
    this.Fl = 0x2b3e6c1f | 0;
    this.Gh = 0x1f83d9ab | 0;
    this.Gl = 0xfb41bd6b | 0;
    this.Hh = 0x5be0cd19 | 0;
    this.Hl = 0x137e2179 | 0;
  }
  // prettier-ignore
  get() {
    const {
      Ah,
      Al,
      Bh,
      Bl,
      Ch,
      Cl,
      Dh,
      Dl,
      Eh,
      El,
      Fh,
      Fl,
      Gh,
      Gl,
      Hh,
      Hl
    } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].shrSH(W15h, W15l, 7);
      const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].shrSL(W15h, W15l, 7);
      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].shrSH(W2h, W2l, 6);
      const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].shrSL(W2h, W2l, 6);
      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
      const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let {
      Ah,
      Al,
      Bh,
      Bl,
      Ch,
      Cl,
      Dh,
      Dl,
      Eh,
      El,
      Fh,
      Fl,
      Gh,
      Gl,
      Hh,
      Hl
    } = this;
    // Compression function main loop, 80 rounds
    for (let i = 0; i < 80; i++) {
      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
      const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBH(Eh, El, 41);
      const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBL(Eh, El, 41);
      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
      // prettier-ignore
      const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
      const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBH(Ah, Al, 39);
      const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({
        h: Eh,
        l: El
      } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add3L(T1l, sigma0l, MAJl);
      Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    // Add the compressed chunk to the current hash value
    ({
      h: Ah,
      l: Al
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({
      h: Bh,
      l: Bl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({
      h: Ch,
      l: Cl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({
      h: Dh,
      l: Dl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({
      h: Eh,
      l: El
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({
      h: Fh,
      l: Fl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({
      h: Gh,
      l: Gl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({
      h: Hh,
      l: Hl
    } = _u64_js__WEBPACK_IMPORTED_MODULE_0__["default"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
class SHA512_224 extends SHA512 {
  constructor() {
    super();
    // h -- high 32 bits, l -- low 32 bits
    this.Ah = 0x8c3d37c8 | 0;
    this.Al = 0x19544da2 | 0;
    this.Bh = 0x73e19966 | 0;
    this.Bl = 0x89dcd4d6 | 0;
    this.Ch = 0x1dfab7ae | 0;
    this.Cl = 0x32ff9c82 | 0;
    this.Dh = 0x679dd514 | 0;
    this.Dl = 0x582f9fcf | 0;
    this.Eh = 0x0f6d2b69 | 0;
    this.El = 0x7bd44da8 | 0;
    this.Fh = 0x77e36f73 | 0;
    this.Fl = 0x04c48942 | 0;
    this.Gh = 0x3f9d85a8 | 0;
    this.Gl = 0x6a1d36c8 | 0;
    this.Hh = 0x1112e6ad | 0;
    this.Hl = 0x91d692a1 | 0;
    this.outputLen = 28;
  }
}
class SHA512_256 extends SHA512 {
  constructor() {
    super();
    // h -- high 32 bits, l -- low 32 bits
    this.Ah = 0x22312194 | 0;
    this.Al = 0xfc2bf72c | 0;
    this.Bh = 0x9f555fa3 | 0;
    this.Bl = 0xc84c64c2 | 0;
    this.Ch = 0x2393b86b | 0;
    this.Cl = 0x6f53b151 | 0;
    this.Dh = 0x96387719 | 0;
    this.Dl = 0x5940eabd | 0;
    this.Eh = 0x96283ee2 | 0;
    this.El = 0xa88effe3 | 0;
    this.Fh = 0xbe5e1e25 | 0;
    this.Fl = 0x53863992 | 0;
    this.Gh = 0x2b0199fc | 0;
    this.Gl = 0x2c85b8aa | 0;
    this.Hh = 0x0eb72ddc | 0;
    this.Hl = 0x81c52ca2 | 0;
    this.outputLen = 32;
  }
}
class SHA384 extends SHA512 {
  constructor() {
    super();
    // h -- high 32 bits, l -- low 32 bits
    this.Ah = 0xcbbb9d5d | 0;
    this.Al = 0xc1059ed8 | 0;
    this.Bh = 0x629a292a | 0;
    this.Bl = 0x367cd507 | 0;
    this.Ch = 0x9159015a | 0;
    this.Cl = 0x3070dd17 | 0;
    this.Dh = 0x152fecd8 | 0;
    this.Dl = 0xf70e5939 | 0;
    this.Eh = 0x67332667 | 0;
    this.El = 0xffc00b31 | 0;
    this.Fh = 0x8eb44a87 | 0;
    this.Fl = 0x68581511 | 0;
    this.Gh = 0xdb0c2e0d | 0;
    this.Gl = 0x64f98fa7 | 0;
    this.Hh = 0x47b5481d | 0;
    this.Hl = 0xbefa4fa4 | 0;
    this.outputLen = 48;
  }
}
const sha512 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512());
const sha512_224 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_224());
const sha512_256 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_256());
const sha384 = /* @__PURE__ */(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA384());

/***/ }),

/***/ 45839:
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash),
/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),
/* harmony export */   byteSwap: () => (/* binding */ byteSwap),
/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),
/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),
/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),
/* harmony export */   checkOpts: () => (/* binding */ checkOpts),
/* harmony export */   concatBytes: () => (/* binding */ concatBytes),
/* harmony export */   createView: () => (/* binding */ createView),
/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),
/* harmony export */   isBytes: () => (/* binding */ isBytes),
/* harmony export */   isLE: () => (/* binding */ isLE),
/* harmony export */   nextTick: () => (/* binding */ nextTick),
/* harmony export */   randomBytes: () => (/* binding */ randomBytes),
/* harmony export */   rotl: () => (/* binding */ rotl),
/* harmony export */   rotr: () => (/* binding */ rotr),
/* harmony export */   toBytes: () => (/* binding */ toBytes),
/* harmony export */   u32: () => (/* binding */ u32),
/* harmony export */   u8: () => (/* binding */ u8),
/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),
/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),
/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),
/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)
/* harmony export */ });
/* harmony import */ var _Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/@babel+runtime@7.25.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 18540);
/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/crypto */ 56017);
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ 82717);

/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.


// export { isBytes } from './_assert.js';
// We can't reuse isBytes from _assert, because somehow this causes huge perf issues
function isBytes(a) {
  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';
}
// Cast array to different type
const u8 = arr => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
const u32 = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
// Cast array to view
const createView = arr => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => word << 32 - shift | word >>> shift;
// The rotate left (circular left shift) operation for uint32
const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
// The byte swap operation for uint32
const byteSwap = word => word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;
// Conditionally byte swap if on a big-endian platform
const byteSwapIfBE = isLE ? n => n : n => byteSwap(n);
// In place byte swap for Uint32Array
function byteSwap32(arr) {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = byteSwap(arr[i]);
  }
}
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */Array.from({
  length: 256
}, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
  (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(bytes);
  // pre-caching improves the speed 6x
  let hex = '';
  for (let i = 0; i < bytes.length; i++) {
    hex += hexes[bytes[i]];
  }
  return hex;
}
// We use optimized technique to convert hex string to byte array
const asciis = {
  _0: 48,
  _9: 57,
  _A: 65,
  _F: 70,
  _a: 97,
  _f: 102
};
function asciiToBase16(char) {
  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
  return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);
  const hl = hex.length;
  const al = hl / 2;
  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
  const array = new Uint8Array(al);
  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
    const n1 = asciiToBase16(hex.charCodeAt(hi));
    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
    if (n1 === undefined || n2 === undefined) {
      const char = hex[hi] + hex[hi + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
    }
    array[ai] = n1 * 16 + n2;
  }
  return array;
}
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = /*#__PURE__*/function () {
  var _ref = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {});
  return function nextTick() {
    return _ref.apply(this, arguments);
  };
}();
// Returns control to thread each 'tick' ms to avoid blocking
function asyncLoop(_x, _x2, _x3) {
  return _asyncLoop.apply(this, arguments);
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function _asyncLoop() {
  _asyncLoop = (0,_Users_dmc_Documents_GitHub_management_portal_clr_node_modules_pnpm_babel_runtime_7_25_0_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
      cb(i);
      // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
      const diff = Date.now() - ts;
      if (diff >= 0 && diff < tick) continue;
      yield nextTick();
      ts += diff;
    }
  });
  return _asyncLoop.apply(this, arguments);
}
function utf8ToBytes(str) {
  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes(data) {
  if (typeof data === 'string') data = utf8ToBytes(data);
  (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(data);
  return data;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
  let sum = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(a);
    sum += a.length;
  }
  const res = new Uint8Array(sum);
  for (let i = 0, pad = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad);
    pad += a.length;
  }
  return res;
}
// For runtime check if class implements interface
class Hash {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
const toStr = {}.toString;
function checkOpts(defaults, opts) {
  if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = msg => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = opts => hashCons(opts);
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = opts => hashCons(opts);
  return hashC;
}
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */
function randomBytes(bytesLength = 32) {
  if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto.getRandomValues === 'function') {
    return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto.getRandomValues(new Uint8Array(bytesLength));
  }
  // Legacy Node.js compatibility
  if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto.randomBytes === 'function') {
    return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_2__.crypto.randomBytes(bytesLength);
  }
  throw new Error('crypto.getRandomValues must be defined');
}

/***/ })

}]);
//# sourceMappingURL=default-src_app_common_translateHelper_ts-src_app_components_components_module_ts.js.map